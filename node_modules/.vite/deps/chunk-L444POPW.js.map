{
  "version": 3,
  "sources": ["../../@thatopen/fragments/dist/index.mjs"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport * as THREE from \"three\";\nimport { BufferAttribute, Vector3, Vector2, Plane, Line3, Triangle, Sphere, Matrix4, Box3, BackSide, DoubleSide, FrontSide, Mesh, Ray, BufferGeometry } from \"three\";\nclass FragmentMesh extends THREE.InstancedMesh {\n  /**\n   * Constructs a new FragmentMesh.\n   *\n   * @param geometry - The geometry for the mesh. Must be indexed.\n   * @param material - The material(s) for the mesh. If a single material is provided, it will be wrapped in an array.\n   * @param count - The number of instances to create.\n   * @param fragment - The fragment associated with this mesh.\n   */\n  constructor(geometry, material, count, fragment) {\n    super(geometry, material, count);\n    /**\n     * The fragment associated with this mesh.\n     */\n    __publicField(this, \"fragment\");\n    /**\n     * The materials used by this mesh.\n     * If a single material is provided, it will be wrapped in an array.\n     */\n    __publicField(this, \"material\");\n    /**\n     * The geometry used by this mesh.\n     * It must be an IndexedGeometry.\n     */\n    __publicField(this, \"geometry\");\n    if (!Array.isArray(material)) {\n      material = [material];\n    }\n    this.material = material;\n    if (!geometry.index) {\n      throw new Error(\"The geometry for fragments must be indexed!\");\n    }\n    this.geometry = geometry;\n    this.fragment = fragment;\n    const size = geometry.index.count;\n    if (!geometry.groups.length) {\n      geometry.groups.push({\n        start: 0,\n        count: size,\n        materialIndex: 0\n      });\n    }\n  }\n  /**\n   * Exports the data of the fragment mesh to a serializable format.\n   *\n   * @returns An object containing the position, normal, index, groups, materials, matrices, and colors of the fragment mesh.\n   */\n  exportData() {\n    const position = this.geometry.attributes.position.array;\n    const normal = this.geometry.attributes.normal.array;\n    const index = Array.from(this.geometry.index.array);\n    const groups = [];\n    for (const group of this.geometry.groups) {\n      const index2 = group.materialIndex || 0;\n      const { start, count } = group;\n      groups.push(start, count, index2);\n    }\n    const materials = [];\n    if (Array.isArray(this.material)) {\n      for (const material of this.material) {\n        const opacity = material.opacity;\n        const transparent = material.transparent ? 1 : 0;\n        const color = new THREE.Color(material.color).toArray();\n        materials.push(opacity, transparent, ...color);\n      }\n    }\n    const matrices = Array.from(this.instanceMatrix.array);\n    let colors;\n    if (this.instanceColor !== null) {\n      colors = Array.from(this.instanceColor.array);\n    } else {\n      colors = [];\n    }\n    return {\n      position,\n      normal,\n      index,\n      groups,\n      materials,\n      matrices,\n      colors\n    };\n  }\n  clone(_recursive) {\n    throw new Error(\n      \"Fragment meshes can't be cloned directly. Use mesh.fragment.clone instead!\"\n    );\n  }\n}\nconst CENTER = 0;\nconst AVERAGE = 1;\nconst SAH = 2;\nconst CONTAINED = 2;\nconst TRIANGLE_INTERSECT_COST = 1.25;\nconst TRAVERSAL_COST = 1;\nconst BYTES_PER_NODE = 6 * 4 + 4 + 4;\nconst IS_LEAFNODE_FLAG = 65535;\nconst FLOAT32_EPSILON = Math.pow(2, -24);\nconst SKIP_GENERATION = Symbol(\"SKIP_GENERATION\");\nfunction getVertexCount(geo) {\n  return geo.index ? geo.index.count : geo.attributes.position.count;\n}\nfunction getTriCount(geo) {\n  return getVertexCount(geo) / 3;\n}\nfunction getIndexArray(vertexCount, BufferConstructor = ArrayBuffer) {\n  if (vertexCount > 65535) {\n    return new Uint32Array(new BufferConstructor(4 * vertexCount));\n  } else {\n    return new Uint16Array(new BufferConstructor(2 * vertexCount));\n  }\n}\nfunction ensureIndex(geo, options) {\n  if (!geo.index) {\n    const vertexCount = geo.attributes.position.count;\n    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    const index = getIndexArray(vertexCount, BufferConstructor);\n    geo.setIndex(new BufferAttribute(index, 1));\n    for (let i = 0; i < vertexCount; i++) {\n      index[i] = i;\n    }\n  }\n}\nfunction getFullGeometryRange(geo) {\n  const triCount = getTriCount(geo);\n  const drawRange = geo.drawRange;\n  const start = drawRange.start / 3;\n  const end = (drawRange.start + drawRange.count) / 3;\n  const offset = Math.max(0, start);\n  const count = Math.min(triCount, end) - offset;\n  return [{\n    offset: Math.floor(offset),\n    count: Math.floor(count)\n  }];\n}\nfunction getRootIndexRanges(geo) {\n  if (!geo.groups || !geo.groups.length) {\n    return getFullGeometryRange(geo);\n  }\n  const ranges = [];\n  const rangeBoundaries = /* @__PURE__ */ new Set();\n  const drawRange = geo.drawRange;\n  const drawRangeStart = drawRange.start / 3;\n  const drawRangeEnd = (drawRange.start + drawRange.count) / 3;\n  for (const group of geo.groups) {\n    const groupStart = group.start / 3;\n    const groupEnd = (group.start + group.count) / 3;\n    rangeBoundaries.add(Math.max(drawRangeStart, groupStart));\n    rangeBoundaries.add(Math.min(drawRangeEnd, groupEnd));\n  }\n  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b) => a - b);\n  for (let i = 0; i < sortedBoundaries.length - 1; i++) {\n    const start = sortedBoundaries[i];\n    const end = sortedBoundaries[i + 1];\n    ranges.push({\n      offset: Math.floor(start),\n      count: Math.floor(end - start)\n    });\n  }\n  return ranges;\n}\nfunction hasGroupGaps(geometry) {\n  if (geometry.groups.length === 0) {\n    return false;\n  }\n  const vertexCount = getTriCount(geometry);\n  const groups = getRootIndexRanges(geometry).sort((a, b) => a.offset - b.offset);\n  const finalGroup = groups[groups.length - 1];\n  finalGroup.count = Math.min(vertexCount - finalGroup.offset, finalGroup.count);\n  let total = 0;\n  groups.forEach(({ count }) => total += count);\n  return vertexCount !== total;\n}\nfunction arrayToBox(nodeIndex32, array, target) {\n  target.min.x = array[nodeIndex32];\n  target.min.y = array[nodeIndex32 + 1];\n  target.min.z = array[nodeIndex32 + 2];\n  target.max.x = array[nodeIndex32 + 3];\n  target.max.y = array[nodeIndex32 + 4];\n  target.max.z = array[nodeIndex32 + 5];\n  return target;\n}\nfunction makeEmptyBounds(target) {\n  target[0] = target[1] = target[2] = Infinity;\n  target[3] = target[4] = target[5] = -Infinity;\n}\nfunction getLongestEdgeIndex(bounds) {\n  let splitDimIdx = -1;\n  let splitDist = -Infinity;\n  for (let i = 0; i < 3; i++) {\n    const dist = bounds[i + 3] - bounds[i];\n    if (dist > splitDist) {\n      splitDist = dist;\n      splitDimIdx = i;\n    }\n  }\n  return splitDimIdx;\n}\nfunction copyBounds(source, target) {\n  target.set(source);\n}\nfunction unionBounds(a, b, target) {\n  let aVal, bVal;\n  for (let d = 0; d < 3; d++) {\n    const d3 = d + 3;\n    aVal = a[d];\n    bVal = b[d];\n    target[d] = aVal < bVal ? aVal : bVal;\n    aVal = a[d3];\n    bVal = b[d3];\n    target[d3] = aVal > bVal ? aVal : bVal;\n  }\n}\nfunction expandByTriangleBounds(startIndex, triangleBounds, bounds) {\n  for (let d = 0; d < 3; d++) {\n    const tCenter = triangleBounds[startIndex + 2 * d];\n    const tHalf = triangleBounds[startIndex + 2 * d + 1];\n    const tMin = tCenter - tHalf;\n    const tMax = tCenter + tHalf;\n    if (tMin < bounds[d]) {\n      bounds[d] = tMin;\n    }\n    if (tMax > bounds[d + 3]) {\n      bounds[d + 3] = tMax;\n    }\n  }\n}\nfunction computeSurfaceArea(bounds) {\n  const d0 = bounds[3] - bounds[0];\n  const d1 = bounds[4] - bounds[1];\n  const d2 = bounds[5] - bounds[2];\n  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}\nfunction getBounds(triangleBounds, offset, count, target, centroidTarget = null) {\n  let minx = Infinity;\n  let miny = Infinity;\n  let minz = Infinity;\n  let maxx = -Infinity;\n  let maxy = -Infinity;\n  let maxz = -Infinity;\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n  const includeCentroid = centroidTarget !== null;\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    const hx = triangleBounds[i + 1];\n    const lx = cx - hx;\n    const rx = cx + hx;\n    if (lx < minx)\n      minx = lx;\n    if (rx > maxx)\n      maxx = rx;\n    if (includeCentroid && cx < cminx)\n      cminx = cx;\n    if (includeCentroid && cx > cmaxx)\n      cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    const hy = triangleBounds[i + 3];\n    const ly = cy - hy;\n    const ry = cy + hy;\n    if (ly < miny)\n      miny = ly;\n    if (ry > maxy)\n      maxy = ry;\n    if (includeCentroid && cy < cminy)\n      cminy = cy;\n    if (includeCentroid && cy > cmaxy)\n      cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    const hz = triangleBounds[i + 5];\n    const lz = cz - hz;\n    const rz = cz + hz;\n    if (lz < minz)\n      minz = lz;\n    if (rz > maxz)\n      maxz = rz;\n    if (includeCentroid && cz < cminz)\n      cminz = cz;\n    if (includeCentroid && cz > cmaxz)\n      cmaxz = cz;\n  }\n  target[0] = minx;\n  target[1] = miny;\n  target[2] = minz;\n  target[3] = maxx;\n  target[4] = maxy;\n  target[5] = maxz;\n  if (includeCentroid) {\n    centroidTarget[0] = cminx;\n    centroidTarget[1] = cminy;\n    centroidTarget[2] = cminz;\n    centroidTarget[3] = cmaxx;\n    centroidTarget[4] = cmaxy;\n    centroidTarget[5] = cmaxz;\n  }\n}\nfunction getCentroidBounds(triangleBounds, offset, count, centroidTarget) {\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    if (cx < cminx)\n      cminx = cx;\n    if (cx > cmaxx)\n      cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    if (cy < cminy)\n      cminy = cy;\n    if (cy > cmaxy)\n      cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    if (cz < cminz)\n      cminz = cz;\n    if (cz > cmaxz)\n      cmaxz = cz;\n  }\n  centroidTarget[0] = cminx;\n  centroidTarget[1] = cminy;\n  centroidTarget[2] = cminz;\n  centroidTarget[3] = cmaxx;\n  centroidTarget[4] = cmaxy;\n  centroidTarget[5] = cmaxz;\n}\nfunction computeTriangleBounds(geo, fullBounds) {\n  makeEmptyBounds(fullBounds);\n  const posAttr = geo.attributes.position;\n  const index = geo.index ? geo.index.array : null;\n  const triCount = getTriCount(geo);\n  const triangleBounds = new Float32Array(triCount * 6);\n  const normalized = posAttr.normalized;\n  const posArr = posAttr.array;\n  const bufferOffset = posAttr.offset || 0;\n  let stride = 3;\n  if (posAttr.isInterleavedBufferAttribute) {\n    stride = posAttr.data.stride;\n  }\n  const getters = [\"getX\", \"getY\", \"getZ\"];\n  for (let tri = 0; tri < triCount; tri++) {\n    const tri3 = tri * 3;\n    const tri6 = tri * 6;\n    let ai = tri3 + 0;\n    let bi = tri3 + 1;\n    let ci = tri3 + 2;\n    if (index) {\n      ai = index[ai];\n      bi = index[bi];\n      ci = index[ci];\n    }\n    if (!normalized) {\n      ai = ai * stride + bufferOffset;\n      bi = bi * stride + bufferOffset;\n      ci = ci * stride + bufferOffset;\n    }\n    for (let el = 0; el < 3; el++) {\n      let a, b, c;\n      if (normalized) {\n        a = posAttr[getters[el]](ai);\n        b = posAttr[getters[el]](bi);\n        c = posAttr[getters[el]](ci);\n      } else {\n        a = posArr[ai + el];\n        b = posArr[bi + el];\n        c = posArr[ci + el];\n      }\n      let min = a;\n      if (b < min)\n        min = b;\n      if (c < min)\n        min = c;\n      let max = a;\n      if (b > max)\n        max = b;\n      if (c > max)\n        max = c;\n      const halfExtents = (max - min) / 2;\n      const el2 = el * 2;\n      triangleBounds[tri6 + el2 + 0] = min + halfExtents;\n      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;\n      if (min < fullBounds[el])\n        fullBounds[el] = min;\n      if (max > fullBounds[el + 3])\n        fullBounds[el + 3] = max;\n    }\n  }\n  return triangleBounds;\n}\nconst BIN_COUNT = 32;\nconst binsSort = (a, b) => a.candidate - b.candidate;\nconst sahBins = new Array(BIN_COUNT).fill().map(() => {\n  return {\n    count: 0,\n    bounds: new Float32Array(6),\n    rightCacheBounds: new Float32Array(6),\n    leftCacheBounds: new Float32Array(6),\n    candidate: 0\n  };\n});\nconst leftBounds = new Float32Array(6);\nfunction getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {\n  let axis = -1;\n  let pos = 0;\n  if (strategy === CENTER) {\n    axis = getLongestEdgeIndex(centroidBoundingData);\n    if (axis !== -1) {\n      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;\n    }\n  } else if (strategy === AVERAGE) {\n    axis = getLongestEdgeIndex(nodeBoundingData);\n    if (axis !== -1) {\n      pos = getAverage(triangleBounds, offset, count, axis);\n    }\n  } else if (strategy === SAH) {\n    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);\n    let bestCost = TRIANGLE_INTERSECT_COST * count;\n    const cStart = offset * 6;\n    const cEnd = (offset + count) * 6;\n    for (let a = 0; a < 3; a++) {\n      const axisLeft = centroidBoundingData[a];\n      const axisRight = centroidBoundingData[a + 3];\n      const axisLength = axisRight - axisLeft;\n      const binWidth = axisLength / BIN_COUNT;\n      if (count < BIN_COUNT / 4) {\n        const truncatedBins = [...sahBins];\n        truncatedBins.length = count;\n        let b = 0;\n        for (let c = cStart; c < cEnd; c += 6, b++) {\n          const bin = truncatedBins[b];\n          bin.candidate = triangleBounds[c + 2 * a];\n          bin.count = 0;\n          const {\n            bounds,\n            leftCacheBounds,\n            rightCacheBounds\n          } = bin;\n          for (let d = 0; d < 3; d++) {\n            rightCacheBounds[d] = Infinity;\n            rightCacheBounds[d + 3] = -Infinity;\n            leftCacheBounds[d] = Infinity;\n            leftCacheBounds[d + 3] = -Infinity;\n            bounds[d] = Infinity;\n            bounds[d + 3] = -Infinity;\n          }\n          expandByTriangleBounds(c, triangleBounds, bounds);\n        }\n        truncatedBins.sort(binsSort);\n        let splitCount = count;\n        for (let bi = 0; bi < splitCount; bi++) {\n          const bin = truncatedBins[bi];\n          while (bi + 1 < splitCount && truncatedBins[bi + 1].candidate === bin.candidate) {\n            truncatedBins.splice(bi + 1, 1);\n            splitCount--;\n          }\n        }\n        for (let c = cStart; c < cEnd; c += 6) {\n          const center = triangleBounds[c + 2 * a];\n          for (let bi = 0; bi < splitCount; bi++) {\n            const bin = truncatedBins[bi];\n            if (center >= bin.candidate) {\n              expandByTriangleBounds(c, triangleBounds, bin.rightCacheBounds);\n            } else {\n              expandByTriangleBounds(c, triangleBounds, bin.leftCacheBounds);\n              bin.count++;\n            }\n          }\n        }\n        for (let bi = 0; bi < splitCount; bi++) {\n          const bin = truncatedBins[bi];\n          const leftCount = bin.count;\n          const rightCount = count - bin.count;\n          const leftBounds2 = bin.leftCacheBounds;\n          const rightBounds = bin.rightCacheBounds;\n          let leftProb = 0;\n          if (leftCount !== 0) {\n            leftProb = computeSurfaceArea(leftBounds2) / rootSurfaceArea;\n          }\n          let rightProb = 0;\n          if (rightCount !== 0) {\n            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;\n          }\n          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n          if (cost < bestCost) {\n            axis = a;\n            bestCost = cost;\n            pos = bin.candidate;\n          }\n        }\n      } else {\n        for (let i = 0; i < BIN_COUNT; i++) {\n          const bin = sahBins[i];\n          bin.count = 0;\n          bin.candidate = axisLeft + binWidth + i * binWidth;\n          const bounds = bin.bounds;\n          for (let d = 0; d < 3; d++) {\n            bounds[d] = Infinity;\n            bounds[d + 3] = -Infinity;\n          }\n        }\n        for (let c = cStart; c < cEnd; c += 6) {\n          const triCenter = triangleBounds[c + 2 * a];\n          const relativeCenter = triCenter - axisLeft;\n          let binIndex = ~~(relativeCenter / binWidth);\n          if (binIndex >= BIN_COUNT)\n            binIndex = BIN_COUNT - 1;\n          const bin = sahBins[binIndex];\n          bin.count++;\n          expandByTriangleBounds(c, triangleBounds, bin.bounds);\n        }\n        const lastBin = sahBins[BIN_COUNT - 1];\n        copyBounds(lastBin.bounds, lastBin.rightCacheBounds);\n        for (let i = BIN_COUNT - 2; i >= 0; i--) {\n          const bin = sahBins[i];\n          const nextBin = sahBins[i + 1];\n          unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);\n        }\n        let leftCount = 0;\n        for (let i = 0; i < BIN_COUNT - 1; i++) {\n          const bin = sahBins[i];\n          const binCount = bin.count;\n          const bounds = bin.bounds;\n          const nextBin = sahBins[i + 1];\n          const rightBounds = nextBin.rightCacheBounds;\n          if (binCount !== 0) {\n            if (leftCount === 0) {\n              copyBounds(bounds, leftBounds);\n            } else {\n              unionBounds(bounds, leftBounds, leftBounds);\n            }\n          }\n          leftCount += binCount;\n          let leftProb = 0;\n          let rightProb = 0;\n          if (leftCount !== 0) {\n            leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;\n          }\n          const rightCount = count - leftCount;\n          if (rightCount !== 0) {\n            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;\n          }\n          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n          if (cost < bestCost) {\n            axis = a;\n            bestCost = cost;\n            pos = bin.candidate;\n          }\n        }\n      }\n    }\n  } else {\n    console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);\n  }\n  return { axis, pos };\n}\nfunction getAverage(triangleBounds, offset, count, axis) {\n  let avg = 0;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    avg += triangleBounds[i * 6 + axis * 2];\n  }\n  return avg / count;\n}\nclass MeshBVHNode {\n  constructor() {\n  }\n}\nfunction partition(indirectBuffer, index, triangleBounds, offset, count, split) {\n  let left = offset;\n  let right = offset + count - 1;\n  const pos = split.pos;\n  const axisOffset = split.axis * 2;\n  while (true) {\n    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {\n      left++;\n    }\n    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {\n      right--;\n    }\n    if (left < right) {\n      for (let i = 0; i < 3; i++) {\n        let t0 = index[left * 3 + i];\n        index[left * 3 + i] = index[right * 3 + i];\n        index[right * 3 + i] = t0;\n      }\n      for (let i = 0; i < 6; i++) {\n        let tb = triangleBounds[left * 6 + i];\n        triangleBounds[left * 6 + i] = triangleBounds[right * 6 + i];\n        triangleBounds[right * 6 + i] = tb;\n      }\n      left++;\n      right--;\n    } else {\n      return left;\n    }\n  }\n}\nfunction partition_indirect(indirectBuffer, index, triangleBounds, offset, count, split) {\n  let left = offset;\n  let right = offset + count - 1;\n  const pos = split.pos;\n  const axisOffset = split.axis * 2;\n  while (true) {\n    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {\n      left++;\n    }\n    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {\n      right--;\n    }\n    if (left < right) {\n      let t = indirectBuffer[left];\n      indirectBuffer[left] = indirectBuffer[right];\n      indirectBuffer[right] = t;\n      for (let i = 0; i < 6; i++) {\n        let tb = triangleBounds[left * 6 + i];\n        triangleBounds[left * 6 + i] = triangleBounds[right * 6 + i];\n        triangleBounds[right * 6 + i] = tb;\n      }\n      left++;\n      right--;\n    } else {\n      return left;\n    }\n  }\n}\nfunction generateIndirectBuffer(geometry, useSharedArrayBuffer) {\n  const triCount = (geometry.index ? geometry.index.count : geometry.attributes.position.count) / 3;\n  const useUint32 = triCount > 2 ** 16;\n  const byteCount = useUint32 ? 4 : 2;\n  const buffer = useSharedArrayBuffer ? new SharedArrayBuffer(triCount * byteCount) : new ArrayBuffer(triCount * byteCount);\n  const indirectBuffer = useUint32 ? new Uint32Array(buffer) : new Uint16Array(buffer);\n  for (let i = 0, l = indirectBuffer.length; i < l; i++) {\n    indirectBuffer[i] = i;\n  }\n  return indirectBuffer;\n}\nfunction buildTree(bvh, options) {\n  const geometry = bvh.geometry;\n  const indexArray = geometry.index ? geometry.index.array : null;\n  const maxDepth = options.maxDepth;\n  const verbose = options.verbose;\n  const maxLeafTris = options.maxLeafTris;\n  const strategy = options.strategy;\n  const onProgress = options.onProgress;\n  const totalTriangles = getTriCount(geometry);\n  const indirectBuffer = bvh._indirectBuffer;\n  let reachedMaxDepth = false;\n  const fullBounds = new Float32Array(6);\n  const cacheCentroidBoundingData = new Float32Array(6);\n  const triangleBounds = computeTriangleBounds(geometry, fullBounds);\n  const partionFunc = options.indirect ? partition_indirect : partition;\n  const roots = [];\n  const ranges = options.indirect ? getFullGeometryRange(geometry) : getRootIndexRanges(geometry);\n  if (ranges.length === 1) {\n    const range = ranges[0];\n    const root = new MeshBVHNode();\n    root.boundingData = fullBounds;\n    getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);\n    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n    roots.push(root);\n  } else {\n    for (let range of ranges) {\n      const root = new MeshBVHNode();\n      root.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);\n      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n      roots.push(root);\n    }\n  }\n  return roots;\n  function triggerProgress(trianglesProcessed) {\n    if (onProgress) {\n      onProgress(trianglesProcessed / totalTriangles);\n    }\n  }\n  function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {\n    if (!reachedMaxDepth && depth >= maxDepth) {\n      reachedMaxDepth = true;\n      if (verbose) {\n        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);\n        console.warn(geometry);\n      }\n    }\n    if (count <= maxLeafTris || depth >= maxDepth) {\n      triggerProgress(offset + count);\n      node.offset = offset;\n      node.count = count;\n      return node;\n    }\n    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);\n    if (split.axis === -1) {\n      triggerProgress(offset + count);\n      node.offset = offset;\n      node.count = count;\n      return node;\n    }\n    const splitOffset = partionFunc(indirectBuffer, indexArray, triangleBounds, offset, count, split);\n    if (splitOffset === offset || splitOffset === offset + count) {\n      triggerProgress(offset + count);\n      node.offset = offset;\n      node.count = count;\n    } else {\n      node.splitAxis = split.axis;\n      const left = new MeshBVHNode();\n      const lstart = offset;\n      const lcount = splitOffset - offset;\n      node.left = left;\n      left.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);\n      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1);\n      const right = new MeshBVHNode();\n      const rstart = splitOffset;\n      const rcount = count - lcount;\n      node.right = right;\n      right.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);\n      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);\n    }\n    return node;\n  }\n}\nfunction buildPackedTree(bvh, options) {\n  const geometry = bvh.geometry;\n  if (options.indirect) {\n    bvh._indirectBuffer = generateIndirectBuffer(geometry, options.useSharedArrayBuffer);\n    if (hasGroupGaps(geometry) && !options.verbose) {\n      console.warn(\n        'MeshBVH: Provided geometry contains groups that do not fully span the vertex contents while using the \"indirect\" option. BVH may incorrectly report intersections on unrendered portions of the geometry.'\n      );\n    }\n  }\n  if (!bvh._indirectBuffer) {\n    ensureIndex(geometry, options);\n  }\n  const roots = buildTree(bvh, options);\n  let float32Array;\n  let uint32Array;\n  let uint16Array;\n  const packedRoots = [];\n  const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n  for (let i = 0; i < roots.length; i++) {\n    const root = roots[i];\n    let nodeCount = countNodes(root);\n    const buffer = new BufferConstructor(BYTES_PER_NODE * nodeCount);\n    float32Array = new Float32Array(buffer);\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    populateBuffer(0, root);\n    packedRoots.push(buffer);\n  }\n  bvh._roots = packedRoots;\n  return;\n  function countNodes(node) {\n    if (node.count) {\n      return 1;\n    } else {\n      return 1 + countNodes(node.left) + countNodes(node.right);\n    }\n  }\n  function populateBuffer(byteOffset, node) {\n    const stride4Offset = byteOffset / 4;\n    const stride2Offset = byteOffset / 2;\n    const isLeaf = !!node.count;\n    const boundingData = node.boundingData;\n    for (let i = 0; i < 6; i++) {\n      float32Array[stride4Offset + i] = boundingData[i];\n    }\n    if (isLeaf) {\n      const offset = node.offset;\n      const count = node.count;\n      uint32Array[stride4Offset + 6] = offset;\n      uint16Array[stride2Offset + 14] = count;\n      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;\n      return byteOffset + BYTES_PER_NODE;\n    } else {\n      const left = node.left;\n      const right = node.right;\n      const splitAxis = node.splitAxis;\n      let nextUnusedPointer;\n      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);\n      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {\n        throw new Error(\"MeshBVH: Cannot store child pointer greater than 32 bits.\");\n      }\n      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;\n      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);\n      uint32Array[stride4Offset + 7] = splitAxis;\n      return nextUnusedPointer;\n    }\n  }\n}\nclass SeparatingAxisBounds {\n  constructor() {\n    this.min = Infinity;\n    this.max = -Infinity;\n  }\n  setFromPointsField(points, field) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0, l = points.length; i < l; i++) {\n      const p = points[i];\n      const val = p[field];\n      min = val < min ? val : min;\n      max = val > max ? val : max;\n    }\n    this.min = min;\n    this.max = max;\n  }\n  setFromPoints(axis, points) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0, l = points.length; i < l; i++) {\n      const p = points[i];\n      const val = axis.dot(p);\n      min = val < min ? val : min;\n      max = val > max ? val : max;\n    }\n    this.min = min;\n    this.max = max;\n  }\n  isSeparated(other) {\n    return this.min > other.max || other.min > this.max;\n  }\n}\nSeparatingAxisBounds.prototype.setFromBox = function() {\n  const p = new Vector3();\n  return function setFromBox(axis, box) {\n    const boxMin = box.min;\n    const boxMax = box.max;\n    let min = Infinity;\n    let max = -Infinity;\n    for (let x = 0; x <= 1; x++) {\n      for (let y = 0; y <= 1; y++) {\n        for (let z = 0; z <= 1; z++) {\n          p.x = boxMin.x * x + boxMax.x * (1 - x);\n          p.y = boxMin.y * y + boxMax.y * (1 - y);\n          p.z = boxMin.z * z + boxMax.z * (1 - z);\n          const val = axis.dot(p);\n          min = Math.min(val, min);\n          max = Math.max(val, max);\n        }\n      }\n    }\n    this.min = min;\n    this.max = max;\n  };\n}();\nconst closestPointLineToLine = function() {\n  const dir1 = new Vector3();\n  const dir2 = new Vector3();\n  const v02 = new Vector3();\n  return function closestPointLineToLine2(l1, l2, result) {\n    const v0 = l1.start;\n    const v10 = dir1;\n    const v2 = l2.start;\n    const v32 = dir2;\n    v02.subVectors(v0, v2);\n    dir1.subVectors(l1.end, l1.start);\n    dir2.subVectors(l2.end, l2.start);\n    const d0232 = v02.dot(v32);\n    const d3210 = v32.dot(v10);\n    const d3232 = v32.dot(v32);\n    const d0210 = v02.dot(v10);\n    const d1010 = v10.dot(v10);\n    const denom = d1010 * d3232 - d3210 * d3210;\n    let d, d2;\n    if (denom !== 0) {\n      d = (d0232 * d3210 - d0210 * d3232) / denom;\n    } else {\n      d = 0;\n    }\n    d2 = (d0232 + d * d3210) / d3232;\n    result.x = d;\n    result.y = d2;\n  };\n}();\nconst closestPointsSegmentToSegment = function() {\n  const paramResult = new Vector2();\n  const temp12 = new Vector3();\n  const temp22 = new Vector3();\n  return function closestPointsSegmentToSegment2(l1, l2, target1, target2) {\n    closestPointLineToLine(l1, l2, paramResult);\n    let d = paramResult.x;\n    let d2 = paramResult.y;\n    if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\n      l1.at(d, target1);\n      l2.at(d2, target2);\n      return;\n    } else if (d >= 0 && d <= 1) {\n      if (d2 < 0) {\n        l2.at(0, target2);\n      } else {\n        l2.at(1, target2);\n      }\n      l1.closestPointToPoint(target2, true, target1);\n      return;\n    } else if (d2 >= 0 && d2 <= 1) {\n      if (d < 0) {\n        l1.at(0, target1);\n      } else {\n        l1.at(1, target1);\n      }\n      l2.closestPointToPoint(target1, true, target2);\n      return;\n    } else {\n      let p;\n      if (d < 0) {\n        p = l1.start;\n      } else {\n        p = l1.end;\n      }\n      let p2;\n      if (d2 < 0) {\n        p2 = l2.start;\n      } else {\n        p2 = l2.end;\n      }\n      const closestPoint = temp12;\n      const closestPoint2 = temp22;\n      l1.closestPointToPoint(p2, true, temp12);\n      l2.closestPointToPoint(p, true, temp22);\n      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\n        target1.copy(closestPoint);\n        target2.copy(p2);\n        return;\n      } else {\n        target1.copy(p);\n        target2.copy(closestPoint2);\n        return;\n      }\n    }\n  };\n}();\nconst sphereIntersectTriangle = function() {\n  const closestPointTemp = new Vector3();\n  const projectedPointTemp = new Vector3();\n  const planeTemp = new Plane();\n  const lineTemp = new Line3();\n  return function sphereIntersectTriangle2(sphere, triangle3) {\n    const { radius, center } = sphere;\n    const { a, b, c } = triangle3;\n    lineTemp.start = a;\n    lineTemp.end = b;\n    const closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint1.distanceTo(center) <= radius)\n      return true;\n    lineTemp.start = a;\n    lineTemp.end = c;\n    const closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint2.distanceTo(center) <= radius)\n      return true;\n    lineTemp.start = b;\n    lineTemp.end = c;\n    const closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint3.distanceTo(center) <= radius)\n      return true;\n    const plane = triangle3.getPlane(planeTemp);\n    const dp = Math.abs(plane.distanceToPoint(center));\n    if (dp <= radius) {\n      const pp = plane.projectPoint(center, projectedPointTemp);\n      const cp = triangle3.containsPoint(pp);\n      if (cp)\n        return true;\n    }\n    return false;\n  };\n}();\nconst ZERO_EPSILON = 1e-15;\nfunction isNearZero(value) {\n  return Math.abs(value) < ZERO_EPSILON;\n}\nclass ExtendedTriangle extends Triangle {\n  constructor(...args) {\n    super(...args);\n    this.isExtendedTriangle = true;\n    this.satAxes = new Array(4).fill().map(() => new Vector3());\n    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());\n    this.points = [this.a, this.b, this.c];\n    this.sphere = new Sphere();\n    this.plane = new Plane();\n    this.needsUpdate = true;\n  }\n  intersectsSphere(sphere) {\n    return sphereIntersectTriangle(sphere, this);\n  }\n  update() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const points = this.points;\n    const satAxes = this.satAxes;\n    const satBounds = this.satBounds;\n    const axis0 = satAxes[0];\n    const sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, points);\n    const axis1 = satAxes[1];\n    const sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, points);\n    const axis2 = satAxes[2];\n    const sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, points);\n    const axis3 = satAxes[3];\n    const sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, points);\n    this.sphere.setFromPoints(this.points);\n    this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n    this.needsUpdate = false;\n  }\n}\nExtendedTriangle.prototype.closestPointToSegment = function() {\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const edge = new Line3();\n  return function distanceToSegment(segment, target1 = null, target2 = null) {\n    const { start, end } = segment;\n    const points = this.points;\n    let distSq;\n    let closestDistanceSq = Infinity;\n    for (let i = 0; i < 3; i++) {\n      const nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1)\n          target1.copy(point1);\n        if (target2)\n          target2.copy(point2);\n      }\n    }\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1)\n        target1.copy(point1);\n      if (target2)\n        target2.copy(start);\n    }\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1)\n        target1.copy(point1);\n      if (target2)\n        target2.copy(end);\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\nExtendedTriangle.prototype.intersectsTriangle = function() {\n  const saTri2 = new ExtendedTriangle();\n  const arr1 = new Array(3);\n  const arr2 = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  const dir = new Vector3();\n  const dir1 = new Vector3();\n  const dir2 = new Vector3();\n  const tempDir = new Vector3();\n  const edge = new Line3();\n  const edge1 = new Line3();\n  const edge2 = new Line3();\n  const tempPoint = new Vector3();\n  function triIntersectPlane(tri, plane, targetEdge) {\n    const points = tri.points;\n    let count = 0;\n    let startPointIntersection = -1;\n    for (let i = 0; i < 3; i++) {\n      const { start, end } = edge;\n      start.copy(points[i]);\n      end.copy(points[(i + 1) % 3]);\n      edge.delta(dir);\n      const startIntersects = isNearZero(plane.distanceToPoint(start));\n      if (isNearZero(plane.normal.dot(dir)) && startIntersects) {\n        targetEdge.copy(edge);\n        count = 2;\n        break;\n      }\n      const doesIntersect = plane.intersectLine(edge, tempPoint);\n      if (!doesIntersect && startIntersects) {\n        tempPoint.copy(start);\n      }\n      if ((doesIntersect || startIntersects) && !isNearZero(tempPoint.distanceTo(end))) {\n        if (count <= 1) {\n          const point = count === 1 ? targetEdge.start : targetEdge.end;\n          point.copy(tempPoint);\n          if (startIntersects) {\n            startPointIntersection = count;\n          }\n        } else if (count >= 2) {\n          const point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n          point.copy(tempPoint);\n          count = 2;\n          break;\n        }\n        count++;\n        if (count === 2 && startPointIntersection === -1) {\n          break;\n        }\n      }\n    }\n    return count;\n  }\n  return function intersectsTriangle(other, target = null, suppressLog = false) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!other.isExtendedTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n    const plane1 = this.plane;\n    const plane2 = other.plane;\n    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1 - 1e-10) {\n      const satBounds1 = this.satBounds;\n      const satAxes1 = this.satAxes;\n      arr2[0] = other.a;\n      arr2[1] = other.b;\n      arr2[2] = other.c;\n      for (let i = 0; i < 4; i++) {\n        const sb = satBounds1[i];\n        const sa = satAxes1[i];\n        cachedSatBounds.setFromPoints(sa, arr2);\n        if (sb.isSeparated(cachedSatBounds))\n          return false;\n      }\n      const satBounds2 = other.satBounds;\n      const satAxes2 = other.satAxes;\n      arr1[0] = this.a;\n      arr1[1] = this.b;\n      arr1[2] = this.c;\n      for (let i = 0; i < 4; i++) {\n        const sb = satBounds2[i];\n        const sa = satAxes2[i];\n        cachedSatBounds.setFromPoints(sa, arr1);\n        if (sb.isSeparated(cachedSatBounds))\n          return false;\n      }\n      for (let i = 0; i < 4; i++) {\n        const sa1 = satAxes1[i];\n        for (let i2 = 0; i2 < 4; i2++) {\n          const sa2 = satAxes2[i2];\n          cachedAxis.crossVectors(sa1, sa2);\n          cachedSatBounds.setFromPoints(cachedAxis, arr1);\n          cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n          if (cachedSatBounds.isSeparated(cachedSatBounds2))\n            return false;\n        }\n      }\n      if (target) {\n        if (!suppressLog) {\n          console.warn(\"ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.\");\n        }\n        target.start.set(0, 0, 0);\n        target.end.set(0, 0, 0);\n      }\n      return true;\n    } else {\n      const count1 = triIntersectPlane(this, plane2, edge1);\n      if (count1 === 1 && other.containsPoint(edge1.end)) {\n        if (target) {\n          target.start.copy(edge1.end);\n          target.end.copy(edge1.end);\n        }\n        return true;\n      } else if (count1 !== 2) {\n        return false;\n      }\n      const count2 = triIntersectPlane(other, plane1, edge2);\n      if (count2 === 1 && this.containsPoint(edge2.end)) {\n        if (target) {\n          target.start.copy(edge2.end);\n          target.end.copy(edge2.end);\n        }\n        return true;\n      } else if (count2 !== 2) {\n        return false;\n      }\n      edge1.delta(dir1);\n      edge2.delta(dir2);\n      if (dir1.dot(dir2) < 0) {\n        let tmp = edge2.start;\n        edge2.start = edge2.end;\n        edge2.end = tmp;\n      }\n      const s1 = edge1.start.dot(dir1);\n      const e1 = edge1.end.dot(dir1);\n      const s2 = edge2.start.dot(dir1);\n      const e2 = edge2.end.dot(dir1);\n      const separated1 = e1 < s2;\n      const separated2 = s1 < e2;\n      if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n        return false;\n      }\n      if (target) {\n        tempDir.subVectors(edge1.start, edge2.start);\n        if (tempDir.dot(dir1) > 0) {\n          target.start.copy(edge1.start);\n        } else {\n          target.start.copy(edge2.start);\n        }\n        tempDir.subVectors(edge1.end, edge2.end);\n        if (tempDir.dot(dir1) < 0) {\n          target.end.copy(edge1.end);\n        } else {\n          target.end.copy(edge2.end);\n        }\n      }\n      return true;\n    }\n  };\n}();\nExtendedTriangle.prototype.distanceToPoint = function() {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nExtendedTriangle.prototype.distanceToTriangle = function() {\n  const point = new Vector3();\n  const point2 = new Vector3();\n  const cornerFields = [\"a\", \"b\", \"c\"];\n  const line1 = new Line3();\n  const line2 = new Line3();\n  return function distanceToTriangle(other, target1 = null, target2 = null) {\n    const lineTarget = target1 || target2 ? line1 : null;\n    if (this.intersectsTriangle(other, lineTarget)) {\n      if (target1 || target2) {\n        if (target1)\n          lineTarget.getCenter(target1);\n        if (target2)\n          lineTarget.getCenter(target2);\n      }\n      return 0;\n    }\n    let closestDistanceSq = Infinity;\n    for (let i = 0; i < 3; i++) {\n      let dist;\n      const field = cornerFields[i];\n      const otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1)\n          target1.copy(point);\n        if (target2)\n          target2.copy(otherVec);\n      }\n      const thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1)\n          target1.copy(thisVec);\n        if (target2)\n          target2.copy(point);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      const f11 = cornerFields[i];\n      const f12 = cornerFields[(i + 1) % 3];\n      line1.set(this[f11], this[f12]);\n      for (let i2 = 0; i2 < 3; i2++) {\n        const f21 = cornerFields[i2];\n        const f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        const dist = point.distanceToSquared(point2);\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1)\n            target1.copy(point);\n          if (target2)\n            target2.copy(point2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\nclass OrientedBox {\n  constructor(min, max, matrix) {\n    this.isOrientedBox = true;\n    this.min = new Vector3();\n    this.max = new Vector3();\n    this.matrix = new Matrix4();\n    this.invMatrix = new Matrix4();\n    this.points = new Array(8).fill().map(() => new Vector3());\n    this.satAxes = new Array(3).fill().map(() => new Vector3());\n    this.satBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());\n    this.alignedSatBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());\n    this.needsUpdate = false;\n    if (min)\n      this.min.copy(min);\n    if (max)\n      this.max.copy(max);\n    if (matrix)\n      this.matrix.copy(matrix);\n  }\n  set(min, max, matrix) {\n    this.min.copy(min);\n    this.max.copy(max);\n    this.matrix.copy(matrix);\n    this.needsUpdate = true;\n  }\n  copy(other) {\n    this.min.copy(other.min);\n    this.max.copy(other.max);\n    this.matrix.copy(other.matrix);\n    this.needsUpdate = true;\n  }\n}\nOrientedBox.prototype.update = /* @__PURE__ */ function() {\n  return function update() {\n    const matrix = this.matrix;\n    const min = this.min;\n    const max = this.max;\n    const points = this.points;\n    for (let x = 0; x <= 1; x++) {\n      for (let y = 0; y <= 1; y++) {\n        for (let z = 0; z <= 1; z++) {\n          const i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n          const v = points[i];\n          v.x = x ? max.x : min.x;\n          v.y = y ? max.y : min.y;\n          v.z = z ? max.z : min.z;\n          v.applyMatrix4(matrix);\n        }\n      }\n    }\n    const satBounds = this.satBounds;\n    const satAxes = this.satAxes;\n    const minVec = points[0];\n    for (let i = 0; i < 3; i++) {\n      const axis = satAxes[i];\n      const sb = satBounds[i];\n      const index = 1 << i;\n      const pi = points[index];\n      axis.subVectors(minVec, pi);\n      sb.setFromPoints(axis, points);\n    }\n    const alignedSatBounds = this.alignedSatBounds;\n    alignedSatBounds[0].setFromPointsField(points, \"x\");\n    alignedSatBounds[1].setFromPointsField(points, \"y\");\n    alignedSatBounds[2].setFromPointsField(points, \"z\");\n    this.invMatrix.copy(this.matrix).invert();\n    this.needsUpdate = false;\n  };\n}();\nOrientedBox.prototype.intersectsBox = function() {\n  const aabbBounds = new SeparatingAxisBounds();\n  return function intersectsBox(box) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    const min = box.min;\n    const max = box.max;\n    const satBounds = this.satBounds;\n    const satAxes = this.satAxes;\n    const alignedSatBounds = this.alignedSatBounds;\n    aabbBounds.min = min.x;\n    aabbBounds.max = max.x;\n    if (alignedSatBounds[0].isSeparated(aabbBounds))\n      return false;\n    aabbBounds.min = min.y;\n    aabbBounds.max = max.y;\n    if (alignedSatBounds[1].isSeparated(aabbBounds))\n      return false;\n    aabbBounds.min = min.z;\n    aabbBounds.max = max.z;\n    if (alignedSatBounds[2].isSeparated(aabbBounds))\n      return false;\n    for (let i = 0; i < 3; i++) {\n      const axis = satAxes[i];\n      const sb = satBounds[i];\n      aabbBounds.setFromBox(axis, box);\n      if (sb.isSeparated(aabbBounds))\n        return false;\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.intersectsTriangle = function() {\n  const saTri = new ExtendedTriangle();\n  const pointsArr = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  return function intersectsTriangle(triangle3) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!triangle3.isExtendedTriangle) {\n      saTri.copy(triangle3);\n      saTri.update();\n      triangle3 = saTri;\n    } else if (triangle3.needsUpdate) {\n      triangle3.update();\n    }\n    const satBounds = this.satBounds;\n    const satAxes = this.satAxes;\n    pointsArr[0] = triangle3.a;\n    pointsArr[1] = triangle3.b;\n    pointsArr[2] = triangle3.c;\n    for (let i = 0; i < 3; i++) {\n      const sb = satBounds[i];\n      const sa = satAxes[i];\n      cachedSatBounds.setFromPoints(sa, pointsArr);\n      if (sb.isSeparated(cachedSatBounds))\n        return false;\n    }\n    const triSatBounds = triangle3.satBounds;\n    const triSatAxes = triangle3.satAxes;\n    const points = this.points;\n    for (let i = 0; i < 3; i++) {\n      const sb = triSatBounds[i];\n      const sa = triSatAxes[i];\n      cachedSatBounds.setFromPoints(sa, points);\n      if (sb.isSeparated(cachedSatBounds))\n        return false;\n    }\n    for (let i = 0; i < 3; i++) {\n      const sa1 = satAxes[i];\n      for (let i2 = 0; i2 < 4; i2++) {\n        const sa2 = triSatAxes[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n        cachedSatBounds2.setFromPoints(cachedAxis, points);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2))\n          return false;\n      }\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.closestPointToPoint = /* @__PURE__ */ function() {\n  return function closestPointToPoint2(point, target1) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n    return target1;\n  };\n}();\nOrientedBox.prototype.distanceToPoint = function() {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nOrientedBox.prototype.distanceToBox = function() {\n  const xyzFields = [\"x\", \"y\", \"z\"];\n  const segments1 = new Array(12).fill().map(() => new Line3());\n  const segments2 = new Array(12).fill().map(() => new Line3());\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  return function distanceToBox(box, threshold = 0, target1 = null, target2 = null) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (this.intersectsBox(box)) {\n      if (target1 || target2) {\n        box.getCenter(point2);\n        this.closestPointToPoint(point2, point1);\n        box.closestPointToPoint(point1, point2);\n        if (target1)\n          target1.copy(point1);\n        if (target2)\n          target2.copy(point2);\n      }\n      return 0;\n    }\n    const threshold2 = threshold * threshold;\n    const min = box.min;\n    const max = box.max;\n    const points = this.points;\n    let closestDistanceSq = Infinity;\n    for (let i = 0; i < 8; i++) {\n      const p = points[i];\n      point2.copy(p).clamp(min, max);\n      const dist = p.distanceToSquared(point2);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1)\n          target1.copy(p);\n        if (target2)\n          target2.copy(point2);\n        if (dist < threshold2)\n          return Math.sqrt(dist);\n      }\n    }\n    let count = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let i1 = 0; i1 <= 1; i1++) {\n        for (let i2 = 0; i2 <= 1; i2++) {\n          const nextIndex = (i + 1) % 3;\n          const nextIndex2 = (i + 2) % 3;\n          const index = i1 << nextIndex | i2 << nextIndex2;\n          const index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n          const p1 = points[index];\n          const p2 = points[index2];\n          const line1 = segments1[count];\n          line1.set(p1, p2);\n          const f1 = xyzFields[i];\n          const f2 = xyzFields[nextIndex];\n          const f3 = xyzFields[nextIndex2];\n          const line2 = segments2[count];\n          const start = line2.start;\n          const end = line2.end;\n          start[f1] = min[f1];\n          start[f2] = i1 ? min[f2] : max[f2];\n          start[f3] = i2 ? min[f3] : max[f2];\n          end[f1] = max[f1];\n          end[f2] = i1 ? min[f2] : max[f2];\n          end[f3] = i2 ? min[f3] : max[f2];\n          count++;\n        }\n      }\n    }\n    for (let x = 0; x <= 1; x++) {\n      for (let y = 0; y <= 1; y++) {\n        for (let z = 0; z <= 1; z++) {\n          point2.x = x ? max.x : min.x;\n          point2.y = y ? max.y : min.y;\n          point2.z = z ? max.z : min.z;\n          this.closestPointToPoint(point2, point1);\n          const dist = point2.distanceToSquared(point1);\n          if (dist < closestDistanceSq) {\n            closestDistanceSq = dist;\n            if (target1)\n              target1.copy(point1);\n            if (target2)\n              target2.copy(point2);\n            if (dist < threshold2)\n              return Math.sqrt(dist);\n          }\n        }\n      }\n    }\n    for (let i = 0; i < 12; i++) {\n      const l1 = segments1[i];\n      for (let i2 = 0; i2 < 12; i2++) {\n        const l2 = segments2[i2];\n        closestPointsSegmentToSegment(l1, l2, point1, point2);\n        const dist = point1.distanceToSquared(point2);\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1)\n            target1.copy(point1);\n          if (target2)\n            target2.copy(point2);\n          if (dist < threshold2)\n            return Math.sqrt(dist);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\nclass PrimitivePool {\n  constructor(getNewPrimitive) {\n    this._getNewPrimitive = getNewPrimitive;\n    this._primitives = [];\n  }\n  getPrimitive() {\n    const primitives = this._primitives;\n    if (primitives.length === 0) {\n      return this._getNewPrimitive();\n    } else {\n      return primitives.pop();\n    }\n  }\n  releasePrimitive(primitive) {\n    this._primitives.push(primitive);\n  }\n}\nclass ExtendedTrianglePoolBase extends PrimitivePool {\n  constructor() {\n    super(() => new ExtendedTriangle());\n  }\n}\nconst ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\nfunction IS_LEAF(n16, uint16Array) {\n  return uint16Array[n16 + 15] === 65535;\n}\nfunction OFFSET(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\nfunction COUNT(n16, uint16Array) {\n  return uint16Array[n16 + 14];\n}\nfunction LEFT_NODE(n32) {\n  return n32 + 8;\n}\nfunction RIGHT_NODE(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\nfunction SPLIT_AXIS(n32, uint32Array) {\n  return uint32Array[n32 + 7];\n}\nfunction BOUNDING_DATA_INDEX(n32) {\n  return n32;\n}\nclass _BufferStack {\n  constructor() {\n    this.float32Array = null;\n    this.uint16Array = null;\n    this.uint32Array = null;\n    const stack = [];\n    let prevBuffer = null;\n    this.setBuffer = (buffer) => {\n      if (prevBuffer) {\n        stack.push(prevBuffer);\n      }\n      prevBuffer = buffer;\n      this.float32Array = new Float32Array(buffer);\n      this.uint16Array = new Uint16Array(buffer);\n      this.uint32Array = new Uint32Array(buffer);\n    };\n    this.clearBuffer = () => {\n      prevBuffer = null;\n      this.float32Array = null;\n      this.uint16Array = null;\n      this.uint32Array = null;\n      if (stack.length !== 0) {\n        this.setBuffer(stack.pop());\n      }\n    };\n  }\n}\nconst BufferStack = new _BufferStack();\nlet _box1, _box2;\nconst boxStack = [];\nconst boxPool = /* @__PURE__ */ new PrimitivePool(() => new Box3());\nfunction shapecast(bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset) {\n  _box1 = boxPool.getPrimitive();\n  _box2 = boxPool.getPrimitive();\n  boxStack.push(_box1, _box2);\n  BufferStack.setBuffer(bvh._roots[root]);\n  const result = shapecastTraverse(0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n  BufferStack.clearBuffer();\n  boxPool.releasePrimitive(_box1);\n  boxPool.releasePrimitive(_box2);\n  boxStack.pop();\n  boxStack.pop();\n  const length = boxStack.length;\n  if (length > 0) {\n    _box2 = boxStack[length - 1];\n    _box1 = boxStack[length - 2];\n  }\n  return result;\n}\nfunction shapecastTraverse(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, depth = 0) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  let nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, _box1);\n    return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1);\n  } else {\n    let getLeftOffset = function(nodeIndex322) {\n      const { uint16Array: uint16Array2, uint32Array: uint32Array2 } = BufferStack;\n      let nodeIndex162 = nodeIndex322 * 2;\n      while (!IS_LEAF(nodeIndex162, uint16Array2)) {\n        nodeIndex322 = LEFT_NODE(nodeIndex322);\n        nodeIndex162 = nodeIndex322 * 2;\n      }\n      return OFFSET(nodeIndex322, uint32Array2);\n    }, getRightEndOffset = function(nodeIndex322) {\n      const { uint16Array: uint16Array2, uint32Array: uint32Array2 } = BufferStack;\n      let nodeIndex162 = nodeIndex322 * 2;\n      while (!IS_LEAF(nodeIndex162, uint16Array2)) {\n        nodeIndex322 = RIGHT_NODE(nodeIndex322, uint32Array2);\n        nodeIndex162 = nodeIndex322 * 2;\n      }\n      return OFFSET(nodeIndex322, uint32Array2) + COUNT(nodeIndex162, uint16Array2);\n    };\n    const left = LEFT_NODE(nodeIndex32);\n    const right = RIGHT_NODE(nodeIndex32, uint32Array);\n    let c1 = left;\n    let c2 = right;\n    let score1, score2;\n    let box1, box2;\n    if (nodeScoreFunc) {\n      box1 = _box1;\n      box2 = _box2;\n      arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n      arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n      score1 = nodeScoreFunc(box1);\n      score2 = nodeScoreFunc(box2);\n      if (score2 < score1) {\n        c1 = right;\n        c2 = left;\n        const temp5 = score1;\n        score1 = score2;\n        score2 = temp5;\n        box1 = box2;\n      }\n    }\n    if (!box1) {\n      box1 = _box1;\n      arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n    }\n    const isC1Leaf = IS_LEAF(c1 * 2, uint16Array);\n    const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);\n    let c1StopTraversal;\n    if (c1Intersection === CONTAINED) {\n      const offset = getLeftOffset(c1);\n      const end = getRightEndOffset(c1);\n      const count = end - offset;\n      c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);\n    } else {\n      c1StopTraversal = c1Intersection && shapecastTraverse(\n        c1,\n        geometry,\n        intersectsBoundsFunc,\n        intersectsRangeFunc,\n        nodeScoreFunc,\n        nodeIndexByteOffset,\n        depth + 1\n      );\n    }\n    if (c1StopTraversal)\n      return true;\n    box2 = _box2;\n    arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n    const isC2Leaf = IS_LEAF(c2 * 2, uint16Array);\n    const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);\n    let c2StopTraversal;\n    if (c2Intersection === CONTAINED) {\n      const offset = getLeftOffset(c2);\n      const end = getRightEndOffset(c2);\n      const count = end - offset;\n      c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2);\n    } else {\n      c2StopTraversal = c2Intersection && shapecastTraverse(\n        c2,\n        geometry,\n        intersectsBoundsFunc,\n        intersectsRangeFunc,\n        nodeScoreFunc,\n        nodeIndexByteOffset,\n        depth + 1\n      );\n    }\n    if (c2StopTraversal)\n      return true;\n    return false;\n  }\n}\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1$2 = /* @__PURE__ */ new Vector3();\nfunction closestPointToPoint(bvh, point, target = {}, minThreshold = 0, maxThreshold = Infinity) {\n  const minThresholdSq = minThreshold * minThreshold;\n  const maxThresholdSq = maxThreshold * maxThreshold;\n  let closestDistanceSq = Infinity;\n  let closestDistanceTriIndex = null;\n  bvh.shapecast(\n    {\n      boundsTraverseOrder: (box) => {\n        temp.copy(point).clamp(box.min, box.max);\n        return temp.distanceToSquared(point);\n      },\n      intersectsBounds: (box, isLeaf, score) => {\n        return score < closestDistanceSq && score < maxThresholdSq;\n      },\n      intersectsTriangle: (tri, triIndex) => {\n        tri.closestPointToPoint(point, temp);\n        const distSq = point.distanceToSquared(temp);\n        if (distSq < closestDistanceSq) {\n          temp1$2.copy(temp);\n          closestDistanceSq = distSq;\n          closestDistanceTriIndex = triIndex;\n        }\n        if (distSq < minThresholdSq) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n  );\n  if (closestDistanceSq === Infinity)\n    return null;\n  const closestDistance = Math.sqrt(closestDistanceSq);\n  if (!target.point)\n    target.point = temp1$2.clone();\n  else\n    target.point.copy(temp1$2);\n  target.distance = closestDistance, target.faceIndex = closestDistanceTriIndex;\n  return target;\n}\nconst _vA = /* @__PURE__ */ new Vector3();\nconst _vB = /* @__PURE__ */ new Vector3();\nconst _vC = /* @__PURE__ */ new Vector3();\nconst _uvA = /* @__PURE__ */ new Vector2();\nconst _uvB = /* @__PURE__ */ new Vector2();\nconst _uvC = /* @__PURE__ */ new Vector2();\nconst _normalA = /* @__PURE__ */ new Vector3();\nconst _normalB = /* @__PURE__ */ new Vector3();\nconst _normalC = /* @__PURE__ */ new Vector3();\nconst _intersectionPoint = /* @__PURE__ */ new Vector3();\nfunction checkIntersection(ray2, pA, pB, pC, point, side) {\n  let intersect;\n  if (side === BackSide) {\n    intersect = ray2.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray2.intersectTriangle(pA, pB, pC, side !== DoubleSide, point);\n  }\n  if (intersect === null)\n    return null;\n  const distance = ray2.origin.distanceTo(point);\n  return {\n    distance,\n    point: point.clone()\n  };\n}\nfunction checkBufferGeometryIntersection(ray2, position, normal, uv, uv1, a, b, c, side) {\n  _vA.fromBufferAttribute(position, a);\n  _vB.fromBufferAttribute(position, b);\n  _vC.fromBufferAttribute(position, c);\n  const intersection = checkIntersection(ray2, _vA, _vB, _vC, _intersectionPoint, side);\n  if (intersection) {\n    if (uv) {\n      _uvA.fromBufferAttribute(uv, a);\n      _uvB.fromBufferAttribute(uv, b);\n      _uvC.fromBufferAttribute(uv, c);\n      intersection.uv = Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n    }\n    if (uv1) {\n      _uvA.fromBufferAttribute(uv1, a);\n      _uvB.fromBufferAttribute(uv1, b);\n      _uvC.fromBufferAttribute(uv1, c);\n      intersection.uv1 = Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n    }\n    if (normal) {\n      _normalA.fromBufferAttribute(normal, a);\n      _normalB.fromBufferAttribute(normal, b);\n      _normalC.fromBufferAttribute(normal, c);\n      intersection.normal = Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new Vector3());\n      if (intersection.normal.dot(ray2.direction) > 0) {\n        intersection.normal.multiplyScalar(-1);\n      }\n    }\n    const face = {\n      a,\n      b,\n      c,\n      normal: new Vector3(),\n      materialIndex: 0\n    };\n    Triangle.getNormal(_vA, _vB, _vC, face.normal);\n    intersection.face = face;\n    intersection.faceIndex = a;\n  }\n  return intersection;\n}\nfunction intersectTri(geo, side, ray2, tri, intersections) {\n  const triOffset = tri * 3;\n  let a = triOffset + 0;\n  let b = triOffset + 1;\n  let c = triOffset + 2;\n  const index = geo.index;\n  if (geo.index) {\n    a = index.getX(a);\n    b = index.getX(b);\n    c = index.getX(c);\n  }\n  const { position, normal, uv, uv1 } = geo.attributes;\n  const intersection = checkBufferGeometryIntersection(ray2, position, normal, uv, uv1, a, b, c, side);\n  if (intersection) {\n    intersection.faceIndex = tri;\n    if (intersections)\n      intersections.push(intersection);\n    return intersection;\n  }\n  return null;\n}\nfunction setTriangle(tri, i, index, pos) {\n  const ta = tri.a;\n  const tb = tri.b;\n  const tc = tri.c;\n  let i0 = i;\n  let i1 = i + 1;\n  let i2 = i + 2;\n  if (index) {\n    i0 = index.getX(i0);\n    i1 = index.getX(i1);\n    i2 = index.getX(i2);\n  }\n  ta.x = pos.getX(i0);\n  ta.y = pos.getY(i0);\n  ta.z = pos.getZ(i0);\n  tb.x = pos.getX(i1);\n  tb.y = pos.getY(i1);\n  tb.z = pos.getZ(i1);\n  tc.x = pos.getX(i2);\n  tc.y = pos.getY(i2);\n  tc.z = pos.getZ(i2);\n}\nfunction intersectTris(bvh, side, ray2, offset, count, intersections) {\n  const { geometry, _indirectBuffer } = bvh;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    intersectTri(geometry, side, ray2, i, intersections);\n  }\n}\nfunction intersectClosestTri(bvh, side, ray2, offset, count) {\n  const { geometry, _indirectBuffer } = bvh;\n  let dist = Infinity;\n  let res = null;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    let intersection;\n    intersection = intersectTri(geometry, side, ray2, i);\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n  return res;\n}\nfunction iterateOverTriangles(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle3) {\n  const { geometry } = bvh;\n  const { index } = geometry;\n  const pos = geometry.attributes.position;\n  for (let i = offset, l = count + offset; i < l; i++) {\n    let tri;\n    tri = i;\n    setTriangle(triangle3, tri * 3, index, pos);\n    triangle3.needsUpdate = true;\n    if (intersectsTriangleFunc(triangle3, tri, contained, depth)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction refit(bvh, nodeIndices = null) {\n  if (nodeIndices && Array.isArray(nodeIndices)) {\n    nodeIndices = new Set(nodeIndices);\n  }\n  const geometry = bvh.geometry;\n  const indexArr = geometry.index ? geometry.index.array : null;\n  const posAttr = geometry.attributes.position;\n  let buffer, uint32Array, uint16Array, float32Array;\n  let byteOffset = 0;\n  const roots = bvh._roots;\n  for (let i = 0, l = roots.length; i < l; i++) {\n    buffer = roots[i];\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    float32Array = new Float32Array(buffer);\n    _traverse2(0, byteOffset);\n    byteOffset += buffer.byteLength;\n  }\n  function _traverse2(node32Index, byteOffset2, force = false) {\n    const node16Index = node32Index * 2;\n    const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n    if (isLeaf) {\n      const offset = uint32Array[node32Index + 6];\n      const count = uint16Array[node16Index + 14];\n      let minx = Infinity;\n      let miny = Infinity;\n      let minz = Infinity;\n      let maxx = -Infinity;\n      let maxy = -Infinity;\n      let maxz = -Infinity;\n      for (let i = 3 * offset, l = 3 * (offset + count); i < l; i++) {\n        let index = indexArr[i];\n        const x = posAttr.getX(index);\n        const y = posAttr.getY(index);\n        const z = posAttr.getZ(index);\n        if (x < minx)\n          minx = x;\n        if (x > maxx)\n          maxx = x;\n        if (y < miny)\n          miny = y;\n        if (y > maxy)\n          maxy = y;\n        if (z < minz)\n          minz = z;\n        if (z > maxz)\n          maxz = z;\n      }\n      if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n        float32Array[node32Index + 0] = minx;\n        float32Array[node32Index + 1] = miny;\n        float32Array[node32Index + 2] = minz;\n        float32Array[node32Index + 3] = maxx;\n        float32Array[node32Index + 4] = maxy;\n        float32Array[node32Index + 5] = maxz;\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      const left = node32Index + 8;\n      const right = uint32Array[node32Index + 6];\n      const offsetLeft = left + byteOffset2;\n      const offsetRight = right + byteOffset2;\n      let forceChildren = force;\n      let includesLeft = false;\n      let includesRight = false;\n      if (nodeIndices) {\n        if (!forceChildren) {\n          includesLeft = nodeIndices.has(offsetLeft);\n          includesRight = nodeIndices.has(offsetRight);\n          forceChildren = !includesLeft && !includesRight;\n        }\n      } else {\n        includesLeft = true;\n        includesRight = true;\n      }\n      const traverseLeft = forceChildren || includesLeft;\n      const traverseRight = forceChildren || includesRight;\n      let leftChange = false;\n      if (traverseLeft) {\n        leftChange = _traverse2(left, byteOffset2, forceChildren);\n      }\n      let rightChange = false;\n      if (traverseRight) {\n        rightChange = _traverse2(right, byteOffset2, forceChildren);\n      }\n      const didChange = leftChange || rightChange;\n      if (didChange) {\n        for (let i = 0; i < 3; i++) {\n          const lefti = left + i;\n          const righti = right + i;\n          const minLeftValue = float32Array[lefti];\n          const maxLeftValue = float32Array[lefti + 3];\n          const minRightValue = float32Array[righti];\n          const maxRightValue = float32Array[righti + 3];\n          float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n          float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n        }\n      }\n      return didChange;\n    }\n  }\n}\nconst _boundingBox = /* @__PURE__ */ new Box3();\nfunction intersectRay(nodeIndex32, array, ray2, target) {\n  arrayToBox(nodeIndex32, array, _boundingBox);\n  return ray2.intersectBox(_boundingBox, target);\n}\nfunction intersectTris_indirect(bvh, side, ray2, offset, count, intersections) {\n  const { geometry, _indirectBuffer } = bvh;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    let vi = _indirectBuffer ? _indirectBuffer[i] : i;\n    intersectTri(geometry, side, ray2, vi, intersections);\n  }\n}\nfunction intersectClosestTri_indirect(bvh, side, ray2, offset, count) {\n  const { geometry, _indirectBuffer } = bvh;\n  let dist = Infinity;\n  let res = null;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    let intersection;\n    intersection = intersectTri(geometry, side, ray2, _indirectBuffer ? _indirectBuffer[i] : i);\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n  return res;\n}\nfunction iterateOverTriangles_indirect(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle3) {\n  const { geometry } = bvh;\n  const { index } = geometry;\n  const pos = geometry.attributes.position;\n  for (let i = offset, l = count + offset; i < l; i++) {\n    let tri;\n    tri = bvh.resolveTriangleIndex(i);\n    setTriangle(triangle3, tri * 3, index, pos);\n    triangle3.needsUpdate = true;\n    if (intersectsTriangleFunc(triangle3, tri, contained, depth)) {\n      return true;\n    }\n  }\n  return false;\n}\nconst _boxIntersection$3 = /* @__PURE__ */ new Vector3();\nfunction raycast(bvh, root, side, ray2, intersects) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  _raycast$1(0, bvh, side, ray2, intersects);\n  BufferStack.clearBuffer();\n}\nfunction _raycast$1(nodeIndex32, bvh, side, ray2, intersects) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  const nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    intersectTris(bvh, side, ray2, offset, count, intersects);\n  } else {\n    const leftIndex = LEFT_NODE(nodeIndex32);\n    if (intersectRay(leftIndex, float32Array, ray2, _boxIntersection$3)) {\n      _raycast$1(leftIndex, bvh, side, ray2, intersects);\n    }\n    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n    if (intersectRay(rightIndex, float32Array, ray2, _boxIntersection$3)) {\n      _raycast$1(rightIndex, bvh, side, ray2, intersects);\n    }\n  }\n}\nconst _boxIntersection$2 = /* @__PURE__ */ new Vector3();\nconst _xyzFields$1 = [\"x\", \"y\", \"z\"];\nfunction raycastFirst(bvh, root, side, ray2) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  const result = _raycastFirst$1(0, bvh, side, ray2);\n  BufferStack.clearBuffer();\n  return result;\n}\nfunction _raycastFirst$1(nodeIndex32, bvh, side, ray2) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  let nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    return intersectClosestTri(bvh, side, ray2, offset, count);\n  } else {\n    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n    const xyzAxis = _xyzFields$1[splitAxis];\n    const rayDir = ray2.direction[xyzAxis];\n    const leftToRight = rayDir >= 0;\n    let c1, c2;\n    if (leftToRight) {\n      c1 = LEFT_NODE(nodeIndex32);\n      c2 = RIGHT_NODE(nodeIndex32, uint32Array);\n    } else {\n      c1 = RIGHT_NODE(nodeIndex32, uint32Array);\n      c2 = LEFT_NODE(nodeIndex32);\n    }\n    const c1Intersection = intersectRay(c1, float32Array, ray2, _boxIntersection$2);\n    const c1Result = c1Intersection ? _raycastFirst$1(c1, bvh, side, ray2) : null;\n    if (c1Result) {\n      const point = c1Result.point[xyzAxis];\n      const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : (\n        // min bounding data\n        point >= float32Array[c2 + splitAxis + 3]\n      );\n      if (isOutside) {\n        return c1Result;\n      }\n    }\n    const c2Intersection = intersectRay(c2, float32Array, ray2, _boxIntersection$2);\n    const c2Result = c2Intersection ? _raycastFirst$1(c2, bvh, side, ray2) : null;\n    if (c1Result && c2Result) {\n      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n    } else {\n      return c1Result || c2Result || null;\n    }\n  }\n}\nconst boundingBox$1 = /* @__PURE__ */ new Box3();\nconst triangle$1 = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2$1 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat$1 = /* @__PURE__ */ new Matrix4();\nconst obb$4 = /* @__PURE__ */ new OrientedBox();\nconst obb2$3 = /* @__PURE__ */ new OrientedBox();\nfunction intersectsGeometry(bvh, root, otherGeometry, geometryToBvh) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  const result = _intersectsGeometry$1(0, bvh, otherGeometry, geometryToBvh);\n  BufferStack.clearBuffer();\n  return result;\n}\nfunction _intersectsGeometry$1(nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  let nodeIndex16 = nodeIndex32 * 2;\n  if (cachedObb === null) {\n    if (!otherGeometry.boundingBox) {\n      otherGeometry.computeBoundingBox();\n    }\n    obb$4.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    cachedObb = obb$4;\n  }\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const thisGeometry = bvh.geometry;\n    const thisIndex = thisGeometry.index;\n    const thisPos = thisGeometry.attributes.position;\n    const index = otherGeometry.index;\n    const pos = otherGeometry.attributes.position;\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    invertedMat$1.copy(geometryToBvh).invert();\n    if (otherGeometry.boundsTree) {\n      arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb2$3);\n      obb2$3.matrix.copy(invertedMat$1);\n      obb2$3.needsUpdate = true;\n      const res = otherGeometry.boundsTree.shapecast({\n        intersectsBounds: (box) => obb2$3.intersectsBox(box),\n        intersectsTriangle: (tri) => {\n          tri.a.applyMatrix4(geometryToBvh);\n          tri.b.applyMatrix4(geometryToBvh);\n          tri.c.applyMatrix4(geometryToBvh);\n          tri.needsUpdate = true;\n          for (let i = offset * 3, l = (count + offset) * 3; i < l; i += 3) {\n            setTriangle(triangle2$1, i, thisIndex, thisPos);\n            triangle2$1.needsUpdate = true;\n            if (tri.intersectsTriangle(triangle2$1)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      });\n      return res;\n    } else {\n      for (let i = offset * 3, l = (count + offset) * 3; i < l; i += 3) {\n        setTriangle(triangle$1, i, thisIndex, thisPos);\n        triangle$1.a.applyMatrix4(invertedMat$1);\n        triangle$1.b.applyMatrix4(invertedMat$1);\n        triangle$1.c.applyMatrix4(invertedMat$1);\n        triangle$1.needsUpdate = true;\n        for (let i2 = 0, l2 = index.count; i2 < l2; i2 += 3) {\n          setTriangle(triangle2$1, i2, index, pos);\n          triangle2$1.needsUpdate = true;\n          if (triangle$1.intersectsTriangle(triangle2$1)) {\n            return true;\n          }\n        }\n      }\n    }\n  } else {\n    const left = nodeIndex32 + 8;\n    const right = uint32Array[nodeIndex32 + 6];\n    arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox$1);\n    const leftIntersection = cachedObb.intersectsBox(boundingBox$1) && _intersectsGeometry$1(left, bvh, otherGeometry, geometryToBvh, cachedObb);\n    if (leftIntersection)\n      return true;\n    arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox$1);\n    const rightIntersection = cachedObb.intersectsBox(boundingBox$1) && _intersectsGeometry$1(right, bvh, otherGeometry, geometryToBvh, cachedObb);\n    if (rightIntersection)\n      return true;\n    return false;\n  }\n}\nconst tempMatrix$1 = /* @__PURE__ */ new Matrix4();\nconst obb$3 = /* @__PURE__ */ new OrientedBox();\nconst obb2$2 = /* @__PURE__ */ new OrientedBox();\nconst temp1$1 = /* @__PURE__ */ new Vector3();\nconst temp2$1 = /* @__PURE__ */ new Vector3();\nconst temp3$1 = /* @__PURE__ */ new Vector3();\nconst temp4$1 = /* @__PURE__ */ new Vector3();\nfunction closestPointToGeometry(bvh, otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n  if (!otherGeometry.boundingBox) {\n    otherGeometry.computeBoundingBox();\n  }\n  obb$3.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n  obb$3.needsUpdate = true;\n  const geometry = bvh.geometry;\n  const pos = geometry.attributes.position;\n  const index = geometry.index;\n  const otherPos = otherGeometry.attributes.position;\n  const otherIndex = otherGeometry.index;\n  const triangle3 = ExtendedTrianglePool.getPrimitive();\n  const triangle22 = ExtendedTrianglePool.getPrimitive();\n  let tempTarget1 = temp1$1;\n  let tempTargetDest1 = temp2$1;\n  let tempTarget2 = null;\n  let tempTargetDest2 = null;\n  if (target2) {\n    tempTarget2 = temp3$1;\n    tempTargetDest2 = temp4$1;\n  }\n  let closestDistance = Infinity;\n  let closestDistanceTriIndex = null;\n  let closestDistanceOtherTriIndex = null;\n  tempMatrix$1.copy(geometryToBvh).invert();\n  obb2$2.matrix.copy(tempMatrix$1);\n  bvh.shapecast(\n    {\n      boundsTraverseOrder: (box) => {\n        return obb$3.distanceToBox(box);\n      },\n      intersectsBounds: (box, isLeaf, score) => {\n        if (score < closestDistance && score < maxThreshold) {\n          if (isLeaf) {\n            obb2$2.min.copy(box.min);\n            obb2$2.max.copy(box.max);\n            obb2$2.needsUpdate = true;\n          }\n          return true;\n        }\n        return false;\n      },\n      intersectsRange: (offset, count) => {\n        if (otherGeometry.boundsTree) {\n          const otherBvh = otherGeometry.boundsTree;\n          return otherBvh.shapecast({\n            boundsTraverseOrder: (box) => {\n              return obb2$2.distanceToBox(box);\n            },\n            intersectsBounds: (box, isLeaf, score) => {\n              return score < closestDistance && score < maxThreshold;\n            },\n            intersectsRange: (otherOffset, otherCount) => {\n              for (let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2++) {\n                setTriangle(triangle22, 3 * i2, otherIndex, otherPos);\n                triangle22.a.applyMatrix4(geometryToBvh);\n                triangle22.b.applyMatrix4(geometryToBvh);\n                triangle22.c.applyMatrix4(geometryToBvh);\n                triangle22.needsUpdate = true;\n                for (let i = offset, l = offset + count; i < l; i++) {\n                  setTriangle(triangle3, 3 * i, index, pos);\n                  triangle3.needsUpdate = true;\n                  const dist = triangle3.distanceToTriangle(triangle22, tempTarget1, tempTarget2);\n                  if (dist < closestDistance) {\n                    tempTargetDest1.copy(tempTarget1);\n                    if (tempTargetDest2) {\n                      tempTargetDest2.copy(tempTarget2);\n                    }\n                    closestDistance = dist;\n                    closestDistanceTriIndex = i;\n                    closestDistanceOtherTriIndex = i2;\n                  }\n                  if (dist < minThreshold) {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        } else {\n          const triCount = getTriCount(otherGeometry);\n          for (let i2 = 0, l2 = triCount; i2 < l2; i2++) {\n            setTriangle(triangle22, 3 * i2, otherIndex, otherPos);\n            triangle22.a.applyMatrix4(geometryToBvh);\n            triangle22.b.applyMatrix4(geometryToBvh);\n            triangle22.c.applyMatrix4(geometryToBvh);\n            triangle22.needsUpdate = true;\n            for (let i = offset, l = offset + count; i < l; i++) {\n              setTriangle(triangle3, 3 * i, index, pos);\n              triangle3.needsUpdate = true;\n              const dist = triangle3.distanceToTriangle(triangle22, tempTarget1, tempTarget2);\n              if (dist < closestDistance) {\n                tempTargetDest1.copy(tempTarget1);\n                if (tempTargetDest2) {\n                  tempTargetDest2.copy(tempTarget2);\n                }\n                closestDistance = dist;\n                closestDistanceTriIndex = i;\n                closestDistanceOtherTriIndex = i2;\n              }\n              if (dist < minThreshold) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n  );\n  ExtendedTrianglePool.releasePrimitive(triangle3);\n  ExtendedTrianglePool.releasePrimitive(triangle22);\n  if (closestDistance === Infinity) {\n    return null;\n  }\n  if (!target1.point) {\n    target1.point = tempTargetDest1.clone();\n  } else {\n    target1.point.copy(tempTargetDest1);\n  }\n  target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n  if (target2) {\n    if (!target2.point)\n      target2.point = tempTargetDest2.clone();\n    else\n      target2.point.copy(tempTargetDest2);\n    target2.point.applyMatrix4(tempMatrix$1);\n    tempTargetDest1.applyMatrix4(tempMatrix$1);\n    target2.distance = tempTargetDest1.sub(target2.point).length();\n    target2.faceIndex = closestDistanceOtherTriIndex;\n  }\n  return target1;\n}\nfunction refit_indirect(bvh, nodeIndices = null) {\n  if (nodeIndices && Array.isArray(nodeIndices)) {\n    nodeIndices = new Set(nodeIndices);\n  }\n  const geometry = bvh.geometry;\n  const indexArr = geometry.index ? geometry.index.array : null;\n  const posAttr = geometry.attributes.position;\n  let buffer, uint32Array, uint16Array, float32Array;\n  let byteOffset = 0;\n  const roots = bvh._roots;\n  for (let i = 0, l = roots.length; i < l; i++) {\n    buffer = roots[i];\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    float32Array = new Float32Array(buffer);\n    _traverse2(0, byteOffset);\n    byteOffset += buffer.byteLength;\n  }\n  function _traverse2(node32Index, byteOffset2, force = false) {\n    const node16Index = node32Index * 2;\n    const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n    if (isLeaf) {\n      const offset = uint32Array[node32Index + 6];\n      const count = uint16Array[node16Index + 14];\n      let minx = Infinity;\n      let miny = Infinity;\n      let minz = Infinity;\n      let maxx = -Infinity;\n      let maxy = -Infinity;\n      let maxz = -Infinity;\n      for (let i = offset, l = offset + count; i < l; i++) {\n        const t = 3 * bvh.resolveTriangleIndex(i);\n        for (let j = 0; j < 3; j++) {\n          let index = t + j;\n          index = indexArr ? indexArr[index] : index;\n          const x = posAttr.getX(index);\n          const y = posAttr.getY(index);\n          const z = posAttr.getZ(index);\n          if (x < minx)\n            minx = x;\n          if (x > maxx)\n            maxx = x;\n          if (y < miny)\n            miny = y;\n          if (y > maxy)\n            maxy = y;\n          if (z < minz)\n            minz = z;\n          if (z > maxz)\n            maxz = z;\n        }\n      }\n      if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n        float32Array[node32Index + 0] = minx;\n        float32Array[node32Index + 1] = miny;\n        float32Array[node32Index + 2] = minz;\n        float32Array[node32Index + 3] = maxx;\n        float32Array[node32Index + 4] = maxy;\n        float32Array[node32Index + 5] = maxz;\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      const left = node32Index + 8;\n      const right = uint32Array[node32Index + 6];\n      const offsetLeft = left + byteOffset2;\n      const offsetRight = right + byteOffset2;\n      let forceChildren = force;\n      let includesLeft = false;\n      let includesRight = false;\n      if (nodeIndices) {\n        if (!forceChildren) {\n          includesLeft = nodeIndices.has(offsetLeft);\n          includesRight = nodeIndices.has(offsetRight);\n          forceChildren = !includesLeft && !includesRight;\n        }\n      } else {\n        includesLeft = true;\n        includesRight = true;\n      }\n      const traverseLeft = forceChildren || includesLeft;\n      const traverseRight = forceChildren || includesRight;\n      let leftChange = false;\n      if (traverseLeft) {\n        leftChange = _traverse2(left, byteOffset2, forceChildren);\n      }\n      let rightChange = false;\n      if (traverseRight) {\n        rightChange = _traverse2(right, byteOffset2, forceChildren);\n      }\n      const didChange = leftChange || rightChange;\n      if (didChange) {\n        for (let i = 0; i < 3; i++) {\n          const lefti = left + i;\n          const righti = right + i;\n          const minLeftValue = float32Array[lefti];\n          const maxLeftValue = float32Array[lefti + 3];\n          const minRightValue = float32Array[righti];\n          const maxRightValue = float32Array[righti + 3];\n          float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n          float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n        }\n      }\n      return didChange;\n    }\n  }\n}\nconst _boxIntersection$1 = /* @__PURE__ */ new Vector3();\nfunction raycast_indirect(bvh, root, side, ray2, intersects) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  _raycast(0, bvh, side, ray2, intersects);\n  BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray2, intersects) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  const nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    intersectTris_indirect(bvh, side, ray2, offset, count, intersects);\n  } else {\n    const leftIndex = LEFT_NODE(nodeIndex32);\n    if (intersectRay(leftIndex, float32Array, ray2, _boxIntersection$1)) {\n      _raycast(leftIndex, bvh, side, ray2, intersects);\n    }\n    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n    if (intersectRay(rightIndex, float32Array, ray2, _boxIntersection$1)) {\n      _raycast(rightIndex, bvh, side, ray2, intersects);\n    }\n  }\n}\nconst _boxIntersection = /* @__PURE__ */ new Vector3();\nconst _xyzFields = [\"x\", \"y\", \"z\"];\nfunction raycastFirst_indirect(bvh, root, side, ray2) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  const result = _raycastFirst(0, bvh, side, ray2);\n  BufferStack.clearBuffer();\n  return result;\n}\nfunction _raycastFirst(nodeIndex32, bvh, side, ray2) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  let nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    return intersectClosestTri_indirect(bvh, side, ray2, offset, count);\n  } else {\n    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n    const xyzAxis = _xyzFields[splitAxis];\n    const rayDir = ray2.direction[xyzAxis];\n    const leftToRight = rayDir >= 0;\n    let c1, c2;\n    if (leftToRight) {\n      c1 = LEFT_NODE(nodeIndex32);\n      c2 = RIGHT_NODE(nodeIndex32, uint32Array);\n    } else {\n      c1 = RIGHT_NODE(nodeIndex32, uint32Array);\n      c2 = LEFT_NODE(nodeIndex32);\n    }\n    const c1Intersection = intersectRay(c1, float32Array, ray2, _boxIntersection);\n    const c1Result = c1Intersection ? _raycastFirst(c1, bvh, side, ray2) : null;\n    if (c1Result) {\n      const point = c1Result.point[xyzAxis];\n      const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : (\n        // min bounding data\n        point >= float32Array[c2 + splitAxis + 3]\n      );\n      if (isOutside) {\n        return c1Result;\n      }\n    }\n    const c2Intersection = intersectRay(c2, float32Array, ray2, _boxIntersection);\n    const c2Result = c2Intersection ? _raycastFirst(c2, bvh, side, ray2) : null;\n    if (c1Result && c2Result) {\n      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n    } else {\n      return c1Result || c2Result || null;\n    }\n  }\n}\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\nconst obb$2 = /* @__PURE__ */ new OrientedBox();\nconst obb2$1 = /* @__PURE__ */ new OrientedBox();\nfunction intersectsGeometry_indirect(bvh, root, otherGeometry, geometryToBvh) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  const result = _intersectsGeometry(0, bvh, otherGeometry, geometryToBvh);\n  BufferStack.clearBuffer();\n  return result;\n}\nfunction _intersectsGeometry(nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null) {\n  const { float32Array, uint16Array, uint32Array } = BufferStack;\n  let nodeIndex16 = nodeIndex32 * 2;\n  if (cachedObb === null) {\n    if (!otherGeometry.boundingBox) {\n      otherGeometry.computeBoundingBox();\n    }\n    obb$2.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    cachedObb = obb$2;\n  }\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const thisGeometry = bvh.geometry;\n    const thisIndex = thisGeometry.index;\n    const thisPos = thisGeometry.attributes.position;\n    const index = otherGeometry.index;\n    const pos = otherGeometry.attributes.position;\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    invertedMat.copy(geometryToBvh).invert();\n    if (otherGeometry.boundsTree) {\n      arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb2$1);\n      obb2$1.matrix.copy(invertedMat);\n      obb2$1.needsUpdate = true;\n      const res = otherGeometry.boundsTree.shapecast({\n        intersectsBounds: (box) => obb2$1.intersectsBox(box),\n        intersectsTriangle: (tri) => {\n          tri.a.applyMatrix4(geometryToBvh);\n          tri.b.applyMatrix4(geometryToBvh);\n          tri.c.applyMatrix4(geometryToBvh);\n          tri.needsUpdate = true;\n          for (let i = offset, l = count + offset; i < l; i++) {\n            setTriangle(triangle2, 3 * bvh.resolveTriangleIndex(i), thisIndex, thisPos);\n            triangle2.needsUpdate = true;\n            if (tri.intersectsTriangle(triangle2)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      });\n      return res;\n    } else {\n      for (let i = offset, l = count + offset; i < l; i++) {\n        const ti = bvh.resolveTriangleIndex(i);\n        setTriangle(triangle, 3 * ti, thisIndex, thisPos);\n        triangle.a.applyMatrix4(invertedMat);\n        triangle.b.applyMatrix4(invertedMat);\n        triangle.c.applyMatrix4(invertedMat);\n        triangle.needsUpdate = true;\n        for (let i2 = 0, l2 = index.count; i2 < l2; i2 += 3) {\n          setTriangle(triangle2, i2, index, pos);\n          triangle2.needsUpdate = true;\n          if (triangle.intersectsTriangle(triangle2)) {\n            return true;\n          }\n        }\n      }\n    }\n  } else {\n    const left = nodeIndex32 + 8;\n    const right = uint32Array[nodeIndex32 + 6];\n    arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);\n    const leftIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(left, bvh, otherGeometry, geometryToBvh, cachedObb);\n    if (leftIntersection)\n      return true;\n    arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);\n    const rightIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(right, bvh, otherGeometry, geometryToBvh, cachedObb);\n    if (rightIntersection)\n      return true;\n    return false;\n  }\n}\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb$1 = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\nfunction closestPointToGeometry_indirect(bvh, otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n  if (!otherGeometry.boundingBox) {\n    otherGeometry.computeBoundingBox();\n  }\n  obb$1.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n  obb$1.needsUpdate = true;\n  const geometry = bvh.geometry;\n  const pos = geometry.attributes.position;\n  const index = geometry.index;\n  const otherPos = otherGeometry.attributes.position;\n  const otherIndex = otherGeometry.index;\n  const triangle3 = ExtendedTrianglePool.getPrimitive();\n  const triangle22 = ExtendedTrianglePool.getPrimitive();\n  let tempTarget1 = temp1;\n  let tempTargetDest1 = temp2;\n  let tempTarget2 = null;\n  let tempTargetDest2 = null;\n  if (target2) {\n    tempTarget2 = temp3;\n    tempTargetDest2 = temp4;\n  }\n  let closestDistance = Infinity;\n  let closestDistanceTriIndex = null;\n  let closestDistanceOtherTriIndex = null;\n  tempMatrix.copy(geometryToBvh).invert();\n  obb2.matrix.copy(tempMatrix);\n  bvh.shapecast(\n    {\n      boundsTraverseOrder: (box) => {\n        return obb$1.distanceToBox(box);\n      },\n      intersectsBounds: (box, isLeaf, score) => {\n        if (score < closestDistance && score < maxThreshold) {\n          if (isLeaf) {\n            obb2.min.copy(box.min);\n            obb2.max.copy(box.max);\n            obb2.needsUpdate = true;\n          }\n          return true;\n        }\n        return false;\n      },\n      intersectsRange: (offset, count) => {\n        if (otherGeometry.boundsTree) {\n          const otherBvh = otherGeometry.boundsTree;\n          return otherBvh.shapecast({\n            boundsTraverseOrder: (box) => {\n              return obb2.distanceToBox(box);\n            },\n            intersectsBounds: (box, isLeaf, score) => {\n              return score < closestDistance && score < maxThreshold;\n            },\n            intersectsRange: (otherOffset, otherCount) => {\n              for (let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2++) {\n                const ti2 = otherBvh.resolveTriangleIndex(i2);\n                setTriangle(triangle22, 3 * ti2, otherIndex, otherPos);\n                triangle22.a.applyMatrix4(geometryToBvh);\n                triangle22.b.applyMatrix4(geometryToBvh);\n                triangle22.c.applyMatrix4(geometryToBvh);\n                triangle22.needsUpdate = true;\n                for (let i = offset, l = offset + count; i < l; i++) {\n                  const ti = bvh.resolveTriangleIndex(i);\n                  setTriangle(triangle3, 3 * ti, index, pos);\n                  triangle3.needsUpdate = true;\n                  const dist = triangle3.distanceToTriangle(triangle22, tempTarget1, tempTarget2);\n                  if (dist < closestDistance) {\n                    tempTargetDest1.copy(tempTarget1);\n                    if (tempTargetDest2) {\n                      tempTargetDest2.copy(tempTarget2);\n                    }\n                    closestDistance = dist;\n                    closestDistanceTriIndex = i;\n                    closestDistanceOtherTriIndex = i2;\n                  }\n                  if (dist < minThreshold) {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        } else {\n          const triCount = getTriCount(otherGeometry);\n          for (let i2 = 0, l2 = triCount; i2 < l2; i2++) {\n            setTriangle(triangle22, 3 * i2, otherIndex, otherPos);\n            triangle22.a.applyMatrix4(geometryToBvh);\n            triangle22.b.applyMatrix4(geometryToBvh);\n            triangle22.c.applyMatrix4(geometryToBvh);\n            triangle22.needsUpdate = true;\n            for (let i = offset, l = offset + count; i < l; i++) {\n              const ti = bvh.resolveTriangleIndex(i);\n              setTriangle(triangle3, 3 * ti, index, pos);\n              triangle3.needsUpdate = true;\n              const dist = triangle3.distanceToTriangle(triangle22, tempTarget1, tempTarget2);\n              if (dist < closestDistance) {\n                tempTargetDest1.copy(tempTarget1);\n                if (tempTargetDest2) {\n                  tempTargetDest2.copy(tempTarget2);\n                }\n                closestDistance = dist;\n                closestDistanceTriIndex = i;\n                closestDistanceOtherTriIndex = i2;\n              }\n              if (dist < minThreshold) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n  );\n  ExtendedTrianglePool.releasePrimitive(triangle3);\n  ExtendedTrianglePool.releasePrimitive(triangle22);\n  if (closestDistance === Infinity) {\n    return null;\n  }\n  if (!target1.point) {\n    target1.point = tempTargetDest1.clone();\n  } else {\n    target1.point.copy(tempTargetDest1);\n  }\n  target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n  if (target2) {\n    if (!target2.point)\n      target2.point = tempTargetDest2.clone();\n    else\n      target2.point.copy(tempTargetDest2);\n    target2.point.applyMatrix4(tempMatrix);\n    tempTargetDest1.applyMatrix4(tempMatrix);\n    target2.distance = tempTargetDest1.sub(target2.point).length();\n    target2.faceIndex = closestDistanceOtherTriIndex;\n  }\n  return target1;\n}\nfunction isSharedArrayBufferSupported() {\n  return typeof SharedArrayBuffer !== \"undefined\";\n}\nconst _bufferStack1 = new BufferStack.constructor();\nconst _bufferStack2 = new BufferStack.constructor();\nconst _boxPool = new PrimitivePool(() => new Box3());\nconst _leftBox1 = new Box3();\nconst _rightBox1 = new Box3();\nconst _leftBox2 = new Box3();\nconst _rightBox2 = new Box3();\nlet _active = false;\nfunction bvhcast(bvh, otherBvh, matrixToLocal, intersectsRanges) {\n  if (_active) {\n    throw new Error(\"MeshBVH: Recursive calls to bvhcast not supported.\");\n  }\n  _active = true;\n  const roots = bvh._roots;\n  const otherRoots = otherBvh._roots;\n  let result;\n  let offset1 = 0;\n  let offset2 = 0;\n  const invMat = new Matrix4().copy(matrixToLocal).invert();\n  for (let i = 0, il = roots.length; i < il; i++) {\n    _bufferStack1.setBuffer(roots[i]);\n    offset2 = 0;\n    const localBox = _boxPool.getPrimitive();\n    arrayToBox(BOUNDING_DATA_INDEX(0), _bufferStack1.float32Array, localBox);\n    localBox.applyMatrix4(invMat);\n    for (let j = 0, jl = otherRoots.length; j < jl; j++) {\n      _bufferStack2.setBuffer(otherRoots[i]);\n      result = _traverse(\n        0,\n        0,\n        matrixToLocal,\n        invMat,\n        intersectsRanges,\n        offset1,\n        offset2,\n        0,\n        0,\n        localBox\n      );\n      _bufferStack2.clearBuffer();\n      offset2 += otherRoots[j].length;\n      if (result) {\n        break;\n      }\n    }\n    _boxPool.releasePrimitive(localBox);\n    _bufferStack1.clearBuffer();\n    offset1 += roots[i].length;\n    if (result) {\n      break;\n    }\n  }\n  _active = false;\n  return result;\n}\nfunction _traverse(node1Index32, node2Index32, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset = 0, node2IndexByteOffset = 0, depth1 = 0, depth2 = 0, currBox = null, reversed = false) {\n  let bufferStack1, bufferStack2;\n  if (reversed) {\n    bufferStack1 = _bufferStack2;\n    bufferStack2 = _bufferStack1;\n  } else {\n    bufferStack1 = _bufferStack1;\n    bufferStack2 = _bufferStack2;\n  }\n  const float32Array1 = bufferStack1.float32Array, uint32Array1 = bufferStack1.uint32Array, uint16Array1 = bufferStack1.uint16Array, float32Array2 = bufferStack2.float32Array, uint32Array2 = bufferStack2.uint32Array, uint16Array2 = bufferStack2.uint16Array;\n  const node1Index16 = node1Index32 * 2;\n  const node2Index16 = node2Index32 * 2;\n  const isLeaf1 = IS_LEAF(node1Index16, uint16Array1);\n  const isLeaf2 = IS_LEAF(node2Index16, uint16Array2);\n  let result = false;\n  if (isLeaf2 && isLeaf1) {\n    if (reversed) {\n      result = intersectsRangesFunc(\n        OFFSET(node2Index32, uint32Array2),\n        COUNT(node2Index32 * 2, uint16Array2),\n        OFFSET(node1Index32, uint32Array1),\n        COUNT(node1Index32 * 2, uint16Array1),\n        depth2,\n        node2IndexByteOffset + node2Index32,\n        depth1,\n        node1IndexByteOffset + node1Index32\n      );\n    } else {\n      result = intersectsRangesFunc(\n        OFFSET(node1Index32, uint32Array1),\n        COUNT(node1Index32 * 2, uint16Array1),\n        OFFSET(node2Index32, uint32Array2),\n        COUNT(node2Index32 * 2, uint16Array2),\n        depth1,\n        node1IndexByteOffset + node1Index32,\n        depth2,\n        node2IndexByteOffset + node2Index32\n      );\n    }\n  } else if (isLeaf2) {\n    const newBox = _boxPool.getPrimitive();\n    arrayToBox(BOUNDING_DATA_INDEX(node2Index32), float32Array2, newBox);\n    newBox.applyMatrix4(matrix2to1);\n    const cl1 = LEFT_NODE(node1Index32);\n    const cr1 = RIGHT_NODE(node1Index32, uint32Array1);\n    arrayToBox(BOUNDING_DATA_INDEX(cl1), float32Array1, _leftBox1);\n    arrayToBox(BOUNDING_DATA_INDEX(cr1), float32Array1, _rightBox1);\n    const intersectCl1 = newBox.intersectsBox(_leftBox1);\n    const intersectCr1 = newBox.intersectsBox(_rightBox1);\n    result = intersectCl1 && _traverse(\n      node2Index32,\n      cl1,\n      matrix1to2,\n      matrix2to1,\n      intersectsRangesFunc,\n      node2IndexByteOffset,\n      node1IndexByteOffset,\n      depth2,\n      depth1 + 1,\n      newBox,\n      !reversed\n    ) || intersectCr1 && _traverse(\n      node2Index32,\n      cr1,\n      matrix1to2,\n      matrix2to1,\n      intersectsRangesFunc,\n      node2IndexByteOffset,\n      node1IndexByteOffset,\n      depth2,\n      depth1 + 1,\n      newBox,\n      !reversed\n    );\n    _boxPool.releasePrimitive(newBox);\n  } else {\n    const cl2 = LEFT_NODE(node2Index32);\n    const cr2 = RIGHT_NODE(node2Index32, uint32Array2);\n    arrayToBox(BOUNDING_DATA_INDEX(cl2), float32Array2, _leftBox2);\n    arrayToBox(BOUNDING_DATA_INDEX(cr2), float32Array2, _rightBox2);\n    const leftIntersects = currBox.intersectsBox(_leftBox2);\n    const rightIntersects = currBox.intersectsBox(_rightBox2);\n    if (leftIntersects && rightIntersects) {\n      result = _traverse(\n        node1Index32,\n        cl2,\n        matrix2to1,\n        matrix1to2,\n        intersectsRangesFunc,\n        node1IndexByteOffset,\n        node2IndexByteOffset,\n        depth1,\n        depth2 + 1,\n        currBox,\n        reversed\n      ) || _traverse(\n        node1Index32,\n        cr2,\n        matrix2to1,\n        matrix1to2,\n        intersectsRangesFunc,\n        node1IndexByteOffset,\n        node2IndexByteOffset,\n        depth1,\n        depth2 + 1,\n        currBox,\n        reversed\n      );\n    } else if (leftIntersects) {\n      if (isLeaf1) {\n        result = _traverse(\n          node1Index32,\n          cl2,\n          matrix2to1,\n          matrix1to2,\n          intersectsRangesFunc,\n          node1IndexByteOffset,\n          node2IndexByteOffset,\n          depth1,\n          depth2 + 1,\n          currBox,\n          reversed\n        );\n      } else {\n        const newBox = _boxPool.getPrimitive();\n        newBox.copy(_leftBox2).applyMatrix4(matrix2to1);\n        const cl1 = LEFT_NODE(node1Index32);\n        const cr1 = RIGHT_NODE(node1Index32, uint32Array1);\n        arrayToBox(BOUNDING_DATA_INDEX(cl1), float32Array1, _leftBox1);\n        arrayToBox(BOUNDING_DATA_INDEX(cr1), float32Array1, _rightBox1);\n        const intersectCl1 = newBox.intersectsBox(_leftBox1);\n        const intersectCr1 = newBox.intersectsBox(_rightBox1);\n        result = intersectCl1 && _traverse(\n          cl2,\n          cl1,\n          matrix1to2,\n          matrix2to1,\n          intersectsRangesFunc,\n          node2IndexByteOffset,\n          node1IndexByteOffset,\n          depth2,\n          depth1 + 1,\n          newBox,\n          !reversed\n        ) || intersectCr1 && _traverse(\n          cl2,\n          cr1,\n          matrix1to2,\n          matrix2to1,\n          intersectsRangesFunc,\n          node2IndexByteOffset,\n          node1IndexByteOffset,\n          depth2,\n          depth1 + 1,\n          newBox,\n          !reversed\n        );\n        _boxPool.releasePrimitive(newBox);\n      }\n    } else if (rightIntersects) {\n      if (isLeaf1) {\n        result = _traverse(\n          node1Index32,\n          cr2,\n          matrix2to1,\n          matrix1to2,\n          intersectsRangesFunc,\n          node1IndexByteOffset,\n          node2IndexByteOffset,\n          depth1,\n          depth2 + 1,\n          currBox,\n          reversed\n        );\n      } else {\n        const newBox = _boxPool.getPrimitive();\n        newBox.copy(_rightBox2).applyMatrix4(matrix2to1);\n        const cl1 = LEFT_NODE(node1Index32);\n        const cr1 = RIGHT_NODE(node1Index32, uint32Array1);\n        arrayToBox(BOUNDING_DATA_INDEX(cl1), float32Array1, _leftBox1);\n        arrayToBox(BOUNDING_DATA_INDEX(cr1), float32Array1, _rightBox1);\n        const intersectCl1 = newBox.intersectsBox(_leftBox1);\n        const intersectCr1 = newBox.intersectsBox(_rightBox1);\n        result = intersectCl1 && _traverse(\n          cr2,\n          cl1,\n          matrix1to2,\n          matrix2to1,\n          intersectsRangesFunc,\n          node2IndexByteOffset,\n          node1IndexByteOffset,\n          depth2,\n          depth1 + 1,\n          newBox,\n          !reversed\n        ) || intersectCr1 && _traverse(\n          cr2,\n          cr1,\n          matrix1to2,\n          matrix2to1,\n          intersectsRangesFunc,\n          node2IndexByteOffset,\n          node1IndexByteOffset,\n          depth2,\n          depth1 + 1,\n          newBox,\n          !reversed\n        );\n        _boxPool.releasePrimitive(newBox);\n      }\n    }\n  }\n  return result;\n}\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst tempBox = /* @__PURE__ */ new Box3();\nclass MeshBVH {\n  static serialize(bvh, options = {}) {\n    options = {\n      cloneBuffers: true,\n      ...options\n    };\n    const geometry = bvh.geometry;\n    const rootData = bvh._roots;\n    const indirectBuffer = bvh._indirectBuffer;\n    const indexAttribute = geometry.getIndex();\n    let result;\n    if (options.cloneBuffers) {\n      result = {\n        roots: rootData.map((root) => root.slice()),\n        index: indexAttribute.array.slice(),\n        indirectBuffer: indirectBuffer ? indirectBuffer.slice() : null\n      };\n    } else {\n      result = {\n        roots: rootData,\n        index: indexAttribute.array,\n        indirectBuffer\n      };\n    }\n    return result;\n  }\n  static deserialize(data, geometry, options = {}) {\n    options = {\n      setIndex: true,\n      indirect: Boolean(data.indirectBuffer),\n      ...options\n    };\n    const { index, roots, indirectBuffer } = data;\n    const bvh = new MeshBVH(geometry, { ...options, [SKIP_GENERATION]: true });\n    bvh._roots = roots;\n    bvh._indirectBuffer = indirectBuffer || null;\n    if (options.setIndex) {\n      const indexAttribute = geometry.getIndex();\n      if (indexAttribute === null) {\n        const newIndex = new BufferAttribute(data.index, 1, false);\n        geometry.setIndex(newIndex);\n      } else if (indexAttribute.array !== index) {\n        indexAttribute.array.set(index);\n        indexAttribute.needsUpdate = true;\n      }\n    }\n    return bvh;\n  }\n  get indirect() {\n    return !!this._indirectBuffer;\n  }\n  constructor(geometry, options = {}) {\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"MeshBVH: Only BufferGeometries are supported.\");\n    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n      throw new Error(\"MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.\");\n    }\n    options = Object.assign({\n      strategy: CENTER,\n      maxDepth: 40,\n      maxLeafTris: 10,\n      verbose: true,\n      useSharedArrayBuffer: false,\n      setBoundingBox: true,\n      onProgress: null,\n      indirect: false,\n      // undocumented options\n      // Whether to skip generating the tree. Used for deserialization.\n      [SKIP_GENERATION]: false\n    }, options);\n    if (options.useSharedArrayBuffer && !isSharedArrayBufferSupported()) {\n      throw new Error(\"MeshBVH: SharedArrayBuffer is not available.\");\n    }\n    this.geometry = geometry;\n    this._roots = null;\n    this._indirectBuffer = null;\n    if (!options[SKIP_GENERATION]) {\n      buildPackedTree(this, options);\n      if (!geometry.boundingBox && options.setBoundingBox) {\n        geometry.boundingBox = this.getBoundingBox(new Box3());\n      }\n    }\n    const { _indirectBuffer } = this;\n    this.resolveTriangleIndex = options.indirect ? (i) => _indirectBuffer[i] : (i) => i;\n  }\n  refit(nodeIndices = null) {\n    const refitFunc = this.indirect ? refit_indirect : refit;\n    return refitFunc(this, nodeIndices);\n  }\n  traverse(callback, rootIndex = 0) {\n    const buffer = this._roots[rootIndex];\n    const uint32Array = new Uint32Array(buffer);\n    const uint16Array = new Uint16Array(buffer);\n    _traverse2(0);\n    function _traverse2(node32Index, depth = 0) {\n      const node16Index = node32Index * 2;\n      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n      if (isLeaf) {\n        const offset = uint32Array[node32Index + 6];\n        const count = uint16Array[node16Index + 14];\n        callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n      } else {\n        const left = node32Index + BYTES_PER_NODE / 4;\n        const right = uint32Array[node32Index + 6];\n        const splitAxis = uint32Array[node32Index + 7];\n        const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n        if (!stopTraversal) {\n          _traverse2(left, depth + 1);\n          _traverse2(right, depth + 1);\n        }\n      }\n    }\n  }\n  /* Core Cast Functions */\n  raycast(ray2, materialOrSide = FrontSide) {\n    const roots = this._roots;\n    const geometry = this.geometry;\n    const intersects = [];\n    const isMaterial = materialOrSide.isMaterial;\n    const isArrayMaterial = Array.isArray(materialOrSide);\n    const groups = geometry.groups;\n    const side = isMaterial ? materialOrSide.side : materialOrSide;\n    const raycastFunc = this.indirect ? raycast_indirect : raycast;\n    for (let i = 0, l = roots.length; i < l; i++) {\n      const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n      const startCount = intersects.length;\n      raycastFunc(this, i, materialSide, ray2, intersects);\n      if (isArrayMaterial) {\n        const materialIndex = groups[i].materialIndex;\n        for (let j = startCount, jl = intersects.length; j < jl; j++) {\n          intersects[j].face.materialIndex = materialIndex;\n        }\n      }\n    }\n    return intersects;\n  }\n  raycastFirst(ray2, materialOrSide = FrontSide) {\n    const roots = this._roots;\n    const geometry = this.geometry;\n    const isMaterial = materialOrSide.isMaterial;\n    const isArrayMaterial = Array.isArray(materialOrSide);\n    let closestResult = null;\n    const groups = geometry.groups;\n    const side = isMaterial ? materialOrSide.side : materialOrSide;\n    const raycastFirstFunc = this.indirect ? raycastFirst_indirect : raycastFirst;\n    for (let i = 0, l = roots.length; i < l; i++) {\n      const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n      const result = raycastFirstFunc(this, i, materialSide, ray2);\n      if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n        closestResult = result;\n        if (isArrayMaterial) {\n          result.face.materialIndex = groups[i].materialIndex;\n        }\n      }\n    }\n    return closestResult;\n  }\n  intersectsGeometry(otherGeometry, geomToMesh) {\n    let result = false;\n    const roots = this._roots;\n    const intersectsGeometryFunc = this.indirect ? intersectsGeometry_indirect : intersectsGeometry;\n    for (let i = 0, l = roots.length; i < l; i++) {\n      result = intersectsGeometryFunc(this, i, otherGeometry, geomToMesh);\n      if (result) {\n        break;\n      }\n    }\n    return result;\n  }\n  shapecast(callbacks) {\n    const triangle3 = ExtendedTrianglePool.getPrimitive();\n    const iterateFunc = this.indirect ? iterateOverTriangles_indirect : iterateOverTriangles;\n    let {\n      boundsTraverseOrder,\n      intersectsBounds,\n      intersectsRange,\n      intersectsTriangle\n    } = callbacks;\n    if (intersectsRange && intersectsTriangle) {\n      const originalIntersectsRange = intersectsRange;\n      intersectsRange = (offset, count, contained, depth, nodeIndex) => {\n        if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n          return iterateFunc(offset, count, this, intersectsTriangle, contained, depth, triangle3);\n        }\n        return true;\n      };\n    } else if (!intersectsRange) {\n      if (intersectsTriangle) {\n        intersectsRange = (offset, count, contained, depth) => {\n          return iterateFunc(offset, count, this, intersectsTriangle, contained, depth, triangle3);\n        };\n      } else {\n        intersectsRange = (offset, count, contained) => {\n          return contained;\n        };\n      }\n    }\n    let result = false;\n    let byteOffset = 0;\n    const roots = this._roots;\n    for (let i = 0, l = roots.length; i < l; i++) {\n      const root = roots[i];\n      result = shapecast(this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n      if (result) {\n        break;\n      }\n      byteOffset += root.byteLength;\n    }\n    ExtendedTrianglePool.releasePrimitive(triangle3);\n    return result;\n  }\n  bvhcast(otherBvh, matrixToLocal, callbacks) {\n    let {\n      intersectsRanges,\n      intersectsTriangles\n    } = callbacks;\n    const triangle1 = ExtendedTrianglePool.getPrimitive();\n    const indexAttr1 = this.geometry.index;\n    const positionAttr1 = this.geometry.attributes.position;\n    const assignTriangle1 = this.indirect ? (i1) => {\n      const ti = this.resolveTriangleIndex(i1);\n      setTriangle(triangle1, ti * 3, indexAttr1, positionAttr1);\n    } : (i1) => {\n      setTriangle(triangle1, i1 * 3, indexAttr1, positionAttr1);\n    };\n    const triangle22 = ExtendedTrianglePool.getPrimitive();\n    const indexAttr2 = otherBvh.geometry.index;\n    const positionAttr2 = otherBvh.geometry.attributes.position;\n    const assignTriangle2 = otherBvh.indirect ? (i2) => {\n      const ti2 = otherBvh.resolveTriangleIndex(i2);\n      setTriangle(triangle22, ti2 * 3, indexAttr2, positionAttr2);\n    } : (i2) => {\n      setTriangle(triangle22, i2 * 3, indexAttr2, positionAttr2);\n    };\n    if (intersectsTriangles) {\n      const iterateOverDoubleTriangles = (offset1, count1, offset2, count2, depth1, index1, depth2, index2) => {\n        for (let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++) {\n          assignTriangle2(i2);\n          triangle22.a.applyMatrix4(matrixToLocal);\n          triangle22.b.applyMatrix4(matrixToLocal);\n          triangle22.c.applyMatrix4(matrixToLocal);\n          triangle22.needsUpdate = true;\n          for (let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {\n            assignTriangle1(i1);\n            triangle1.needsUpdate = true;\n            if (intersectsTriangles(triangle1, triangle22, i1, i2, depth1, index1, depth2, index2)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n      if (intersectsRanges) {\n        const originalIntersectsRanges = intersectsRanges;\n        intersectsRanges = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n          if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {\n            return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);\n          }\n          return true;\n        };\n      } else {\n        intersectsRanges = iterateOverDoubleTriangles;\n      }\n    }\n    return bvhcast(this, otherBvh, matrixToLocal, intersectsRanges);\n  }\n  /* Derived Cast Functions */\n  intersectsBox(box, boxToMesh) {\n    obb.set(box.min, box.max, boxToMesh);\n    obb.needsUpdate = true;\n    return this.shapecast(\n      {\n        intersectsBounds: (box2) => obb.intersectsBox(box2),\n        intersectsTriangle: (tri) => obb.intersectsTriangle(tri)\n      }\n    );\n  }\n  intersectsSphere(sphere) {\n    return this.shapecast(\n      {\n        intersectsBounds: (box) => sphere.intersectsBox(box),\n        intersectsTriangle: (tri) => tri.intersectsSphere(sphere)\n      }\n    );\n  }\n  closestPointToGeometry(otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n    const closestPointToGeometryFunc = this.indirect ? closestPointToGeometry_indirect : closestPointToGeometry;\n    return closestPointToGeometryFunc(\n      this,\n      otherGeometry,\n      geometryToBvh,\n      target1,\n      target2,\n      minThreshold,\n      maxThreshold\n    );\n  }\n  closestPointToPoint(point, target = {}, minThreshold = 0, maxThreshold = Infinity) {\n    return closestPointToPoint(\n      this,\n      point,\n      target,\n      minThreshold,\n      maxThreshold\n    );\n  }\n  getBoundingBox(target) {\n    target.makeEmpty();\n    const roots = this._roots;\n    roots.forEach((buffer) => {\n      arrayToBox(0, new Float32Array(buffer), tempBox);\n      target.union(tempBox);\n    });\n    return target;\n  }\n}\nfunction convertRaycastIntersect(hit, object, raycaster) {\n  if (hit === null) {\n    return null;\n  }\n  hit.point.applyMatrix4(object.matrixWorld);\n  hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n  hit.object = object;\n  if (hit.distance < raycaster.near || hit.distance > raycaster.far) {\n    return null;\n  } else {\n    return hit;\n  }\n}\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\nfunction acceleratedRaycast(raycaster, intersects) {\n  if (this.geometry.boundsTree) {\n    if (this.material === void 0)\n      return;\n    tmpInverseMatrix.copy(this.matrixWorld).invert();\n    ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);\n    const bvh = this.geometry.boundsTree;\n    if (raycaster.firstHitOnly === true) {\n      const hit = convertRaycastIntersect(bvh.raycastFirst(ray, this.material), this, raycaster);\n      if (hit) {\n        intersects.push(hit);\n      }\n    } else {\n      const hits = bvh.raycast(ray, this.material);\n      for (let i = 0, l = hits.length; i < l; i++) {\n        const hit = convertRaycastIntersect(hits[i], this, raycaster);\n        if (hit) {\n          intersects.push(hit);\n        }\n      }\n    }\n  } else {\n    origMeshRaycastFunc.call(this, raycaster, intersects);\n  }\n}\nfunction computeBoundsTree(options) {\n  this.boundsTree = new MeshBVH(this, options);\n  return this.boundsTree;\n}\nfunction disposeBoundsTree() {\n  this.boundsTree = null;\n}\nconst _BVH = class _BVH {\n  /**\n   * Applies the Bounding Volume Hierarchy (BVH) to a given BufferGeometry.\n   * If the BVH is not already initialized, it adds the necessary methods to the BufferGeometry and Mesh prototypes.\n   * If the geometry does not have a boundsTree, it computes one.\n   *\n   * @param geometry - The BufferGeometry to apply the BVH to.\n   */\n  static apply(geometry) {\n    if (!_BVH.initialized) {\n      BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\n      BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n      Mesh.prototype.raycast = acceleratedRaycast;\n      _BVH.initialized = true;\n    }\n    if (!geometry.boundsTree) {\n      geometry.computeBoundsTree();\n    }\n  }\n  /**\n   * Disposes of the BVH associated with the given BufferGeometry.\n   * If the geometry has a boundsTree, it disposes of it.\n   *\n   * @param geometry - The BufferGeometry to dispose of the BVH from.\n   */\n  static dispose(geometry) {\n    if (geometry && geometry.disposeBoundsTree) {\n      geometry.disposeBoundsTree();\n    }\n  }\n};\n/**\n * A flag indicating whether the BVH has been initialized.\n * Initialized means the necessary methods have been added to BufferGeometry and Mesh prototypes.\n */\n__publicField(_BVH, \"initialized\", false);\nlet BVH = _BVH;\nlet Fragment$2 = class Fragment {\n  /**\n   * Constructs a new Fragment.\n   * @param geometry - The geometry of the fragment.\n   * @param material - The material(s) of the fragment.\n   * @param count - The initial number of instances in the fragment.\n   */\n  constructor(geometry, material, count) {\n    /**\n     * A set of unique item IDs associated with this fragment.\n     */\n    __publicField(this, \"ids\", /* @__PURE__ */ new Set());\n    /**\n     * A map of item IDs to sets of instance IDs.\n     */\n    __publicField(this, \"itemToInstances\", /* @__PURE__ */ new Map());\n    /**\n     * A map of instance IDs to item IDs.\n     */\n    __publicField(this, \"instanceToItem\", /* @__PURE__ */ new Map());\n    /**\n     * A set of item IDs of instances that are currently hidden.\n     */\n    __publicField(this, \"hiddenItems\", /* @__PURE__ */ new Set());\n    /**\n     * The unique identifier of this fragment.\n     */\n    __publicField(this, \"id\");\n    /**\n     * The mesh associated with this fragment.\n     */\n    __publicField(this, \"mesh\");\n    /**\n     * The amount of instances that this fragment can contain.\n     */\n    __publicField(this, \"capacity\", 0);\n    /**\n     * The amount by which to increase the capacity when necessary.\n     */\n    __publicField(this, \"capacityOffset\", 10);\n    /**\n     * The group of fragments to which this fragment belongs.\n     */\n    __publicField(this, \"group\");\n    __publicField(this, \"_originalColors\", /* @__PURE__ */ new Map());\n    __publicField(this, \"_settingVisibility\", false);\n    this.mesh = new FragmentMesh(geometry, material, count, this);\n    this.id = this.mesh.uuid;\n    this.capacity = count;\n    this.mesh.count = 0;\n    if (this.mesh.geometry.index.count) {\n      BVH.apply(this.mesh.geometry);\n    }\n  }\n  /**\n   * A getter property that returns the unique vertices of the fragment's geometry.\n   * The unique vertices are determined by comparing the vertex positions.\n   *\n   * @returns An array of unique vertices.\n   */\n  get uniqueVertices() {\n    const uniqueVertices = [];\n    const position = this.mesh.geometry.getAttribute(\n      \"position\"\n    );\n    if (!position)\n      return uniqueVertices;\n    const uniqueVerticesSet = /* @__PURE__ */ new Set();\n    for (let i = 0; i < position.count; i++) {\n      const x = position.getX(i);\n      const y = position.getY(i);\n      const z = position.getZ(i);\n      const vertexKey = `${x},${y},${z}`;\n      if (!uniqueVerticesSet.has(vertexKey)) {\n        uniqueVerticesSet.add(vertexKey);\n        uniqueVertices.push(new THREE.Vector3(x, y, z));\n      }\n    }\n    return uniqueVertices;\n  }\n  /**\n   * Disposes of the fragment and its associated resources.\n   *\n   * @param disposeResources - If true, disposes geometries and materials associated with the fragment. If false, only disposes of the fragment itself.\n   */\n  dispose(disposeResources = true) {\n    this.clear();\n    this.group = void 0;\n    this._originalColors.clear();\n    if (this.mesh) {\n      if (disposeResources) {\n        for (const mat of this.mesh.material) {\n          mat.dispose();\n        }\n        this.mesh.material = [];\n        BVH.dispose(this.mesh.geometry);\n        if (this.mesh.geometry) {\n          this.mesh.geometry.dispose();\n        }\n        this.mesh.geometry = null;\n      }\n      this.mesh.removeFromParent();\n      this.mesh.userData = {};\n      this.mesh.dispose();\n      this.mesh.fragment = null;\n      this.mesh = null;\n    }\n  }\n  /**\n   * Retrieves the transform matrices and colors of instances associated with a given item ID.\n   *\n   * @param itemID - The unique identifier of the item.\n   * @throws Will throw an error if the item is not found.\n   * @returns An object containing the item ID, an array of transform matrices, and an optional array of colors.\n   * If no colors are found, the colors array will be undefined.\n   */\n  get(itemID) {\n    const instanceIDs = this.getInstancesIDs(itemID);\n    if (!instanceIDs) {\n      throw new Error(\"Item not found!\");\n    }\n    const transforms = [];\n    const colorsArray = [];\n    for (const id of instanceIDs) {\n      const matrix = new THREE.Matrix4();\n      this.mesh.getMatrixAt(id, matrix);\n      transforms.push(matrix);\n      if (this.mesh.instanceColor) {\n        const color = new THREE.Color();\n        this.mesh.getColorAt(id, color);\n        colorsArray.push(color);\n      }\n    }\n    const colors = colorsArray.length ? colorsArray : void 0;\n    return { id: itemID, transforms, colors };\n  }\n  /**\n   * Retrieves the item ID associated with a given instance ID.\n   *\n   * @param instanceID - The unique identifier of the instance.\n   * @returns The item ID associated with the instance, or null if no association exists.\n   */\n  getItemID(instanceID) {\n    return this.instanceToItem.get(instanceID) || null;\n  }\n  /**\n   * Retrieves the instance IDs associated with a given item ID.\n   *\n   * @param itemID - The unique identifier of the item.\n   * @returns The set of instance IDs associated with the item, or null if no association exists.\n   */\n  getInstancesIDs(itemID) {\n    return this.itemToInstances.get(itemID) || null;\n  }\n  /**\n   * Updates the instance color and matrix attributes of the fragment's mesh.\n   * This method should be called whenever the instance color or matrix attributes\n   * need to be updated.\n   */\n  update() {\n    if (this.mesh.instanceColor) {\n      this.mesh.instanceColor.needsUpdate = true;\n    }\n    this.mesh.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Adds items to the fragment.\n   *\n   * @param items - An array of items to be added. Each item contains an ID, an array of transform matrices, and an optional array of colors.\n   *\n   * If the necessary capacity to accommodate the new items exceeds the current capacity,\n   * a new mesh with a larger capacity is created, and the old mesh is disposed.\n   *\n   * The transform matrices and colors of the items are added to the respective attributes of the mesh.\n   *\n   * The instance IDs, item IDs, and associations between instance IDs and item IDs are updated accordingly.\n   *\n   * The instance color and matrix attributes of the mesh are updated.\n   */\n  add(items) {\n    var _a;\n    let size = 0;\n    for (const item of items) {\n      size += item.transforms.length;\n    }\n    const necessaryCapacity = this.mesh.count + size;\n    if (necessaryCapacity > this.capacity) {\n      const newCapacity = necessaryCapacity + this.capacityOffset;\n      const newMesh = new FragmentMesh(\n        this.mesh.geometry,\n        this.mesh.material,\n        newCapacity,\n        this\n      );\n      newMesh.count = this.mesh.count;\n      this.capacity = newCapacity;\n      const oldMesh = this.mesh;\n      (_a = oldMesh.parent) == null ? void 0 : _a.add(newMesh);\n      oldMesh.removeFromParent();\n      this.mesh = newMesh;\n      const tempMatrix2 = new THREE.Matrix4();\n      for (let i = 0; i < oldMesh.instanceMatrix.count; i++) {\n        oldMesh.getMatrixAt(i, tempMatrix2);\n        newMesh.setMatrixAt(i, tempMatrix2);\n      }\n      if (oldMesh.instanceColor) {\n        const tempColor = new THREE.Color();\n        for (let i = 0; i < oldMesh.instanceColor.count; i++) {\n          oldMesh.getColorAt(i, tempColor);\n          newMesh.setColorAt(i, tempColor);\n        }\n      }\n      oldMesh.dispose();\n    }\n    for (let i = 0; i < items.length; i++) {\n      const { transforms, colors, id } = items[i];\n      if (!this.itemToInstances.has(id)) {\n        this.itemToInstances.set(id, /* @__PURE__ */ new Set());\n      }\n      const instances = this.itemToInstances.get(id);\n      this.ids.add(id);\n      for (let j = 0; j < transforms.length; j++) {\n        const transform = transforms[j];\n        const newInstanceID = this.mesh.count;\n        this.mesh.setMatrixAt(newInstanceID, transform);\n        if (colors) {\n          const color = colors[j];\n          this.mesh.setColorAt(newInstanceID, color);\n        }\n        instances.add(newInstanceID);\n        this.instanceToItem.set(newInstanceID, id);\n        this.mesh.count++;\n      }\n    }\n    this.update();\n  }\n  /**\n   * Removes items from the fragment.\n   *\n   * @param itemsIDs - An iterable of item IDs to be removed.\n   *\n   * The instance IDs, item IDs, and associations between instance IDs and item IDs are updated accordingly.\n   *\n   * The instance color and matrix attributes of the mesh are updated.\n   *\n   * @throws Will throw an error if the instances are not found.\n   */\n  remove(itemsIDs) {\n    if (this.mesh.count === 0) {\n      return;\n    }\n    for (const itemID of itemsIDs) {\n      const instancesToDelete = this.itemToInstances.get(itemID);\n      if (instancesToDelete === void 0) {\n        throw new Error(\"Instances not found!\");\n      }\n      for (const instanceID of instancesToDelete) {\n        if (this.mesh.count === 0)\n          throw new Error(\"Error with mesh count!\");\n        this.putLast(instanceID);\n        this.instanceToItem.delete(instanceID);\n        this.mesh.count--;\n      }\n      this.itemToInstances.delete(itemID);\n      this.ids.delete(itemID);\n    }\n    this.update();\n  }\n  /**\n   * Clears the fragment by resetting the hidden items, item IDs, instance-to-item associations,\n   * instance-to-item map, and the count of instances in the fragment's mesh.\n   *\n   * @remarks\n   * This method is used to reset the fragment to its initial state.\n   *\n   * @example\n   * ```typescript\n   * fragment.clear();\n   * ```\n   */\n  clear() {\n    this.hiddenItems.clear();\n    this.ids.clear();\n    this.instanceToItem.clear();\n    this.itemToInstances.clear();\n    this.mesh.count = 0;\n  }\n  /**\n   * Sets the visibility of items in the fragment.\n   *\n   * @param visible - A boolean indicating whether the items should be visible or hidden.\n   * @param itemIDs - An iterable of item IDs to be affected. If not provided, all items in the fragment will be affected.\n   *\n   * @remarks\n   * This method updates the visibility of items in the fragment based on the provided visibility flag.\n   *\n   *\n   * @example\n   * ```typescript\n   * fragment.setVisibility(true, [1, 2, 3]); // Makes items with IDs 1, 2, and 3 visible.\n   * fragment.setVisibility(false); // Makes all items in the fragment hidden.\n   * ```\n   */\n  setVisibility(visible, itemIDs = this.ids) {\n    if (this._settingVisibility)\n      return;\n    this._settingVisibility = true;\n    if (visible) {\n      for (const itemID of itemIDs) {\n        if (!this.ids.has(itemID)) {\n          continue;\n        }\n        if (!this.hiddenItems.has(itemID)) {\n          continue;\n        }\n        const instances = this.itemToInstances.get(itemID);\n        if (!instances)\n          throw new Error(\"Instances not found!\");\n        for (const instance of new Set(instances)) {\n          this.mesh.count++;\n          this.putLast(instance);\n        }\n        this.hiddenItems.delete(itemID);\n      }\n    } else {\n      for (const itemID of itemIDs) {\n        if (!this.ids.has(itemID)) {\n          continue;\n        }\n        if (this.hiddenItems.has(itemID)) {\n          continue;\n        }\n        const instances = this.itemToInstances.get(itemID);\n        if (!instances) {\n          throw new Error(\"Instances not found!\");\n        }\n        for (const instance of new Set(instances)) {\n          this.putLast(instance);\n          this.mesh.count--;\n        }\n        this.hiddenItems.add(itemID);\n      }\n    }\n    this.update();\n    this._settingVisibility = false;\n  }\n  /**\n   * Sets the color of items in the fragment.\n   *\n   * @param color - The color to be set for the items.\n   * @param itemIDs - An iterable of item IDs to be affected. If not provided, all items in the fragment will be affected.\n   * @param override - A boolean indicating whether the original color should be overridden. If true, the original color will be replaced with the new color.\n   *\n   *\n   * @example\n   * ```typescript\n   * fragment.setColor(new THREE.Color(0xff0000), [1, 2, 3], true); // Sets the color of items with IDs 1, 2, and 3 to red, overriding their original colors.\n   * fragment.setColor(new THREE.Color(0x00ff00)); // Sets the color of all items in the fragment to green.\n   * ```\n   */\n  setColor(color, itemIDs = this.ids, override = false) {\n    if (!this.mesh.instanceColor) {\n      throw new Error(\"This fragment doesn't have color per instance!\");\n    }\n    for (const itemID of itemIDs) {\n      if (!this.ids.has(itemID)) {\n        continue;\n      }\n      const instances = this.itemToInstances.get(itemID);\n      if (!instances) {\n        throw new Error(\"Instances not found!\");\n      }\n      const originalsExist = this._originalColors.has(itemID);\n      if (!originalsExist) {\n        this._originalColors.set(itemID, /* @__PURE__ */ new Map());\n      }\n      const originals = this._originalColors.get(itemID);\n      for (const instance of new Set(instances)) {\n        if (!originalsExist) {\n          const originalColor = new THREE.Color();\n          this.mesh.getColorAt(instance, originalColor);\n          originals.set(instance, originalColor);\n        }\n        this.mesh.setColorAt(instance, color);\n        if (override) {\n          originals.set(instance, color);\n        }\n      }\n    }\n    this.mesh.instanceColor.needsUpdate = true;\n  }\n  /**\n   * Resets the color of items in the fragment to their original colors.\n   *\n   * @param itemIDs - An iterable of item IDs to be affected. If not provided, all items in the fragment will be affected.\n   *\n   *\n   * @example\n   * ```typescript\n   * fragment.resetColor([1, 2, 3]); // Resets the color of items with IDs 1, 2, and 3 to their original colors.\n   * fragment.resetColor(); // Resets the color of all items in the fragment to their original colors.\n   * ```\n   */\n  resetColor(itemIDs = this.ids) {\n    if (!this.mesh.instanceColor) {\n      throw new Error(\"This fragment doesn't have color per instance!\");\n    }\n    for (const itemID of itemIDs) {\n      if (!this.ids.has(itemID)) {\n        continue;\n      }\n      const instances = this.itemToInstances.get(itemID);\n      if (!instances) {\n        throw new Error(\"Instances not found!\");\n      }\n      const originals = this._originalColors.get(itemID);\n      if (!originals) {\n        continue;\n      }\n      for (const instance of new Set(instances)) {\n        const originalColor = originals.get(instance);\n        if (!originalColor) {\n          throw new Error(\"Original color not found!\");\n        }\n        this.mesh.setColorAt(instance, originalColor);\n      }\n    }\n    this.mesh.instanceColor.needsUpdate = true;\n  }\n  /**\n   * Applies a transformation matrix to instances associated with given item IDs.\n   *\n   * @param itemIDs - An iterable of item IDs to be affected.\n   * @param transform - The transformation matrix to be applied.\n   *\n   * @remarks\n   * This method applies the provided transformation matrix to the instances associated with the given item IDs.\n   *\n   * @example\n   * ```typescript\n   * fragment.applyTransform([1, 2, 3], new THREE.Matrix4().makeTranslation(1, 0, 0)); // Applies a translation of (1, 0, 0) to instances with IDs 1, 2, and 3.\n   * ```\n   */\n  applyTransform(itemIDs, transform) {\n    const tempMatrix2 = new THREE.Matrix4();\n    for (const itemID of itemIDs) {\n      const instances = this.getInstancesIDs(itemID);\n      if (instances === null) {\n        continue;\n      }\n      for (const instanceID of instances) {\n        this.mesh.getMatrixAt(instanceID, tempMatrix2);\n        tempMatrix2.premultiply(transform);\n        this.mesh.setMatrixAt(instanceID, tempMatrix2);\n      }\n    }\n    this.update();\n  }\n  /**\n   * Exports the fragment's geometry and associated data.\n   *\n   * @returns An object containing the exported geometry, an array of IDs associated with the fragment, and the fragment's ID.\n   *\n   * @remarks\n   * This method is used to export the fragment's geometry and associated data for further processing or storage.\n   *\n   * @example\n   * ```typescript\n   * const exportedData = fragment.exportData();\n   * // Use the exportedData object for further processing or storage\n   * ```\n   */\n  exportData() {\n    const geometry = this.mesh.exportData();\n    const ids = Array.from(this.ids);\n    const id = this.id;\n    return { ...geometry, ids, id };\n  }\n  /**\n   * Creates a copy of the whole fragment or a part of it. It shares the geometry with the original fragment, but has its own InstancedMesh data, so it also needs to be disposed.\n   *\n   * @param itemIDs - An iterable of item IDs to be included in the clone.\n   *\n   */\n  clone(itemIDs = this.ids) {\n    const newFragment = new Fragment(\n      this.mesh.geometry,\n      this.mesh.material,\n      this.capacity\n    );\n    const items = [];\n    for (const id of itemIDs) {\n      const instancesIDs = this.getInstancesIDs(id);\n      if (instancesIDs === null) {\n        continue;\n      }\n      const transforms = [];\n      const colors = [];\n      for (const instanceID of instancesIDs) {\n        const newMatrix = new THREE.Matrix4();\n        const newColor = new THREE.Color();\n        this.mesh.getMatrixAt(instanceID, newMatrix);\n        this.mesh.getColorAt(instanceID, newColor);\n        transforms.push(newMatrix);\n        colors.push(newColor);\n      }\n      items.push({\n        id,\n        transforms,\n        colors\n      });\n    }\n    newFragment.add(items);\n    return newFragment;\n  }\n  putLast(instanceID1) {\n    if (this.mesh.count === 0)\n      return;\n    const id1 = this.instanceToItem.get(instanceID1);\n    const instanceID2 = this.mesh.count - 1;\n    if (instanceID2 === instanceID1) {\n      return;\n    }\n    const id2 = this.instanceToItem.get(instanceID2);\n    if (id1 === void 0 || id2 === void 0) {\n      throw new Error(\"Keys not found\");\n    }\n    if (id1 !== id2) {\n      const instances1 = this.itemToInstances.get(id1);\n      const instances2 = this.itemToInstances.get(id2);\n      if (!instances1 || !instances2) {\n        throw new Error(\"Instances not found\");\n      }\n      if (!instances1.has(instanceID1) || !instances2.has(instanceID2)) {\n        throw new Error(\"Malformed fragment structure\");\n      }\n      instances1.delete(instanceID1);\n      instances2.delete(instanceID2);\n      instances1.add(instanceID2);\n      instances2.add(instanceID1);\n      this.instanceToItem.set(instanceID1, id2);\n      this.instanceToItem.set(instanceID2, id1);\n    }\n    const transform1 = new THREE.Matrix4();\n    const transform2 = new THREE.Matrix4();\n    this.mesh.getMatrixAt(instanceID1, transform1);\n    this.mesh.getMatrixAt(instanceID2, transform2);\n    this.mesh.setMatrixAt(instanceID1, transform2);\n    this.mesh.setMatrixAt(instanceID2, transform1);\n    if (this.mesh.instanceColor !== null) {\n      const color1 = new THREE.Color();\n      const color2 = new THREE.Color();\n      this.mesh.getColorAt(instanceID1, color1);\n      this.mesh.getColorAt(instanceID2, color2);\n      this.mesh.setColorAt(instanceID1, color2);\n      this.mesh.setColorAt(instanceID2, color1);\n      const originals1 = this._originalColors.get(id1);\n      if (originals1) {\n        const color12 = originals1.get(instanceID1);\n        if (color12) {\n          originals1.delete(instanceID1);\n          originals1.set(instanceID2, color12);\n        }\n      }\n      const originals2 = this._originalColors.get(id2);\n      if (originals2) {\n        const color22 = originals2.get(instanceID2);\n        if (color22) {\n          originals2.delete(instanceID2);\n          originals2.set(instanceID1, color22);\n        }\n      }\n    }\n  }\n};\nconst SIZEOF_SHORT = 2;\nconst SIZEOF_INT = 4;\nconst FILE_IDENTIFIER_LENGTH = 4;\nconst SIZE_PREFIX_LENGTH = 4;\nconst int32 = new Int32Array(2);\nconst float32 = new Float32Array(int32.buffer);\nconst float64 = new Float64Array(int32.buffer);\nconst isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\nvar Encoding;\n(function(Encoding2) {\n  Encoding2[Encoding2[\"UTF8_BYTES\"] = 1] = \"UTF8_BYTES\";\n  Encoding2[Encoding2[\"UTF16_STRING\"] = 2] = \"UTF16_STRING\";\n})(Encoding || (Encoding = {}));\nclass ByteBuffer {\n  /**\n   * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)\n   */\n  constructor(bytes_) {\n    this.bytes_ = bytes_;\n    this.position_ = 0;\n    this.text_decoder_ = new TextDecoder();\n  }\n  /**\n   * Create and allocate a new ByteBuffer with a given size.\n   */\n  static allocate(byte_size) {\n    return new ByteBuffer(new Uint8Array(byte_size));\n  }\n  clear() {\n    this.position_ = 0;\n  }\n  /**\n   * Get the underlying `Uint8Array`.\n   */\n  bytes() {\n    return this.bytes_;\n  }\n  /**\n   * Get the buffer's position.\n   */\n  position() {\n    return this.position_;\n  }\n  /**\n   * Set the buffer's position.\n   */\n  setPosition(position) {\n    this.position_ = position;\n  }\n  /**\n   * Get the buffer's capacity.\n   */\n  capacity() {\n    return this.bytes_.length;\n  }\n  readInt8(offset) {\n    return this.readUint8(offset) << 24 >> 24;\n  }\n  readUint8(offset) {\n    return this.bytes_[offset];\n  }\n  readInt16(offset) {\n    return this.readUint16(offset) << 16 >> 16;\n  }\n  readUint16(offset) {\n    return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n  }\n  readInt32(offset) {\n    return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n  }\n  readUint32(offset) {\n    return this.readInt32(offset) >>> 0;\n  }\n  readInt64(offset) {\n    return BigInt.asIntN(64, BigInt(this.readUint32(offset)) + (BigInt(this.readUint32(offset + 4)) << BigInt(32)));\n  }\n  readUint64(offset) {\n    return BigInt.asUintN(64, BigInt(this.readUint32(offset)) + (BigInt(this.readUint32(offset + 4)) << BigInt(32)));\n  }\n  readFloat32(offset) {\n    int32[0] = this.readInt32(offset);\n    return float32[0];\n  }\n  readFloat64(offset) {\n    int32[isLittleEndian ? 0 : 1] = this.readInt32(offset);\n    int32[isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n    return float64[0];\n  }\n  writeInt8(offset, value) {\n    this.bytes_[offset] = value;\n  }\n  writeUint8(offset, value) {\n    this.bytes_[offset] = value;\n  }\n  writeInt16(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n  }\n  writeUint16(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n  }\n  writeInt32(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n  }\n  writeUint32(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n  }\n  writeInt64(offset, value) {\n    this.writeInt32(offset, Number(BigInt.asIntN(32, value)));\n    this.writeInt32(offset + 4, Number(BigInt.asIntN(32, value >> BigInt(32))));\n  }\n  writeUint64(offset, value) {\n    this.writeUint32(offset, Number(BigInt.asUintN(32, value)));\n    this.writeUint32(offset + 4, Number(BigInt.asUintN(32, value >> BigInt(32))));\n  }\n  writeFloat32(offset, value) {\n    float32[0] = value;\n    this.writeInt32(offset, int32[0]);\n  }\n  writeFloat64(offset, value) {\n    float64[0] = value;\n    this.writeInt32(offset, int32[isLittleEndian ? 0 : 1]);\n    this.writeInt32(offset + 4, int32[isLittleEndian ? 1 : 0]);\n  }\n  /**\n   * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n   * schema does not include a file_identifier (likely points at padding or the\n   * start of a the root vtable).\n   */\n  getBufferIdentifier() {\n    if (this.bytes_.length < this.position_ + SIZEOF_INT + FILE_IDENTIFIER_LENGTH) {\n      throw new Error(\"FlatBuffers: ByteBuffer is too short to contain an identifier.\");\n    }\n    let result = \"\";\n    for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {\n      result += String.fromCharCode(this.readInt8(this.position_ + SIZEOF_INT + i));\n    }\n    return result;\n  }\n  /**\n   * Look up a field in the vtable, return an offset into the object, or 0 if the\n   * field is not present.\n   */\n  __offset(bb_pos, vtable_offset) {\n    const vtable = bb_pos - this.readInt32(bb_pos);\n    return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n  }\n  /**\n   * Initialize any Table-derived type to point to the union at the given offset.\n   */\n  __union(t, offset) {\n    t.bb_pos = offset + this.readInt32(offset);\n    t.bb = this;\n    return t;\n  }\n  /**\n   * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n   * This allocates a new string and converts to wide chars upon each access.\n   *\n   * To avoid the conversion to string, pass Encoding.UTF8_BYTES as the\n   * \"optionalEncoding\" argument. This is useful for avoiding conversion when\n   * the data will just be packaged back up in another FlatBuffer later on.\n   *\n   * @param offset\n   * @param opt_encoding Defaults to UTF16_STRING\n   */\n  __string(offset, opt_encoding) {\n    offset += this.readInt32(offset);\n    const length = this.readInt32(offset);\n    offset += SIZEOF_INT;\n    const utf8bytes = this.bytes_.subarray(offset, offset + length);\n    if (opt_encoding === Encoding.UTF8_BYTES)\n      return utf8bytes;\n    else\n      return this.text_decoder_.decode(utf8bytes);\n  }\n  /**\n   * Handle unions that can contain string as its member, if a Table-derived type then initialize it,\n   * if a string then return a new one\n   *\n   * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this\n   * makes the behaviour of __union_with_string different compared to __union\n   */\n  __union_with_string(o, offset) {\n    if (typeof o === \"string\") {\n      return this.__string(offset);\n    }\n    return this.__union(o, offset);\n  }\n  /**\n   * Retrieve the relative offset stored at \"offset\"\n   */\n  __indirect(offset) {\n    return offset + this.readInt32(offset);\n  }\n  /**\n   * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n   */\n  __vector(offset) {\n    return offset + this.readInt32(offset) + SIZEOF_INT;\n  }\n  /**\n   * Get the length of a vector whose offset is stored at \"offset\" in this object.\n   */\n  __vector_len(offset) {\n    return this.readInt32(offset + this.readInt32(offset));\n  }\n  __has_identifier(ident) {\n    if (ident.length != FILE_IDENTIFIER_LENGTH) {\n      throw new Error(\"FlatBuffers: file identifier must be length \" + FILE_IDENTIFIER_LENGTH);\n    }\n    for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {\n      if (ident.charCodeAt(i) != this.readInt8(this.position() + SIZEOF_INT + i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * A helper function for generating list for obj api\n   */\n  createScalarList(listAccessor, listLength) {\n    const ret = [];\n    for (let i = 0; i < listLength; ++i) {\n      const val = listAccessor(i);\n      if (val !== null) {\n        ret.push(val);\n      }\n    }\n    return ret;\n  }\n  /**\n   * A helper function for generating list for obj api\n   * @param listAccessor function that accepts an index and return data at that index\n   * @param listLength listLength\n   * @param res result list\n   */\n  createObjList(listAccessor, listLength) {\n    const ret = [];\n    for (let i = 0; i < listLength; ++i) {\n      const val = listAccessor(i);\n      if (val !== null) {\n        ret.push(val.unpack());\n      }\n    }\n    return ret;\n  }\n}\nclass Builder {\n  /**\n   * Create a FlatBufferBuilder.\n   */\n  constructor(opt_initial_size) {\n    this.minalign = 1;\n    this.vtable = null;\n    this.vtable_in_use = 0;\n    this.isNested = false;\n    this.object_start = 0;\n    this.vtables = [];\n    this.vector_num_elems = 0;\n    this.force_defaults = false;\n    this.string_maps = null;\n    this.text_encoder = new TextEncoder();\n    let initial_size;\n    if (!opt_initial_size) {\n      initial_size = 1024;\n    } else {\n      initial_size = opt_initial_size;\n    }\n    this.bb = ByteBuffer.allocate(initial_size);\n    this.space = initial_size;\n  }\n  clear() {\n    this.bb.clear();\n    this.space = this.bb.capacity();\n    this.minalign = 1;\n    this.vtable = null;\n    this.vtable_in_use = 0;\n    this.isNested = false;\n    this.object_start = 0;\n    this.vtables = [];\n    this.vector_num_elems = 0;\n    this.force_defaults = false;\n    this.string_maps = null;\n  }\n  /**\n   * In order to save space, fields that are set to their default value\n   * don't get serialized into the buffer. Forcing defaults provides a\n   * way to manually disable this optimization.\n   *\n   * @param forceDefaults true always serializes default values\n   */\n  forceDefaults(forceDefaults) {\n    this.force_defaults = forceDefaults;\n  }\n  /**\n   * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n   * called finish(). The actual data starts at the ByteBuffer's current position,\n   * not necessarily at 0.\n   */\n  dataBuffer() {\n    return this.bb;\n  }\n  /**\n   * Get the bytes representing the FlatBuffer. Only call this after you've\n   * called finish().\n   */\n  asUint8Array() {\n    return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n  }\n  /**\n   * Prepare to write an element of `size` after `additional_bytes` have been\n   * written, e.g. if you write a string, you need to align such the int length\n   * field is aligned to 4 bytes, and the string data follows it directly. If all\n   * you need to do is alignment, `additional_bytes` will be 0.\n   *\n   * @param size This is the of the new element to write\n   * @param additional_bytes The padding size\n   */\n  prep(size, additional_bytes) {\n    if (size > this.minalign) {\n      this.minalign = size;\n    }\n    const align_size = ~(this.bb.capacity() - this.space + additional_bytes) + 1 & size - 1;\n    while (this.space < align_size + size + additional_bytes) {\n      const old_buf_size = this.bb.capacity();\n      this.bb = Builder.growByteBuffer(this.bb);\n      this.space += this.bb.capacity() - old_buf_size;\n    }\n    this.pad(align_size);\n  }\n  pad(byte_size) {\n    for (let i = 0; i < byte_size; i++) {\n      this.bb.writeInt8(--this.space, 0);\n    }\n  }\n  writeInt8(value) {\n    this.bb.writeInt8(this.space -= 1, value);\n  }\n  writeInt16(value) {\n    this.bb.writeInt16(this.space -= 2, value);\n  }\n  writeInt32(value) {\n    this.bb.writeInt32(this.space -= 4, value);\n  }\n  writeInt64(value) {\n    this.bb.writeInt64(this.space -= 8, value);\n  }\n  writeFloat32(value) {\n    this.bb.writeFloat32(this.space -= 4, value);\n  }\n  writeFloat64(value) {\n    this.bb.writeFloat64(this.space -= 8, value);\n  }\n  /**\n   * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n   * @param value The `int8` to add the buffer.\n   */\n  addInt8(value) {\n    this.prep(1, 0);\n    this.writeInt8(value);\n  }\n  /**\n   * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n   * @param value The `int16` to add the buffer.\n   */\n  addInt16(value) {\n    this.prep(2, 0);\n    this.writeInt16(value);\n  }\n  /**\n   * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n   * @param value The `int32` to add the buffer.\n   */\n  addInt32(value) {\n    this.prep(4, 0);\n    this.writeInt32(value);\n  }\n  /**\n   * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n   * @param value The `int64` to add the buffer.\n   */\n  addInt64(value) {\n    this.prep(8, 0);\n    this.writeInt64(value);\n  }\n  /**\n   * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n   * @param value The `float32` to add the buffer.\n   */\n  addFloat32(value) {\n    this.prep(4, 0);\n    this.writeFloat32(value);\n  }\n  /**\n   * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n   * @param value The `float64` to add the buffer.\n   */\n  addFloat64(value) {\n    this.prep(8, 0);\n    this.writeFloat64(value);\n  }\n  addFieldInt8(voffset, value, defaultValue) {\n    if (this.force_defaults || value != defaultValue) {\n      this.addInt8(value);\n      this.slot(voffset);\n    }\n  }\n  addFieldInt16(voffset, value, defaultValue) {\n    if (this.force_defaults || value != defaultValue) {\n      this.addInt16(value);\n      this.slot(voffset);\n    }\n  }\n  addFieldInt32(voffset, value, defaultValue) {\n    if (this.force_defaults || value != defaultValue) {\n      this.addInt32(value);\n      this.slot(voffset);\n    }\n  }\n  addFieldInt64(voffset, value, defaultValue) {\n    if (this.force_defaults || value !== defaultValue) {\n      this.addInt64(value);\n      this.slot(voffset);\n    }\n  }\n  addFieldFloat32(voffset, value, defaultValue) {\n    if (this.force_defaults || value != defaultValue) {\n      this.addFloat32(value);\n      this.slot(voffset);\n    }\n  }\n  addFieldFloat64(voffset, value, defaultValue) {\n    if (this.force_defaults || value != defaultValue) {\n      this.addFloat64(value);\n      this.slot(voffset);\n    }\n  }\n  addFieldOffset(voffset, value, defaultValue) {\n    if (this.force_defaults || value != defaultValue) {\n      this.addOffset(value);\n      this.slot(voffset);\n    }\n  }\n  /**\n   * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n   */\n  addFieldStruct(voffset, value, defaultValue) {\n    if (value != defaultValue) {\n      this.nested(value);\n      this.slot(voffset);\n    }\n  }\n  /**\n   * Structures are always stored inline, they need to be created right\n   * where they're used.  You'll get this assertion failure if you\n   * created it elsewhere.\n   */\n  nested(obj) {\n    if (obj != this.offset()) {\n      throw new Error(\"FlatBuffers: struct must be serialized inline.\");\n    }\n  }\n  /**\n   * Should not be creating any other object, string or vector\n   * while an object is being constructed\n   */\n  notNested() {\n    if (this.isNested) {\n      throw new Error(\"FlatBuffers: object serialization must not be nested.\");\n    }\n  }\n  /**\n   * Set the current vtable at `voffset` to the current location in the buffer.\n   */\n  slot(voffset) {\n    if (this.vtable !== null)\n      this.vtable[voffset] = this.offset();\n  }\n  /**\n   * @returns Offset relative to the end of the buffer.\n   */\n  offset() {\n    return this.bb.capacity() - this.space;\n  }\n  /**\n   * Doubles the size of the backing ByteBuffer and copies the old data towards\n   * the end of the new buffer (since we build the buffer backwards).\n   *\n   * @param bb The current buffer with the existing data\n   * @returns A new byte buffer with the old data copied\n   * to it. The data is located at the end of the buffer.\n   *\n   * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n   * it a uint8Array we need to suppress the type check:\n   * @suppress {checkTypes}\n   */\n  static growByteBuffer(bb) {\n    const old_buf_size = bb.capacity();\n    if (old_buf_size & 3221225472) {\n      throw new Error(\"FlatBuffers: cannot grow buffer beyond 2 gigabytes.\");\n    }\n    const new_buf_size = old_buf_size << 1;\n    const nbb = ByteBuffer.allocate(new_buf_size);\n    nbb.setPosition(new_buf_size - old_buf_size);\n    nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n    return nbb;\n  }\n  /**\n   * Adds on offset, relative to where it will be written.\n   *\n   * @param offset The offset to add.\n   */\n  addOffset(offset) {\n    this.prep(SIZEOF_INT, 0);\n    this.writeInt32(this.offset() - offset + SIZEOF_INT);\n  }\n  /**\n   * Start encoding a new object in the buffer.  Users will not usually need to\n   * call this directly. The FlatBuffers compiler will generate helper methods\n   * that call this method internally.\n   */\n  startObject(numfields) {\n    this.notNested();\n    if (this.vtable == null) {\n      this.vtable = [];\n    }\n    this.vtable_in_use = numfields;\n    for (let i = 0; i < numfields; i++) {\n      this.vtable[i] = 0;\n    }\n    this.isNested = true;\n    this.object_start = this.offset();\n  }\n  /**\n   * Finish off writing the object that is under construction.\n   *\n   * @returns The offset to the object inside `dataBuffer`\n   */\n  endObject() {\n    if (this.vtable == null || !this.isNested) {\n      throw new Error(\"FlatBuffers: endObject called without startObject\");\n    }\n    this.addInt32(0);\n    const vtableloc = this.offset();\n    let i = this.vtable_in_use - 1;\n    for (; i >= 0 && this.vtable[i] == 0; i--) {\n    }\n    const trimmed_size = i + 1;\n    for (; i >= 0; i--) {\n      this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n    }\n    const standard_fields = 2;\n    this.addInt16(vtableloc - this.object_start);\n    const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;\n    this.addInt16(len);\n    let existing_vtable = 0;\n    const vt1 = this.space;\n    outer_loop:\n      for (i = 0; i < this.vtables.length; i++) {\n        const vt2 = this.bb.capacity() - this.vtables[i];\n        if (len == this.bb.readInt16(vt2)) {\n          for (let j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {\n            if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n              continue outer_loop;\n            }\n          }\n          existing_vtable = this.vtables[i];\n          break;\n        }\n      }\n    if (existing_vtable) {\n      this.space = this.bb.capacity() - vtableloc;\n      this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n    } else {\n      this.vtables.push(this.offset());\n      this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n    }\n    this.isNested = false;\n    return vtableloc;\n  }\n  /**\n   * Finalize a buffer, poiting to the given `root_table`.\n   */\n  finish(root_table, opt_file_identifier, opt_size_prefix) {\n    const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;\n    if (opt_file_identifier) {\n      const file_identifier = opt_file_identifier;\n      this.prep(this.minalign, SIZEOF_INT + FILE_IDENTIFIER_LENGTH + size_prefix);\n      if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {\n        throw new Error(\"FlatBuffers: file identifier must be length \" + FILE_IDENTIFIER_LENGTH);\n      }\n      for (let i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n        this.writeInt8(file_identifier.charCodeAt(i));\n      }\n    }\n    this.prep(this.minalign, SIZEOF_INT + size_prefix);\n    this.addOffset(root_table);\n    if (size_prefix) {\n      this.addInt32(this.bb.capacity() - this.space);\n    }\n    this.bb.setPosition(this.space);\n  }\n  /**\n   * Finalize a size prefixed buffer, pointing to the given `root_table`.\n   */\n  finishSizePrefixed(root_table, opt_file_identifier) {\n    this.finish(root_table, opt_file_identifier, true);\n  }\n  /**\n   * This checks a required field has been set in a given table that has\n   * just been constructed.\n   */\n  requiredField(table, field) {\n    const table_start = this.bb.capacity() - table;\n    const vtable_start = table_start - this.bb.readInt32(table_start);\n    const ok = field < this.bb.readInt16(vtable_start) && this.bb.readInt16(vtable_start + field) != 0;\n    if (!ok) {\n      throw new Error(\"FlatBuffers: field \" + field + \" must be set\");\n    }\n  }\n  /**\n   * Start a new array/vector of objects.  Users usually will not call\n   * this directly. The FlatBuffers compiler will create a start/end\n   * method for vector types in generated code.\n   *\n   * @param elem_size The size of each element in the array\n   * @param num_elems The number of elements in the array\n   * @param alignment The alignment of the array\n   */\n  startVector(elem_size, num_elems, alignment) {\n    this.notNested();\n    this.vector_num_elems = num_elems;\n    this.prep(SIZEOF_INT, elem_size * num_elems);\n    this.prep(alignment, elem_size * num_elems);\n  }\n  /**\n   * Finish off the creation of an array and all its elements. The array must be\n   * created with `startVector`.\n   *\n   * @returns The offset at which the newly created array\n   * starts.\n   */\n  endVector() {\n    this.writeInt32(this.vector_num_elems);\n    return this.offset();\n  }\n  /**\n   * Encode the string `s` in the buffer using UTF-8. If the string passed has\n   * already been seen, we return the offset of the already written string\n   *\n   * @param s The string to encode\n   * @return The offset in the buffer where the encoded string starts\n   */\n  createSharedString(s) {\n    if (!s) {\n      return 0;\n    }\n    if (!this.string_maps) {\n      this.string_maps = /* @__PURE__ */ new Map();\n    }\n    if (this.string_maps.has(s)) {\n      return this.string_maps.get(s);\n    }\n    const offset = this.createString(s);\n    this.string_maps.set(s, offset);\n    return offset;\n  }\n  /**\n   * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n   * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n   *\n   * @param s The string to encode\n   * @return The offset in the buffer where the encoded string starts\n   */\n  createString(s) {\n    if (s === null || s === void 0) {\n      return 0;\n    }\n    let utf8;\n    if (s instanceof Uint8Array) {\n      utf8 = s;\n    } else {\n      utf8 = this.text_encoder.encode(s);\n    }\n    this.addInt8(0);\n    this.startVector(1, utf8.length, 1);\n    this.bb.setPosition(this.space -= utf8.length);\n    for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n      bytes[offset++] = utf8[i];\n    }\n    return this.endVector();\n  }\n  /**\n   * A helper function to pack an object\n   *\n   * @returns offset of obj\n   */\n  createObjectOffset(obj) {\n    if (obj === null) {\n      return 0;\n    }\n    if (typeof obj === \"string\") {\n      return this.createString(obj);\n    } else {\n      return obj.pack(this);\n    }\n  }\n  /**\n   * A helper function to pack a list of object\n   *\n   * @returns list of offsets of each non null object\n   */\n  createObjectOffsetList(list) {\n    const ret = [];\n    for (let i = 0; i < list.length; ++i) {\n      const val = list[i];\n      if (val !== null) {\n        ret.push(this.createObjectOffset(val));\n      } else {\n        throw new Error(\"FlatBuffers: Argument for createObjectOffsetList cannot contain null.\");\n      }\n    }\n    return ret;\n  }\n  createStructOffsetList(list, startFunc) {\n    startFunc(this, list.length);\n    this.createObjectOffsetList(list.slice().reverse());\n    return this.endVector();\n  }\n}\nlet CivilCurve$2 = class CivilCurve {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsCivilCurve(bb, obj) {\n    return (obj || new CivilCurve()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsCivilCurve(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new CivilCurve()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  points(index) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  pointsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  pointsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  data(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  static startCivilCurve(builder) {\n    builder.startObject(2);\n  }\n  static addPoints(builder, pointsOffset) {\n    builder.addFieldOffset(0, pointsOffset, 0);\n  }\n  static createPointsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startPointsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addData(builder, dataOffset) {\n    builder.addFieldOffset(1, dataOffset, 0);\n  }\n  static endCivilCurve(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createCivilCurve(builder, pointsOffset, dataOffset) {\n    CivilCurve.startCivilCurve(builder);\n    CivilCurve.addPoints(builder, pointsOffset);\n    CivilCurve.addData(builder, dataOffset);\n    return CivilCurve.endCivilCurve(builder);\n  }\n};\nlet Alignment$2 = class Alignment {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsAlignment(bb, obj) {\n    return (obj || new Alignment()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsAlignment(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new Alignment()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  vertical(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new CivilCurve$2()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  verticalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  horizontal(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? (obj || new CivilCurve$2()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  horizontalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  absolute(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? (obj || new CivilCurve$2()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  absoluteLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  initialPk() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;\n  }\n  static startAlignment(builder) {\n    builder.startObject(4);\n  }\n  static addVertical(builder, verticalOffset) {\n    builder.addFieldOffset(0, verticalOffset, 0);\n  }\n  static createVerticalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startVerticalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addHorizontal(builder, horizontalOffset) {\n    builder.addFieldOffset(1, horizontalOffset, 0);\n  }\n  static createHorizontalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startHorizontalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addAbsolute(builder, absoluteOffset) {\n    builder.addFieldOffset(2, absoluteOffset, 0);\n  }\n  static createAbsoluteVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startAbsoluteVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addInitialPk(builder, initialPk) {\n    builder.addFieldFloat32(3, initialPk, 0);\n  }\n  static endAlignment(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createAlignment(builder, verticalOffset, horizontalOffset, absoluteOffset, initialPk) {\n    Alignment.startAlignment(builder);\n    Alignment.addVertical(builder, verticalOffset);\n    Alignment.addHorizontal(builder, horizontalOffset);\n    Alignment.addAbsolute(builder, absoluteOffset);\n    Alignment.addInitialPk(builder, initialPk);\n    return Alignment.endAlignment(builder);\n  }\n};\nlet CivilData$1 = class CivilData {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsCivilData(bb, obj) {\n    return (obj || new CivilData()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsCivilData(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new CivilData()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  alignments(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new Alignment$2()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  alignmentsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  coordinationMatrix(index) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  coordinationMatrixLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  coordinationMatrixArray() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  static startCivilData(builder) {\n    builder.startObject(2);\n  }\n  static addAlignments(builder, alignmentsOffset) {\n    builder.addFieldOffset(0, alignmentsOffset, 0);\n  }\n  static createAlignmentsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startAlignmentsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addCoordinationMatrix(builder, coordinationMatrixOffset) {\n    builder.addFieldOffset(1, coordinationMatrixOffset, 0);\n  }\n  static createCoordinationMatrixVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startCoordinationMatrixVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static endCivilData(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createCivilData(builder, alignmentsOffset, coordinationMatrixOffset) {\n    CivilData.startCivilData(builder);\n    CivilData.addAlignments(builder, alignmentsOffset);\n    CivilData.addCoordinationMatrix(builder, coordinationMatrixOffset);\n    return CivilData.endCivilData(builder);\n  }\n};\nlet Fragment$1 = class Fragment2 {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsFragment(bb, obj) {\n    return (obj || new Fragment2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsFragment(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new Fragment2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  position(index) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  positionLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  positionArray() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  normal(index) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  normalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  normalArray() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  index(index) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  indexLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  indexArray() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  groups(index) {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  groupsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  groupsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  materials(index) {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  materialsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  materialsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  matrices(index) {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  matricesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  matricesArray() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  colors(index) {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  colorsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  colorsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  itemsSize(index) {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsSizeLength() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsSizeArray() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  ids(index) {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  idsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  idsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  id(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 22);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  capacity() {\n    const offset = this.bb.__offset(this.bb_pos, 24);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  capacityOffset() {\n    const offset = this.bb.__offset(this.bb_pos, 26);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  static startFragment(builder) {\n    builder.startObject(12);\n  }\n  static addPosition(builder, positionOffset) {\n    builder.addFieldOffset(0, positionOffset, 0);\n  }\n  static createPositionVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startPositionVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addNormal(builder, normalOffset) {\n    builder.addFieldOffset(1, normalOffset, 0);\n  }\n  static createNormalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startNormalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIndex(builder, indexOffset) {\n    builder.addFieldOffset(2, indexOffset, 0);\n  }\n  static createIndexVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIndexVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addGroups(builder, groupsOffset) {\n    builder.addFieldOffset(3, groupsOffset, 0);\n  }\n  static createGroupsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startGroupsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addMaterials(builder, materialsOffset) {\n    builder.addFieldOffset(4, materialsOffset, 0);\n  }\n  static createMaterialsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startMaterialsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addMatrices(builder, matricesOffset) {\n    builder.addFieldOffset(5, matricesOffset, 0);\n  }\n  static createMatricesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startMatricesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addColors(builder, colorsOffset) {\n    builder.addFieldOffset(6, colorsOffset, 0);\n  }\n  static createColorsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startColorsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsSize(builder, itemsSizeOffset) {\n    builder.addFieldOffset(7, itemsSizeOffset, 0);\n  }\n  static createItemsSizeVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsSizeVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIds(builder, idsOffset) {\n    builder.addFieldOffset(8, idsOffset, 0);\n  }\n  static createIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addId(builder, idOffset) {\n    builder.addFieldOffset(9, idOffset, 0);\n  }\n  static addCapacity(builder, capacity) {\n    builder.addFieldInt32(10, capacity, 0);\n  }\n  static addCapacityOffset(builder, capacityOffset) {\n    builder.addFieldInt32(11, capacityOffset, 0);\n  }\n  static endFragment(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createFragment(builder, positionOffset, normalOffset, indexOffset, groupsOffset, materialsOffset, matricesOffset, colorsOffset, itemsSizeOffset, idsOffset, idOffset, capacity, capacityOffset) {\n    Fragment2.startFragment(builder);\n    Fragment2.addPosition(builder, positionOffset);\n    Fragment2.addNormal(builder, normalOffset);\n    Fragment2.addIndex(builder, indexOffset);\n    Fragment2.addGroups(builder, groupsOffset);\n    Fragment2.addMaterials(builder, materialsOffset);\n    Fragment2.addMatrices(builder, matricesOffset);\n    Fragment2.addColors(builder, colorsOffset);\n    Fragment2.addItemsSize(builder, itemsSizeOffset);\n    Fragment2.addIds(builder, idsOffset);\n    Fragment2.addId(builder, idOffset);\n    Fragment2.addCapacity(builder, capacity);\n    Fragment2.addCapacityOffset(builder, capacityOffset);\n    return Fragment2.endFragment(builder);\n  }\n};\nlet FragmentsGroup$2 = class FragmentsGroup {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsFragmentsGroup(bb, obj) {\n    return (obj || new FragmentsGroup()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsFragmentsGroup(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new FragmentsGroup()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  items(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new Fragment$1()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  itemsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  civil(obj) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? (obj || new CivilData$1()).__init(\n      this.bb.__indirect(this.bb_pos + offset),\n      this.bb\n    ) : null;\n  }\n  coordinationMatrix(index) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  coordinationMatrixLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  coordinationMatrixArray() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  ids(index) {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  idsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  idsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsKeys(index) {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsKeysLength() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsKeysArray() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsKeysIndices(index) {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsKeysIndicesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsKeysIndicesArray() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsRels(index) {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsRelsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsRelsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsRelsIndices(index) {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsRelsIndicesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsRelsIndicesArray() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  fragmentKeys(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  id(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 22);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  name(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 24);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  ifcName(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 26);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  ifcDescription(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 28);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  ifcSchema(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 30);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  maxExpressId() {\n    const offset = this.bb.__offset(this.bb_pos, 32);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  boundingBox(index) {\n    const offset = this.bb.__offset(this.bb_pos, 34);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  boundingBoxLength() {\n    const offset = this.bb.__offset(this.bb_pos, 34);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  boundingBoxArray() {\n    const offset = this.bb.__offset(this.bb_pos, 34);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  opaqueGeometriesIds(index) {\n    const offset = this.bb.__offset(this.bb_pos, 36);\n    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  opaqueGeometriesIdsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 36);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  opaqueGeometriesIdsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 36);\n    return offset ? new Int32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  transparentGeometriesIds(index) {\n    const offset = this.bb.__offset(this.bb_pos, 38);\n    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  transparentGeometriesIdsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 38);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  transparentGeometriesIdsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 38);\n    return offset ? new Int32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  static startFragmentsGroup(builder) {\n    builder.startObject(18);\n  }\n  static addItems(builder, itemsOffset) {\n    builder.addFieldOffset(0, itemsOffset, 0);\n  }\n  static createItemsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addCivil(builder, civilOffset) {\n    builder.addFieldOffset(1, civilOffset, 0);\n  }\n  static addCoordinationMatrix(builder, coordinationMatrixOffset) {\n    builder.addFieldOffset(2, coordinationMatrixOffset, 0);\n  }\n  static createCoordinationMatrixVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startCoordinationMatrixVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIds(builder, idsOffset) {\n    builder.addFieldOffset(3, idsOffset, 0);\n  }\n  static createIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsKeys(builder, itemsKeysOffset) {\n    builder.addFieldOffset(4, itemsKeysOffset, 0);\n  }\n  static createItemsKeysVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsKeysVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsKeysIndices(builder, itemsKeysIndicesOffset) {\n    builder.addFieldOffset(5, itemsKeysIndicesOffset, 0);\n  }\n  static createItemsKeysIndicesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsKeysIndicesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsRels(builder, itemsRelsOffset) {\n    builder.addFieldOffset(6, itemsRelsOffset, 0);\n  }\n  static createItemsRelsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsRelsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsRelsIndices(builder, itemsRelsIndicesOffset) {\n    builder.addFieldOffset(7, itemsRelsIndicesOffset, 0);\n  }\n  static createItemsRelsIndicesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsRelsIndicesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addFragmentKeys(builder, fragmentKeysOffset) {\n    builder.addFieldOffset(8, fragmentKeysOffset, 0);\n  }\n  static addId(builder, idOffset) {\n    builder.addFieldOffset(9, idOffset, 0);\n  }\n  static addName(builder, nameOffset) {\n    builder.addFieldOffset(10, nameOffset, 0);\n  }\n  static addIfcName(builder, ifcNameOffset) {\n    builder.addFieldOffset(11, ifcNameOffset, 0);\n  }\n  static addIfcDescription(builder, ifcDescriptionOffset) {\n    builder.addFieldOffset(12, ifcDescriptionOffset, 0);\n  }\n  static addIfcSchema(builder, ifcSchemaOffset) {\n    builder.addFieldOffset(13, ifcSchemaOffset, 0);\n  }\n  static addMaxExpressId(builder, maxExpressId) {\n    builder.addFieldInt32(14, maxExpressId, 0);\n  }\n  static addBoundingBox(builder, boundingBoxOffset) {\n    builder.addFieldOffset(15, boundingBoxOffset, 0);\n  }\n  static createBoundingBoxVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startBoundingBoxVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addOpaqueGeometriesIds(builder, opaqueGeometriesIdsOffset) {\n    builder.addFieldOffset(16, opaqueGeometriesIdsOffset, 0);\n  }\n  static createOpaqueGeometriesIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startOpaqueGeometriesIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addTransparentGeometriesIds(builder, transparentGeometriesIdsOffset) {\n    builder.addFieldOffset(17, transparentGeometriesIdsOffset, 0);\n  }\n  static createTransparentGeometriesIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startTransparentGeometriesIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static endFragmentsGroup(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static finishFragmentsGroupBuffer(builder, offset) {\n    builder.finish(offset);\n  }\n  static finishSizePrefixedFragmentsGroupBuffer(builder, offset) {\n    builder.finish(offset, void 0, true);\n  }\n};\nclass ParserV1 {\n  constructor() {\n    __publicField(this, \"version\", 1);\n    __publicField(this, \"fragmentIDSeparator\", \"|\");\n  }\n  /** {@link FragmentParser.import} */\n  import(bytes) {\n    const buffer = new ByteBuffer(bytes);\n    const fbFragmentsGroup = FragmentsGroup$2.getRootAsFragmentsGroup(buffer);\n    const fragmentsGroup = this.constructFragmentGroup(fbFragmentsGroup);\n    const length = fbFragmentsGroup.itemsLength();\n    for (let i = 0; i < length; i++) {\n      const fbFragment = fbFragmentsGroup.items(i);\n      if (!fbFragment)\n        continue;\n      const geometry = this.constructGeometry(fbFragment);\n      const materials = this.constructMaterials(fbFragment);\n      const capacity = fbFragment.capacity();\n      const fragment = new Fragment$2(geometry, materials, capacity);\n      fragment.capacityOffset = fbFragment.capacityOffset();\n      this.setInstances(fbFragment, fragment);\n      this.setID(fbFragment, fragment);\n      fragmentsGroup.items.push(fragment);\n      fragmentsGroup.add(fragment.mesh);\n    }\n    return fragmentsGroup;\n  }\n  /**\n   * Exports the FragmentsGroup to a flatbuffer binary file.\n   *\n   * @param group - The FragmentsGroup to be exported.\n   * @returns The flatbuffer binary file as a Uint8Array.\n   */\n  export(group) {\n    const builder = new Builder(1024);\n    const items = [];\n    const G = FragmentsGroup$2;\n    const F = Fragment$1;\n    let civilData = null;\n    if (group.civilData) {\n      const alignments = [];\n      const A = Alignment$2;\n      const C = CivilData$1;\n      for (const [_id, alignment] of group.civilData.alignments) {\n        const { absolute, horizontal, vertical } = alignment;\n        const horCurves = this.saveCivilCurves(horizontal, builder);\n        const verCurves = this.saveCivilCurves(vertical, builder);\n        const absCurves = this.saveCivilCurves(absolute, builder);\n        const horVector = A.createHorizontalVector(builder, horCurves);\n        const verVector = A.createVerticalVector(builder, verCurves);\n        const absVector = A.createAbsoluteVector(builder, absCurves);\n        A.startAlignment(builder);\n        A.addHorizontal(builder, horVector);\n        A.addVertical(builder, verVector);\n        A.addAbsolute(builder, absVector);\n        A.addInitialPk(builder, alignment.initialKP);\n        const exported = A.endAlignment(builder);\n        alignments.push(exported);\n      }\n      const algVector = C.createAlignmentsVector(builder, alignments);\n      const coordVector = C.createCoordinationMatrixVector(\n        builder,\n        group.coordinationMatrix.elements\n      );\n      C.startCivilData(builder);\n      C.addAlignments(builder, algVector);\n      C.addCoordinationMatrix(builder, coordVector);\n      civilData = C.endCivilData(builder);\n    }\n    for (const fragment of group.items) {\n      const result2 = fragment.exportData();\n      const itemsSize = [];\n      for (const itemID of fragment.ids) {\n        const instances = fragment.getInstancesIDs(itemID);\n        if (!instances) {\n          throw new Error(\"Instances not found!\");\n        }\n        itemsSize.push(instances.size);\n      }\n      const posVector = F.createPositionVector(builder, result2.position);\n      const normalVector = F.createNormalVector(builder, result2.normal);\n      const indexVector = F.createIndexVector(builder, result2.index);\n      const groupsVector = F.createGroupsVector(builder, result2.groups);\n      const matsVector = F.createMaterialsVector(builder, result2.materials);\n      const matricesVector = F.createMatricesVector(builder, result2.matrices);\n      const colorsVector = F.createColorsVector(builder, result2.colors);\n      const idsVector2 = F.createIdsVector(builder, result2.ids);\n      const itemsSizeVector = F.createItemsSizeVector(builder, itemsSize);\n      const idStr = builder.createString(result2.id);\n      F.startFragment(builder);\n      F.addPosition(builder, posVector);\n      F.addNormal(builder, normalVector);\n      F.addIndex(builder, indexVector);\n      F.addGroups(builder, groupsVector);\n      F.addMaterials(builder, matsVector);\n      F.addMatrices(builder, matricesVector);\n      F.addColors(builder, colorsVector);\n      F.addIds(builder, idsVector2);\n      F.addItemsSize(builder, itemsSizeVector);\n      F.addId(builder, idStr);\n      F.addCapacity(builder, fragment.capacity);\n      F.addCapacityOffset(builder, fragment.capacityOffset);\n      const exported = Fragment$1.endFragment(builder);\n      items.push(exported);\n    }\n    const itemsVector = G.createItemsVector(builder, items);\n    const matrixVector = G.createCoordinationMatrixVector(\n      builder,\n      group.coordinationMatrix.elements\n    );\n    let fragmentKeys = \"\";\n    for (const fragmentID of group.keyFragments.values()) {\n      if (fragmentKeys.length) {\n        fragmentKeys += this.fragmentIDSeparator;\n      }\n      fragmentKeys += fragmentID;\n    }\n    const fragmentKeysRef = builder.createString(fragmentKeys);\n    const keyIndices = [];\n    const itemsKeys = [];\n    const relsIndices = [];\n    const itemsRels = [];\n    const ids = [];\n    let keysCounter = 0;\n    let relsCounter = 0;\n    for (const [expressID, [keys, rels]] of group.data) {\n      keyIndices.push(keysCounter);\n      relsIndices.push(relsCounter);\n      ids.push(expressID);\n      for (const key of keys) {\n        itemsKeys.push(key);\n      }\n      for (const rel of rels) {\n        itemsRels.push(rel);\n      }\n      keysCounter += keys.length;\n      relsCounter += rels.length;\n    }\n    const opaqueIDs = [];\n    const transpIDs = [];\n    for (const [geometryID, key] of group.geometryIDs.opaque) {\n      opaqueIDs.push(geometryID, key);\n    }\n    for (const [geometryID, key] of group.geometryIDs.transparent) {\n      transpIDs.push(geometryID, key);\n    }\n    const groupID = builder.createString(group.uuid);\n    const groupName = builder.createString(group.name);\n    const ifcName = builder.createString(group.ifcMetadata.name);\n    const ifcDescription = builder.createString(group.ifcMetadata.description);\n    const ifcSchema = builder.createString(group.ifcMetadata.schema);\n    const keysIVector = G.createItemsKeysIndicesVector(builder, keyIndices);\n    const keysVector = G.createItemsKeysVector(builder, itemsKeys);\n    const relsIVector = G.createItemsRelsIndicesVector(builder, relsIndices);\n    const relsVector = G.createItemsRelsVector(builder, itemsRels);\n    const idsVector = G.createIdsVector(builder, ids);\n    const oIdsVector = G.createOpaqueGeometriesIdsVector(builder, opaqueIDs);\n    const tIdsVector = G.createTransparentGeometriesIdsVector(\n      builder,\n      transpIDs\n    );\n    const { min, max } = group.boundingBox;\n    const bbox = [min.x, min.y, min.z, max.x, max.y, max.z];\n    const bboxVector = G.createBoundingBoxVector(builder, bbox);\n    G.startFragmentsGroup(builder);\n    G.addId(builder, groupID);\n    G.addName(builder, groupName);\n    G.addIfcName(builder, ifcName);\n    G.addIfcDescription(builder, ifcDescription);\n    G.addIfcSchema(builder, ifcSchema);\n    G.addMaxExpressId(builder, group.ifcMetadata.maxExpressID);\n    G.addItems(builder, itemsVector);\n    G.addFragmentKeys(builder, fragmentKeysRef);\n    G.addIds(builder, idsVector);\n    G.addItemsKeysIndices(builder, keysIVector);\n    G.addItemsKeys(builder, keysVector);\n    G.addItemsRelsIndices(builder, relsIVector);\n    G.addItemsRels(builder, relsVector);\n    G.addCoordinationMatrix(builder, matrixVector);\n    G.addBoundingBox(builder, bboxVector);\n    G.addOpaqueGeometriesIds(builder, oIdsVector);\n    G.addTransparentGeometriesIds(builder, tIdsVector);\n    if (civilData !== null) {\n      G.addCivil(builder, civilData);\n    }\n    const result = FragmentsGroup$2.endFragmentsGroup(builder);\n    builder.finish(result);\n    return builder.asUint8Array();\n  }\n  setID(fbFragment, fragment) {\n    const id = fbFragment.id();\n    if (id) {\n      fragment.id = id;\n      fragment.mesh.uuid = id;\n    }\n  }\n  setInstances(fbFragment, fragment) {\n    const matricesData = fbFragment.matricesArray();\n    const colorData = fbFragment.colorsArray();\n    const ids = fbFragment.idsArray();\n    const itemsSize = fbFragment.itemsSizeArray();\n    if (!matricesData || !ids || !itemsSize) {\n      throw new Error(`Error: Can't load empty fragment!`);\n    }\n    const items = [];\n    let offset = 0;\n    for (let i = 0; i < itemsSize.length; i++) {\n      const id = ids[i];\n      const size = itemsSize[i];\n      const transforms = [];\n      const colorsArray = [];\n      for (let j = 0; j < size; j++) {\n        const mStart = offset * 16;\n        const matrixArray = matricesData.subarray(mStart, mStart + 17);\n        const transform = new THREE.Matrix4().fromArray(matrixArray);\n        transforms.push(transform);\n        if (colorData) {\n          const cStart = offset * 3;\n          const [r, g, b] = colorData.subarray(cStart, cStart + 4);\n          const color = new THREE.Color(r, g, b);\n          colorsArray.push(color);\n        }\n        offset++;\n      }\n      const colors = colorsArray.length ? colorsArray : void 0;\n      items.push({ id, transforms, colors });\n    }\n    fragment.add(items);\n  }\n  constructMaterials(fragment) {\n    const materials = fragment.materialsArray();\n    const matArray = [];\n    if (!materials)\n      return matArray;\n    for (let i = 0; i < materials.length; i += 5) {\n      const opacity = materials[i];\n      const transparent = Boolean(materials[i + 1]);\n      const red = materials[i + 2];\n      const green = materials[i + 3];\n      const blue = materials[i + 4];\n      const color = new THREE.Color(red, green, blue);\n      const material = new THREE.MeshLambertMaterial({\n        color,\n        opacity,\n        transparent\n      });\n      matArray.push(material);\n    }\n    return matArray;\n  }\n  constructFragmentGroup(group) {\n    const fragmentsGroup = new FragmentsGroup3();\n    const civil = group.civil();\n    if (civil) {\n      const matArray = civil.coordinationMatrixArray();\n      const coordinationMatrix = new THREE.Matrix4();\n      if (matArray) {\n        coordinationMatrix.fromArray(matArray);\n      }\n      fragmentsGroup.civilData = { alignments: /* @__PURE__ */ new Map(), coordinationMatrix };\n      const aligLength = civil.alignmentsLength();\n      for (let i = 0; i < aligLength; i++) {\n        const lineMat = new THREE.LineBasicMaterial({ color: 16777215 });\n        const alignment = new Alignment3();\n        const aligData = civil.alignments(i);\n        if (!aligData) {\n          throw new Error(\"Alignment not found!\");\n        }\n        const horLength = aligData.horizontalLength();\n        alignment.horizontal = this.constructCivilCurves(\n          aligData,\n          alignment,\n          \"horizontal\",\n          horLength,\n          lineMat\n        );\n        const verLength = aligData.verticalLength();\n        alignment.vertical = this.constructCivilCurves(\n          aligData,\n          alignment,\n          \"vertical\",\n          verLength,\n          lineMat\n        );\n        const absLength = aligData.horizontalLength();\n        alignment.absolute = this.constructCivilCurves(\n          aligData,\n          alignment,\n          \"absolute\",\n          absLength,\n          lineMat\n        );\n        alignment.initialKP = aligData.initialPk();\n        fragmentsGroup.civilData.alignments.set(i, alignment);\n      }\n    }\n    fragmentsGroup.uuid = group.id() || fragmentsGroup.uuid;\n    fragmentsGroup.name = group.name() || \"\";\n    fragmentsGroup.ifcMetadata = {\n      name: group.ifcName() || \"\",\n      description: group.ifcDescription() || \"\",\n      schema: group.ifcSchema() || \"IFC2X3\",\n      maxExpressID: group.maxExpressId() || 0\n    };\n    const defaultMatrix = new THREE.Matrix4().elements;\n    const matrixArray = group.coordinationMatrixArray() || defaultMatrix;\n    const ids = group.idsArray() || new Uint32Array();\n    const keysIndices = group.itemsKeysIndicesArray() || new Uint32Array();\n    const keysArray = group.itemsKeysArray() || new Uint32Array();\n    const relsArray = group.itemsRelsArray() || new Uint32Array();\n    const relsIndices = group.itemsRelsIndicesArray() || new Uint32Array();\n    const keysIdsString = group.fragmentKeys() || \"\";\n    const keysIdsArray = keysIdsString.split(this.fragmentIDSeparator);\n    this.setGroupData(fragmentsGroup, ids, keysIndices, keysArray, 0);\n    this.setGroupData(fragmentsGroup, ids, relsIndices, relsArray, 1);\n    const opaqueIDs = group.opaqueGeometriesIdsArray() || new Uint32Array();\n    const transpIDs = group.transparentGeometriesIdsArray() || new Uint32Array();\n    const opaque = /* @__PURE__ */ new Map();\n    for (let i = 0; i < opaqueIDs.length - 1; i += 2) {\n      const geometryID = opaqueIDs[i];\n      const key = opaqueIDs[i + 1];\n      opaque.set(geometryID, key);\n    }\n    const transparent = /* @__PURE__ */ new Map();\n    for (let i = 0; i < transpIDs.length - 1; i += 2) {\n      const geometryID = transpIDs[i];\n      const key = transpIDs[i + 1];\n      transparent.set(geometryID, key);\n    }\n    fragmentsGroup.geometryIDs = { opaque, transparent };\n    const bbox = group.boundingBoxArray() || [0, 0, 0, 0, 0, 0];\n    const [minX, minY, minZ, maxX, maxY, maxZ] = bbox;\n    fragmentsGroup.boundingBox.min.set(minX, minY, minZ);\n    fragmentsGroup.boundingBox.max.set(maxX, maxY, maxZ);\n    for (let i = 0; i < keysIdsArray.length; i++) {\n      fragmentsGroup.keyFragments.set(i, keysIdsArray[i]);\n    }\n    if (matrixArray.length === 16) {\n      fragmentsGroup.coordinationMatrix.fromArray(matrixArray);\n    }\n    return fragmentsGroup;\n  }\n  setGroupData(group, ids, indices, array, index) {\n    for (let i = 0; i < indices.length; i++) {\n      const expressID = ids[i];\n      const currentIndex = indices[i];\n      const nextIndex = indices[i + 1] || array.length;\n      const keys = [];\n      for (let j = currentIndex; j < nextIndex; j++) {\n        keys.push(array[j]);\n      }\n      if (!group.data.has(expressID)) {\n        group.data.set(expressID, [[], []]);\n      }\n      const data = group.data.get(expressID);\n      if (!data)\n        continue;\n      data[index] = keys;\n    }\n  }\n  constructGeometry(fragment) {\n    const position = fragment.positionArray() || new Float32Array();\n    const normal = fragment.normalArray() || new Float32Array();\n    const index = fragment.indexArray();\n    const groups = fragment.groupsArray();\n    if (!index)\n      throw new Error(\"Index not found!\");\n    const geometry = new THREE.BufferGeometry();\n    geometry.setIndex(Array.from(index));\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(position, 3));\n    geometry.setAttribute(\"normal\", new THREE.BufferAttribute(normal, 3));\n    if (groups) {\n      for (let i = 0; i < groups.length; i += 3) {\n        const start = groups[i];\n        const count = groups[i + 1];\n        const materialIndex = groups[i + 2];\n        geometry.addGroup(start, count, materialIndex);\n      }\n    }\n    return geometry;\n  }\n  constructCivilCurves(alignData, alignment, option, length, lineMat) {\n    const curves = [];\n    for (let i = 0; i < length; i++) {\n      const found = alignData[option](i);\n      if (!found) {\n        throw new Error(\"Curve not found!\");\n      }\n      const points = found.pointsArray();\n      if (points === null) {\n        throw new Error(\"Curve points not found!\");\n      }\n      let data = {};\n      const curveData = found.data();\n      if (curveData) {\n        data = JSON.parse(curveData);\n      }\n      const geometry = new THREE.EdgesGeometry();\n      const posAttr = new THREE.BufferAttribute(points, 3);\n      geometry.setAttribute(\"position\", posAttr);\n      const index = [];\n      for (let i2 = 0; i2 < points.length / 3 - 1; i2++) {\n        index.push(i2, i2 + 1);\n      }\n      geometry.setIndex(index);\n      const curveMesh = new CurveMesh(i, data, alignment, geometry, lineMat);\n      curves.push(curveMesh.curve);\n    }\n    return curves;\n  }\n  saveCivilCurves(curves, builder) {\n    const CC = CivilCurve$2;\n    const curvesRef = [];\n    for (const curve of curves) {\n      const attrs = curve.mesh.geometry.attributes;\n      const position = attrs.position.array;\n      const posVector = CC.createPointsVector(builder, position);\n      const dataStr = builder.createString(JSON.stringify(curve.data));\n      CC.startCivilCurve(builder);\n      CC.addPoints(builder, posVector);\n      CC.addData(builder, dataStr);\n      const exported = CC.endCivilCurve(builder);\n      curvesRef.push(exported);\n    }\n    return curvesRef;\n  }\n}\nlet CivilCurve$1 = class CivilCurve2 {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsCivilCurve(bb, obj) {\n    return (obj || new CivilCurve2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsCivilCurve(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new CivilCurve2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  points(index) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  pointsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  pointsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  data(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  static startCivilCurve(builder) {\n    builder.startObject(2);\n  }\n  static addPoints(builder, pointsOffset) {\n    builder.addFieldOffset(0, pointsOffset, 0);\n  }\n  static createPointsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startPointsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addData(builder, dataOffset) {\n    builder.addFieldOffset(1, dataOffset, 0);\n  }\n  static endCivilCurve(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createCivilCurve(builder, pointsOffset, dataOffset) {\n    CivilCurve2.startCivilCurve(builder);\n    CivilCurve2.addPoints(builder, pointsOffset);\n    CivilCurve2.addData(builder, dataOffset);\n    return CivilCurve2.endCivilCurve(builder);\n  }\n};\nlet Alignment$1 = class Alignment2 {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsAlignment(bb, obj) {\n    return (obj || new Alignment2()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsAlignment(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new Alignment2()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  vertical(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new CivilCurve$1()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  verticalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  horizontal(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? (obj || new CivilCurve$1()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  horizontalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  absolute(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? (obj || new CivilCurve$1()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  absoluteLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  initialPk() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;\n  }\n  static startAlignment(builder) {\n    builder.startObject(4);\n  }\n  static addVertical(builder, verticalOffset) {\n    builder.addFieldOffset(0, verticalOffset, 0);\n  }\n  static createVerticalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startVerticalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addHorizontal(builder, horizontalOffset) {\n    builder.addFieldOffset(1, horizontalOffset, 0);\n  }\n  static createHorizontalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startHorizontalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addAbsolute(builder, absoluteOffset) {\n    builder.addFieldOffset(2, absoluteOffset, 0);\n  }\n  static createAbsoluteVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startAbsoluteVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addInitialPk(builder, initialPk) {\n    builder.addFieldFloat32(3, initialPk, 0);\n  }\n  static endAlignment(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createAlignment(builder, verticalOffset, horizontalOffset, absoluteOffset, initialPk) {\n    Alignment2.startAlignment(builder);\n    Alignment2.addVertical(builder, verticalOffset);\n    Alignment2.addHorizontal(builder, horizontalOffset);\n    Alignment2.addAbsolute(builder, absoluteOffset);\n    Alignment2.addInitialPk(builder, initialPk);\n    return Alignment2.endAlignment(builder);\n  }\n};\nclass CivilData2 {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsCivilData(bb, obj) {\n    return (obj || new CivilData2()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsCivilData(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new CivilData2()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  alignments(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new Alignment$1()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  alignmentsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  coordinationMatrix(index) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  coordinationMatrixLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  coordinationMatrixArray() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  static startCivilData(builder) {\n    builder.startObject(2);\n  }\n  static addAlignments(builder, alignmentsOffset) {\n    builder.addFieldOffset(0, alignmentsOffset, 0);\n  }\n  static createAlignmentsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startAlignmentsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addCoordinationMatrix(builder, coordinationMatrixOffset) {\n    builder.addFieldOffset(1, coordinationMatrixOffset, 0);\n  }\n  static createCoordinationMatrixVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startCoordinationMatrixVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static endCivilData(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createCivilData(builder, alignmentsOffset, coordinationMatrixOffset) {\n    CivilData2.startCivilData(builder);\n    CivilData2.addAlignments(builder, alignmentsOffset);\n    CivilData2.addCoordinationMatrix(builder, coordinationMatrixOffset);\n    return CivilData2.endCivilData(builder);\n  }\n}\nclass Fragment3 {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsFragment(bb, obj) {\n    return (obj || new Fragment3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsFragment(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new Fragment3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  position(index) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  positionLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  positionArray() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  normal(index) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  normalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  normalArray() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  index(index) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  indexLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  indexArray() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  groups(index) {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  groupsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  groupsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  materials(index) {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  materialsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  materialsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  matrices(index) {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  matricesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  matricesArray() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  colors(index) {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  colorsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  colorsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  itemsSize(index) {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsSizeLength() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsSizeArray() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  ids(index) {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  idsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  idsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n  }\n  id(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 22);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  capacity() {\n    const offset = this.bb.__offset(this.bb_pos, 24);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  capacityOffset() {\n    const offset = this.bb.__offset(this.bb_pos, 26);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  static startFragment(builder) {\n    builder.startObject(12);\n  }\n  static addPosition(builder, positionOffset) {\n    builder.addFieldOffset(0, positionOffset, 0);\n  }\n  static createPositionVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startPositionVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addNormal(builder, normalOffset) {\n    builder.addFieldOffset(1, normalOffset, 0);\n  }\n  static createNormalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startNormalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIndex(builder, indexOffset) {\n    builder.addFieldOffset(2, indexOffset, 0);\n  }\n  static createIndexVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIndexVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addGroups(builder, groupsOffset) {\n    builder.addFieldOffset(3, groupsOffset, 0);\n  }\n  static createGroupsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startGroupsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addMaterials(builder, materialsOffset) {\n    builder.addFieldOffset(4, materialsOffset, 0);\n  }\n  static createMaterialsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startMaterialsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addMatrices(builder, matricesOffset) {\n    builder.addFieldOffset(5, matricesOffset, 0);\n  }\n  static createMatricesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startMatricesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addColors(builder, colorsOffset) {\n    builder.addFieldOffset(6, colorsOffset, 0);\n  }\n  static createColorsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startColorsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsSize(builder, itemsSizeOffset) {\n    builder.addFieldOffset(7, itemsSizeOffset, 0);\n  }\n  static createItemsSizeVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsSizeVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIds(builder, idsOffset) {\n    builder.addFieldOffset(8, idsOffset, 0);\n  }\n  static createIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addId(builder, idOffset) {\n    builder.addFieldOffset(9, idOffset, 0);\n  }\n  static addCapacity(builder, capacity) {\n    builder.addFieldInt32(10, capacity, 0);\n  }\n  static addCapacityOffset(builder, capacityOffset) {\n    builder.addFieldInt32(11, capacityOffset, 0);\n  }\n  static endFragment(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createFragment(builder, positionOffset, normalOffset, indexOffset, groupsOffset, materialsOffset, matricesOffset, colorsOffset, itemsSizeOffset, idsOffset, idOffset, capacity, capacityOffset) {\n    Fragment3.startFragment(builder);\n    Fragment3.addPosition(builder, positionOffset);\n    Fragment3.addNormal(builder, normalOffset);\n    Fragment3.addIndex(builder, indexOffset);\n    Fragment3.addGroups(builder, groupsOffset);\n    Fragment3.addMaterials(builder, materialsOffset);\n    Fragment3.addMatrices(builder, matricesOffset);\n    Fragment3.addColors(builder, colorsOffset);\n    Fragment3.addItemsSize(builder, itemsSizeOffset);\n    Fragment3.addIds(builder, idsOffset);\n    Fragment3.addId(builder, idOffset);\n    Fragment3.addCapacity(builder, capacity);\n    Fragment3.addCapacityOffset(builder, capacityOffset);\n    return Fragment3.endFragment(builder);\n  }\n}\nlet FragmentsGroup$1 = class FragmentsGroup2 {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsFragmentsGroup(bb, obj) {\n    return (obj || new FragmentsGroup2()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsFragmentsGroup(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new FragmentsGroup2()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  items(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new Fragment3()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  itemsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  civil(obj) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? (obj || new CivilData2()).__init(\n      this.bb.__indirect(this.bb_pos + offset),\n      this.bb\n    ) : null;\n  }\n  coordinationMatrix(index) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  coordinationMatrixLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  coordinationMatrixArray() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  ids(index) {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  idsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  idsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsKeys(index) {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsKeysLength() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsKeysArray() {\n    const offset = this.bb.__offset(this.bb_pos, 12);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsKeysIndices(index) {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsKeysIndicesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsKeysIndicesArray() {\n    const offset = this.bb.__offset(this.bb_pos, 14);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsRels(index) {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsRelsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsRelsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 16);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  itemsRelsIndices(index) {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  itemsRelsIndicesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  itemsRelsIndicesArray() {\n    const offset = this.bb.__offset(this.bb_pos, 18);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  fragmentKeys(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 20);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  globalIds(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 22);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  id(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 24);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  name(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 26);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  ifcName(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 28);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  ifcDescription(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 30);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  ifcSchema(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 32);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  maxExpressId() {\n    const offset = this.bb.__offset(this.bb_pos, 34);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  boundingBox(index) {\n    const offset = this.bb.__offset(this.bb_pos, 36);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  boundingBoxLength() {\n    const offset = this.bb.__offset(this.bb_pos, 36);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  boundingBoxArray() {\n    const offset = this.bb.__offset(this.bb_pos, 36);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  opaqueGeometriesIds(index) {\n    const offset = this.bb.__offset(this.bb_pos, 38);\n    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  opaqueGeometriesIdsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 38);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  opaqueGeometriesIdsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 38);\n    return offset ? new Int32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  transparentGeometriesIds(index) {\n    const offset = this.bb.__offset(this.bb_pos, 40);\n    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  transparentGeometriesIdsLength() {\n    const offset = this.bb.__offset(this.bb_pos, 40);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  transparentGeometriesIdsArray() {\n    const offset = this.bb.__offset(this.bb_pos, 40);\n    return offset ? new Int32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  static startFragmentsGroup(builder) {\n    builder.startObject(19);\n  }\n  static addItems(builder, itemsOffset) {\n    builder.addFieldOffset(0, itemsOffset, 0);\n  }\n  static createItemsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addCivil(builder, civilOffset) {\n    builder.addFieldOffset(1, civilOffset, 0);\n  }\n  static addCoordinationMatrix(builder, coordinationMatrixOffset) {\n    builder.addFieldOffset(2, coordinationMatrixOffset, 0);\n  }\n  static createCoordinationMatrixVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startCoordinationMatrixVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIds(builder, idsOffset) {\n    builder.addFieldOffset(3, idsOffset, 0);\n  }\n  static createIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsKeys(builder, itemsKeysOffset) {\n    builder.addFieldOffset(4, itemsKeysOffset, 0);\n  }\n  static createItemsKeysVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsKeysVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsKeysIndices(builder, itemsKeysIndicesOffset) {\n    builder.addFieldOffset(5, itemsKeysIndicesOffset, 0);\n  }\n  static createItemsKeysIndicesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsKeysIndicesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsRels(builder, itemsRelsOffset) {\n    builder.addFieldOffset(6, itemsRelsOffset, 0);\n  }\n  static createItemsRelsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsRelsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addItemsRelsIndices(builder, itemsRelsIndicesOffset) {\n    builder.addFieldOffset(7, itemsRelsIndicesOffset, 0);\n  }\n  static createItemsRelsIndicesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startItemsRelsIndicesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addFragmentKeys(builder, fragmentKeysOffset) {\n    builder.addFieldOffset(8, fragmentKeysOffset, 0);\n  }\n  static addGlobalIds(builder, globalIdsOffset) {\n    builder.addFieldOffset(9, globalIdsOffset, 0);\n  }\n  static addId(builder, idOffset) {\n    builder.addFieldOffset(10, idOffset, 0);\n  }\n  static addName(builder, nameOffset) {\n    builder.addFieldOffset(11, nameOffset, 0);\n  }\n  static addIfcName(builder, ifcNameOffset) {\n    builder.addFieldOffset(12, ifcNameOffset, 0);\n  }\n  static addIfcDescription(builder, ifcDescriptionOffset) {\n    builder.addFieldOffset(13, ifcDescriptionOffset, 0);\n  }\n  static addIfcSchema(builder, ifcSchemaOffset) {\n    builder.addFieldOffset(14, ifcSchemaOffset, 0);\n  }\n  static addMaxExpressId(builder, maxExpressId) {\n    builder.addFieldInt32(15, maxExpressId, 0);\n  }\n  static addBoundingBox(builder, boundingBoxOffset) {\n    builder.addFieldOffset(16, boundingBoxOffset, 0);\n  }\n  static createBoundingBoxVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startBoundingBoxVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addOpaqueGeometriesIds(builder, opaqueGeometriesIdsOffset) {\n    builder.addFieldOffset(17, opaqueGeometriesIdsOffset, 0);\n  }\n  static createOpaqueGeometriesIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startOpaqueGeometriesIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addTransparentGeometriesIds(builder, transparentGeometriesIdsOffset) {\n    builder.addFieldOffset(18, transparentGeometriesIdsOffset, 0);\n  }\n  static createTransparentGeometriesIdsVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startTransparentGeometriesIdsVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static endFragmentsGroup(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static finishFragmentsGroupBuffer(builder, offset) {\n    builder.finish(offset);\n  }\n  static finishSizePrefixedFragmentsGroupBuffer(builder, offset) {\n    builder.finish(offset, void 0, true);\n  }\n};\nclass ParserV2 {\n  constructor() {\n    __publicField(this, \"version\", 2);\n    __publicField(this, \"separator\", \"|\");\n  }\n  /** {@link FragmentParser.import} */\n  import(bytes) {\n    const buffer = new ByteBuffer(bytes);\n    const fbFragmentsGroup = FragmentsGroup$1.getRootAsFragmentsGroup(buffer);\n    const fragmentsGroup = this.constructFragmentGroup(fbFragmentsGroup);\n    const length = fbFragmentsGroup.itemsLength();\n    for (let i = 0; i < length; i++) {\n      const fbFragment = fbFragmentsGroup.items(i);\n      if (!fbFragment)\n        continue;\n      const geometry = this.constructGeometry(fbFragment);\n      const materials = this.constructMaterials(fbFragment);\n      const capacity = fbFragment.capacity();\n      const fragment = new Fragment$2(geometry, materials, capacity);\n      fragment.capacityOffset = fbFragment.capacityOffset();\n      this.setInstances(fbFragment, fragment);\n      this.setID(fbFragment, fragment);\n      fragmentsGroup.items.push(fragment);\n      fragmentsGroup.add(fragment.mesh);\n    }\n    return fragmentsGroup;\n  }\n  /**\n   * Exports the FragmentsGroup to a flatbuffer binary file.\n   *\n   * @param group - The FragmentsGroup to be exported.\n   * @returns The flatbuffer binary file as a Uint8Array.\n   */\n  export(group) {\n    const builder = new Builder(1024);\n    const items = [];\n    const G = FragmentsGroup$1;\n    const F = Fragment3;\n    let civilData = null;\n    if (group.civilData) {\n      const alignments = [];\n      const A = Alignment$1;\n      const C = CivilData2;\n      for (const [_id, alignment] of group.civilData.alignments) {\n        const { absolute, horizontal, vertical } = alignment;\n        const horCurves = this.saveCivilCurves(horizontal, builder);\n        const verCurves = this.saveCivilCurves(vertical, builder);\n        const absCurves = this.saveCivilCurves(absolute, builder);\n        const horVector = A.createHorizontalVector(builder, horCurves);\n        const verVector = A.createVerticalVector(builder, verCurves);\n        const absVector = A.createAbsoluteVector(builder, absCurves);\n        A.startAlignment(builder);\n        A.addHorizontal(builder, horVector);\n        A.addVertical(builder, verVector);\n        A.addAbsolute(builder, absVector);\n        A.addInitialPk(builder, alignment.initialKP);\n        const exported = A.endAlignment(builder);\n        alignments.push(exported);\n      }\n      const algVector = C.createAlignmentsVector(builder, alignments);\n      const coordVector = C.createCoordinationMatrixVector(\n        builder,\n        group.coordinationMatrix.elements\n      );\n      C.startCivilData(builder);\n      C.addAlignments(builder, algVector);\n      C.addCoordinationMatrix(builder, coordVector);\n      civilData = C.endCivilData(builder);\n    }\n    for (const fragment of group.items) {\n      const result2 = fragment.exportData();\n      const itemsSize = [];\n      for (const itemID of fragment.ids) {\n        const instances = fragment.getInstancesIDs(itemID);\n        if (!instances) {\n          throw new Error(\"Instances not found!\");\n        }\n        itemsSize.push(instances.size);\n      }\n      const posVector = F.createPositionVector(builder, result2.position);\n      const normalVector = F.createNormalVector(builder, result2.normal);\n      const indexVector = F.createIndexVector(builder, result2.index);\n      const groupsVector = F.createGroupsVector(builder, result2.groups);\n      const matsVector = F.createMaterialsVector(builder, result2.materials);\n      const matricesVector = F.createMatricesVector(builder, result2.matrices);\n      const colorsVector = F.createColorsVector(builder, result2.colors);\n      const idsVector2 = F.createIdsVector(builder, result2.ids);\n      const itemsSizeVector = F.createItemsSizeVector(builder, itemsSize);\n      const idStr = builder.createString(result2.id);\n      F.startFragment(builder);\n      F.addPosition(builder, posVector);\n      F.addNormal(builder, normalVector);\n      F.addIndex(builder, indexVector);\n      F.addGroups(builder, groupsVector);\n      F.addMaterials(builder, matsVector);\n      F.addMatrices(builder, matricesVector);\n      F.addColors(builder, colorsVector);\n      F.addIds(builder, idsVector2);\n      F.addItemsSize(builder, itemsSizeVector);\n      F.addId(builder, idStr);\n      F.addCapacity(builder, fragment.capacity);\n      F.addCapacityOffset(builder, fragment.capacityOffset);\n      const exported = Fragment3.endFragment(builder);\n      items.push(exported);\n    }\n    const itemsVector = G.createItemsVector(builder, items);\n    const matrixVector = G.createCoordinationMatrixVector(\n      builder,\n      group.coordinationMatrix.elements\n    );\n    let fragmentKeys = \"\";\n    for (const fragmentID of group.keyFragments.values()) {\n      if (fragmentKeys.length) {\n        fragmentKeys += this.separator;\n      }\n      fragmentKeys += fragmentID;\n    }\n    let globalIDs = \"\";\n    for (const [globalID] of group.globalToExpressIDs) {\n      if (globalIDs.length) {\n        globalIDs += this.separator;\n      }\n      globalIDs += globalID;\n    }\n    const fragmentKeysRef = builder.createString(fragmentKeys);\n    const globalIDsRef = builder.createString(globalIDs);\n    const keyIndices = [];\n    const itemsKeys = [];\n    const relsIndices = [];\n    const itemsRels = [];\n    const ids = [];\n    let keysCounter = 0;\n    let relsCounter = 0;\n    for (const [expressID, [keys, rels]] of group.data) {\n      keyIndices.push(keysCounter);\n      relsIndices.push(relsCounter);\n      ids.push(expressID);\n      for (const key of keys) {\n        itemsKeys.push(key);\n      }\n      for (const rel of rels) {\n        itemsRels.push(rel);\n      }\n      keysCounter += keys.length;\n      relsCounter += rels.length;\n    }\n    const opaqueIDs = [];\n    const transpIDs = [];\n    for (const [geometryID, key] of group.geometryIDs.opaque) {\n      opaqueIDs.push(geometryID, key);\n    }\n    for (const [geometryID, key] of group.geometryIDs.transparent) {\n      transpIDs.push(geometryID, key);\n    }\n    const groupID = builder.createString(group.uuid);\n    const groupName = builder.createString(group.name);\n    const ifcName = builder.createString(group.ifcMetadata.name);\n    const ifcDescription = builder.createString(group.ifcMetadata.description);\n    const ifcSchema = builder.createString(group.ifcMetadata.schema);\n    const keysIVector = G.createItemsKeysIndicesVector(builder, keyIndices);\n    const keysVector = G.createItemsKeysVector(builder, itemsKeys);\n    const relsIVector = G.createItemsRelsIndicesVector(builder, relsIndices);\n    const relsVector = G.createItemsRelsVector(builder, itemsRels);\n    const idsVector = G.createIdsVector(builder, ids);\n    const oIdsVector = G.createOpaqueGeometriesIdsVector(builder, opaqueIDs);\n    const tIdsVector = G.createTransparentGeometriesIdsVector(\n      builder,\n      transpIDs\n    );\n    const { min, max } = group.boundingBox;\n    const bbox = [min.x, min.y, min.z, max.x, max.y, max.z];\n    const bboxVector = G.createBoundingBoxVector(builder, bbox);\n    G.startFragmentsGroup(builder);\n    G.addId(builder, groupID);\n    G.addName(builder, groupName);\n    G.addIfcName(builder, ifcName);\n    G.addIfcDescription(builder, ifcDescription);\n    G.addIfcSchema(builder, ifcSchema);\n    G.addMaxExpressId(builder, group.ifcMetadata.maxExpressID);\n    G.addItems(builder, itemsVector);\n    G.addFragmentKeys(builder, fragmentKeysRef);\n    G.addGlobalIds(builder, globalIDsRef);\n    G.addIds(builder, idsVector);\n    G.addItemsKeysIndices(builder, keysIVector);\n    G.addItemsKeys(builder, keysVector);\n    G.addItemsRelsIndices(builder, relsIVector);\n    G.addItemsRels(builder, relsVector);\n    G.addCoordinationMatrix(builder, matrixVector);\n    G.addBoundingBox(builder, bboxVector);\n    G.addOpaqueGeometriesIds(builder, oIdsVector);\n    G.addTransparentGeometriesIds(builder, tIdsVector);\n    if (civilData !== null) {\n      G.addCivil(builder, civilData);\n    }\n    const result = FragmentsGroup$1.endFragmentsGroup(builder);\n    builder.finish(result);\n    return builder.asUint8Array();\n  }\n  setID(fbFragment, fragment) {\n    const id = fbFragment.id();\n    if (id) {\n      fragment.id = id;\n      fragment.mesh.uuid = id;\n    }\n  }\n  setInstances(fbFragment, fragment) {\n    const matricesData = fbFragment.matricesArray();\n    const colorData = fbFragment.colorsArray();\n    const ids = fbFragment.idsArray();\n    const itemsSize = fbFragment.itemsSizeArray();\n    if (!matricesData || !ids || !itemsSize) {\n      throw new Error(`Error: Can't load empty fragment!`);\n    }\n    const items = [];\n    let offset = 0;\n    for (let i = 0; i < itemsSize.length; i++) {\n      const id = ids[i];\n      const size = itemsSize[i];\n      const transforms = [];\n      const colorsArray = [];\n      for (let j = 0; j < size; j++) {\n        const mStart = offset * 16;\n        const matrixArray = matricesData.subarray(mStart, mStart + 17);\n        const transform = new THREE.Matrix4().fromArray(matrixArray);\n        transforms.push(transform);\n        if (colorData) {\n          const cStart = offset * 3;\n          const [r, g, b] = colorData.subarray(cStart, cStart + 4);\n          const color = new THREE.Color(r, g, b);\n          colorsArray.push(color);\n        }\n        offset++;\n      }\n      const colors = colorsArray.length ? colorsArray : void 0;\n      items.push({ id, transforms, colors });\n    }\n    fragment.add(items);\n  }\n  constructMaterials(fragment) {\n    const materials = fragment.materialsArray();\n    const matArray = [];\n    if (!materials)\n      return matArray;\n    for (let i = 0; i < materials.length; i += 5) {\n      const opacity = materials[i];\n      const transparent = Boolean(materials[i + 1]);\n      const red = materials[i + 2];\n      const green = materials[i + 3];\n      const blue = materials[i + 4];\n      const color = new THREE.Color(red, green, blue);\n      const material = new THREE.MeshLambertMaterial({\n        color,\n        opacity,\n        transparent\n      });\n      matArray.push(material);\n    }\n    return matArray;\n  }\n  constructFragmentGroup(group) {\n    const fragmentsGroup = new FragmentsGroup3();\n    const civil = group.civil();\n    if (civil) {\n      const matArray = civil.coordinationMatrixArray();\n      const coordinationMatrix = new THREE.Matrix4();\n      if (matArray) {\n        coordinationMatrix.fromArray(matArray);\n      }\n      fragmentsGroup.civilData = { alignments: /* @__PURE__ */ new Map(), coordinationMatrix };\n      const aligLength = civil.alignmentsLength();\n      for (let i = 0; i < aligLength; i++) {\n        const lineMat = new THREE.LineBasicMaterial({ color: 16777215 });\n        const alignment = new Alignment3();\n        const aligData = civil.alignments(i);\n        if (!aligData) {\n          throw new Error(\"Alignment not found!\");\n        }\n        const horLength = aligData.horizontalLength();\n        alignment.horizontal = this.constructCivilCurves(\n          aligData,\n          alignment,\n          \"horizontal\",\n          horLength,\n          lineMat\n        );\n        const verLength = aligData.verticalLength();\n        alignment.vertical = this.constructCivilCurves(\n          aligData,\n          alignment,\n          \"vertical\",\n          verLength,\n          lineMat\n        );\n        const absLength = aligData.horizontalLength();\n        alignment.absolute = this.constructCivilCurves(\n          aligData,\n          alignment,\n          \"absolute\",\n          absLength,\n          lineMat\n        );\n        alignment.initialKP = aligData.initialPk();\n        fragmentsGroup.civilData.alignments.set(i, alignment);\n      }\n    }\n    fragmentsGroup.uuid = group.id() || fragmentsGroup.uuid;\n    fragmentsGroup.name = group.name() || \"\";\n    fragmentsGroup.ifcMetadata = {\n      name: group.ifcName() || \"\",\n      description: group.ifcDescription() || \"\",\n      schema: group.ifcSchema() || \"IFC2X3\",\n      maxExpressID: group.maxExpressId() || 0\n    };\n    const defaultMatrix = new THREE.Matrix4().elements;\n    const matrixArray = group.coordinationMatrixArray() || defaultMatrix;\n    const ids = group.idsArray() || new Uint32Array();\n    const keysIndices = group.itemsKeysIndicesArray() || new Uint32Array();\n    const keysArray = group.itemsKeysArray() || new Uint32Array();\n    const relsArray = group.itemsRelsArray() || new Uint32Array();\n    const relsIndices = group.itemsRelsIndicesArray() || new Uint32Array();\n    const keysIdsString = group.fragmentKeys() || \"\";\n    const keysIdsArray = keysIdsString.split(this.separator);\n    const globalIdsString = group.globalIds() || \"\";\n    const globalIdsArray = globalIdsString.split(this.separator);\n    this.setGroupData(fragmentsGroup, ids, keysIndices, keysArray, 0);\n    this.setGroupData(fragmentsGroup, ids, relsIndices, relsArray, 1);\n    const opaqueIDs = group.opaqueGeometriesIdsArray() || new Uint32Array();\n    const transpIDs = group.transparentGeometriesIdsArray() || new Uint32Array();\n    const opaque = /* @__PURE__ */ new Map();\n    for (let i = 0; i < opaqueIDs.length - 1; i += 2) {\n      const geometryID = opaqueIDs[i];\n      const key = opaqueIDs[i + 1];\n      opaque.set(geometryID, key);\n    }\n    const transparent = /* @__PURE__ */ new Map();\n    for (let i = 0; i < transpIDs.length - 1; i += 2) {\n      const geometryID = transpIDs[i];\n      const key = transpIDs[i + 1];\n      transparent.set(geometryID, key);\n    }\n    fragmentsGroup.geometryIDs = { opaque, transparent };\n    const bbox = group.boundingBoxArray() || [0, 0, 0, 0, 0, 0];\n    const [minX, minY, minZ, maxX, maxY, maxZ] = bbox;\n    fragmentsGroup.boundingBox.min.set(minX, minY, minZ);\n    fragmentsGroup.boundingBox.max.set(maxX, maxY, maxZ);\n    for (let i = 0; i < keysIdsArray.length; i++) {\n      fragmentsGroup.keyFragments.set(i, keysIdsArray[i]);\n    }\n    if (matrixArray.length === 16) {\n      fragmentsGroup.coordinationMatrix.fromArray(matrixArray);\n    }\n    for (let i = 0; i < ids.length; i++) {\n      fragmentsGroup.globalToExpressIDs.set(globalIdsArray[i], ids[i]);\n    }\n    return fragmentsGroup;\n  }\n  setGroupData(group, ids, indices, array, index) {\n    for (let i = 0; i < indices.length; i++) {\n      const expressID = ids[i];\n      const currentIndex = indices[i];\n      const next = indices[i + 1];\n      const nextIndex = next === void 0 ? array.length : next;\n      const keys = [];\n      for (let j = currentIndex; j < nextIndex; j++) {\n        keys.push(array[j]);\n      }\n      if (!group.data.has(expressID)) {\n        group.data.set(expressID, [[], []]);\n      }\n      const data = group.data.get(expressID);\n      if (!data)\n        continue;\n      data[index] = keys;\n    }\n  }\n  constructGeometry(fragment) {\n    const position = fragment.positionArray() || new Float32Array();\n    const normal = fragment.normalArray() || new Float32Array();\n    const index = fragment.indexArray();\n    const groups = fragment.groupsArray();\n    if (!index)\n      throw new Error(\"Index not found!\");\n    const geometry = new THREE.BufferGeometry();\n    geometry.setIndex(Array.from(index));\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(position, 3));\n    geometry.setAttribute(\"normal\", new THREE.BufferAttribute(normal, 3));\n    if (groups) {\n      for (let i = 0; i < groups.length; i += 3) {\n        const start = groups[i];\n        const count = groups[i + 1];\n        const materialIndex = groups[i + 2];\n        geometry.addGroup(start, count, materialIndex);\n      }\n    }\n    return geometry;\n  }\n  constructCivilCurves(alignData, alignment, option, length, lineMat) {\n    const curves = [];\n    for (let i = 0; i < length; i++) {\n      const found = alignData[option](i);\n      if (!found) {\n        throw new Error(\"Curve not found!\");\n      }\n      const points = found.pointsArray();\n      if (points === null) {\n        throw new Error(\"Curve points not found!\");\n      }\n      let data = {};\n      const curveData = found.data();\n      if (curveData) {\n        data = JSON.parse(curveData);\n      }\n      const geometry = new THREE.EdgesGeometry();\n      const posAttr = new THREE.BufferAttribute(points, 3);\n      geometry.setAttribute(\"position\", posAttr);\n      const index = [];\n      for (let i2 = 0; i2 < points.length / 3 - 1; i2++) {\n        index.push(i2, i2 + 1);\n      }\n      geometry.setIndex(index);\n      const curveMesh = new CurveMesh(i, data, alignment, geometry, lineMat);\n      curves.push(curveMesh.curve);\n    }\n    return curves;\n  }\n  saveCivilCurves(curves, builder) {\n    const CC = CivilCurve$1;\n    const curvesRef = [];\n    for (const curve of curves) {\n      const attrs = curve.mesh.geometry.attributes;\n      const position = attrs.position.array;\n      const posVector = CC.createPointsVector(builder, position);\n      const dataStr = builder.createString(JSON.stringify(curve.data));\n      CC.startCivilCurve(builder);\n      CC.addPoints(builder, posVector);\n      CC.addData(builder, dataStr);\n      const exported = CC.endCivilCurve(builder);\n      curvesRef.push(exported);\n    }\n    return curvesRef;\n  }\n}\nclass Serializer {\n  constructor() {\n    // prettier-ignore\n    __publicField(this, \"parsers\", [\n      new ParserV2(),\n      new ParserV1()\n    ]);\n    /** {@link FragmentParser.version} */\n    __publicField(this, \"version\", \"auto\");\n  }\n  /** {@link FragmentParser.import} */\n  import(bytes) {\n    const latestVersion = this.parsers.length;\n    if (this.version === \"auto\") {\n      for (let i = 0; i < this.parsers.length; i++) {\n        const parser2 = this.parsers[i];\n        const result2 = parser2.import(bytes);\n        if (Object.keys(result2).length === 0) {\n          continue;\n        }\n        if (i !== 0) {\n          const version = this.parsers.length - i;\n          this.warnVersion(version, latestVersion);\n        }\n        return result2;\n      }\n      throw new Error(\"No valid parser found for this file\");\n    }\n    this.checkCurrentVersionValid(this.version);\n    const index = this.parsers.length - this.version;\n    const parser = this.parsers[index];\n    const result = parser.import(bytes);\n    if (Object.keys(result).length === 0) {\n      throw new Error(\n        `The given version ${this.version} doesn't match to the given file. Try using \"auto\" in the version property to handle versions automatically.`\n      );\n    }\n    return result;\n  }\n  /** {@link FragmentParser.export} */\n  export(group) {\n    if (this.version === \"auto\") {\n      const latestParser = this.parsers[0];\n      return latestParser.export(group);\n    }\n    this.checkCurrentVersionValid(this.version);\n    const index = this.parsers.length - this.version;\n    const parser = this.parsers[index];\n    return parser.export(group);\n  }\n  checkCurrentVersionValid(latestVersion) {\n    if (this.version === \"auto\")\n      return;\n    if (this.version !== latestVersion) {\n      this.warnVersion(this.version, latestVersion);\n    }\n    const isInteger = Number.isInteger(this.version);\n    if (!isInteger) {\n      throw new Error(\n        `Invalid version. Non-automatic versions must an integer.`\n      );\n    }\n    if (this.version < 1 || this.version > latestVersion) {\n      throw new Error(\n        `Invalid version. Versions range from 1 to ${latestVersion}.`\n      );\n    }\n  }\n  warnVersion(version, latestVersion) {\n    console.warn(\n      `This fragment file version is ${version}. The latest version is ${latestVersion}. To avoid issues, please consider updating your fragments. You can do so by regenerating your fragments from the original IFC file.`\n    );\n  }\n}\nclass StreamerFileDb {\n  constructor(baseDirectory) {\n    __publicField(this, \"baseDirectory\");\n    __publicField(this, \"maxDeadTime\", 6e4);\n    __publicField(this, \"mode\", \"buffer\");\n    __publicField(this, \"_memoryCleanTime\", 1e4);\n    __publicField(this, \"_intervalID\", null);\n    __publicField(this, \"_isCleaningMemory\", false);\n    __publicField(this, \"cleanMemory\", async () => {\n      if (this._isCleaningMemory) {\n        return;\n      }\n      this._isCleaningMemory = true;\n      const rootDir = await this.getDir(this.baseDirectory);\n      const filesToDelete = /* @__PURE__ */ new Set();\n      const now = (/* @__PURE__ */ new Date()).getTime();\n      for await (const entry of rootDir.values()) {\n        const serializedLastAccessed = localStorage.getItem(entry.name) || \"0\";\n        const lastAccess = parseInt(serializedLastAccessed, 10);\n        const deadTime = now - lastAccess;\n        if (deadTime > this.maxDeadTime) {\n          filesToDelete.add(entry.name);\n          localStorage.removeItem(entry.name);\n        }\n      }\n      for (const name of filesToDelete) {\n        rootDir.removeEntry(name);\n      }\n      this._isCleaningMemory = false;\n    });\n    this.baseDirectory = baseDirectory;\n    this.setupMemoryCleanup();\n  }\n  get memoryCleanTime() {\n    return this._memoryCleanTime;\n  }\n  set memoryCleanTime(value) {\n    this._memoryCleanTime = value;\n    this.dispose();\n    this.setupMemoryCleanup();\n  }\n  isCached(name) {\n    const encodedName = this.encodeName(name);\n    return localStorage.getItem(encodedName) !== null;\n  }\n  async get(name) {\n    const encodedName = this.encodeName(name);\n    const baseDir = await this.getDir(this.baseDirectory);\n    try {\n      const fileHandle = await baseDir.getFileHandle(encodedName);\n      const file = await fileHandle.getFile();\n      this.updateLastAccessTime(encodedName);\n      return file;\n    } catch (e) {\n      return null;\n    }\n  }\n  async add(name, buffer) {\n    const encodedName = this.encodeName(name);\n    const baseDir = await this.getDir(this.baseDirectory);\n    const fileHandle = await baseDir.getFileHandle(encodedName, {\n      create: true\n    });\n    const writable = await fileHandle.createWritable();\n    await writable.write(buffer);\n    await writable.close();\n    this.updateLastAccessTime(encodedName);\n  }\n  async clear() {\n    const baseDir = await this.getDir(this.baseDirectory);\n    for await (const [name] of baseDir.entries()) {\n      await baseDir.removeEntry(name);\n    }\n  }\n  dispose() {\n    if (this._intervalID !== null) {\n      window.clearInterval(this._intervalID);\n    }\n  }\n  setupMemoryCleanup() {\n    this._intervalID = window.setInterval(\n      this.cleanMemory,\n      this.memoryCleanTime\n    );\n  }\n  async getDir(path) {\n    const root = await navigator.storage.getDirectory();\n    return root.getDirectoryHandle(path, {\n      create: true\n    });\n  }\n  encodeName(name) {\n    const illegalChars = /[\\\\/:*?\"<>|]/g;\n    return name.replace(illegalChars, \"ñ\");\n  }\n  updateLastAccessTime(encodedName) {\n    const now = (/* @__PURE__ */ new Date()).getTime().toString();\n    localStorage.setItem(encodedName, now);\n  }\n}\nconst _FragmentsGroup = class _FragmentsGroup extends THREE.Group {\n  constructor() {\n    super(...arguments);\n    /**\n     * An array of Fragment objects that are part of this group.\n     */\n    __publicField(this, \"items\", []);\n    /**\n     * A THREE.Box3 object representing the bounding box of all fragments in this group.\n     */\n    __publicField(this, \"boundingBox\", new THREE.Box3());\n    /**\n     * A THREE.Matrix4 object representing the coordination matrix of this group.\n     */\n    __publicField(this, \"coordinationMatrix\", new THREE.Matrix4());\n    /**\n     * A Map object where the keys are uints and the values are strings representing fragment IDs.\n     * This is used to save memory by mapping keys to fragment IDs.\n     */\n    __publicField(this, \"keyFragments\", /* @__PURE__ */ new Map());\n    /**\n     * A Map object where the keys are global IDs and the values are expressIDs.\n     */\n    __publicField(this, \"globalToExpressIDs\", /* @__PURE__ */ new Map());\n    /**\n     * A Map object where the keys are express IDs and the values are arrays of two arrays.\n     * The first array contains fragment keys to which this asset belongs, and the second array contains floor and category IDs.\n     */\n    __publicField(this, \"data\", /* @__PURE__ */ new Map());\n    /**\n     * An object with two Map properties, 'opaque' and 'transparent', representing the geometry IDs and keys of opaque and transparent fragments. They must be distinguished because THREE.js doesn't support transparency per instance in InstancedMesh.\n     */\n    __publicField(this, \"geometryIDs\", {\n      opaque: /* @__PURE__ */ new Map(),\n      transparent: /* @__PURE__ */ new Map()\n    });\n    /**\n     * An object representing metadata about the IFC model defined by the IFC schema.\n     */\n    __publicField(this, \"ifcMetadata\", {\n      name: \"\",\n      description: \"\",\n      schema: \"IFC2X3\",\n      maxExpressID: 0\n    });\n    /**\n     * An optional object containing civil engineering data.\n     */\n    __publicField(this, \"civilData\");\n    /**\n     * An object containing settings for streaming data, including base URL, base file name, IDs, and types.\n     */\n    __publicField(this, \"streamSettings\", {\n      baseFileName: \"\",\n      ids: /* @__PURE__ */ new Map(),\n      types: /* @__PURE__ */ new Map()\n    });\n    /**\n     * Whether this fragments group is being streamed or not.\n     */\n    __publicField(this, \"isStreamed\", false);\n    /**\n     * A protected property representing local properties of the fragments in this group.\n     */\n    __publicField(this, \"_properties\");\n  }\n  /**\n   * A getter that checks if this group has properties, either locally defined or streamed from a data source.\n   */\n  get hasProperties() {\n    const hasLocalProps = this._properties !== void 0;\n    const hasStreamProps = this.streamSettings.ids.size !== 0;\n    return hasLocalProps || hasStreamProps;\n  }\n  /**\n   * A method to create a map of fragment IDs and express IDs contained within them. This is useful because if you want to get \"a chair\", it might be made of 4 different geometries, and thus the subsets of 4 different fragments. Using this method, you would get exactly the fragments of where that chair is.\n   * @param expressIDs - An iterable of express IDs to create the map for. If not provided, returns the fragment ID map for the whole group.\n   * @returns A map where the keys are fragment IDs and the values are sets of express IDs.\n   */\n  getFragmentMap(expressIDs = this.data.keys()) {\n    const fragmentMap = {};\n    for (const expressID of expressIDs) {\n      const data = this.data.get(expressID);\n      if (!data)\n        continue;\n      for (const key of data[0]) {\n        const fragmentID = this.keyFragments.get(key);\n        if (fragmentID === void 0)\n          continue;\n        if (!fragmentMap[fragmentID]) {\n          fragmentMap[fragmentID] = /* @__PURE__ */ new Set();\n        }\n        fragmentMap[fragmentID].add(expressID);\n      }\n    }\n    return fragmentMap;\n  }\n  /**\n   * Method to retrieve the vertices of a specific item within the fragments.\n   * This method finds the fragments that contain the specified item,\n   * then retrieves the vertices of those fragments.\n   *\n   * @param itemID - The ID of the item for which to retrieve vertices. Usually, an IFC expressID.\n   * @returns An array of THREE.Vector3 objects representing the vertices of the specified item.\n   *\n   * @example\n   * ```typescript\n   * const itemVertices = fragmentsGroup.getItemVertices(12345);\n   * for (const vertex of itemVertices) {\n   *   console.log(`Vertex: ${vertex.x}, ${vertex.y}, ${vertex.z}`);\n   * }\n   * ```\n   */\n  getItemVertices(itemID) {\n    const vertices = [];\n    const fragmentIdMap = this.getFragmentMap([itemID]);\n    for (const fragmentID in fragmentIdMap) {\n      const fragment = this.items.find(\n        (fragment2) => fragment2.id === fragmentID\n      );\n      if (!fragment)\n        continue;\n      const itemInstances = fragment.getInstancesIDs(itemID);\n      if (!itemInstances)\n        continue;\n      for (const instance of itemInstances) {\n        const matrix = new THREE.Matrix4();\n        fragment.mesh.getMatrixAt(instance, matrix);\n        for (const vertex of fragment.uniqueVertices) {\n          const vector = vertex.clone().applyMatrix4(matrix);\n          vertices.push(vector);\n        }\n      }\n    }\n    return vertices;\n  }\n  /**\n   * Enables or disables the local property caching system.\n   *\n   * @param enabled - Whether to enable or disable it.\n   */\n  static setPropertiesDB(enabled) {\n    if (enabled) {\n      if (!_FragmentsGroup.propertiesDB) {\n        _FragmentsGroup.propertiesDB = new StreamerFileDb(\n          \"that-open-company-streaming-properties\"\n        );\n      }\n    } else if (!enabled) {\n      if (_FragmentsGroup.propertiesDB) {\n        _FragmentsGroup.propertiesDB.dispose();\n      }\n    }\n  }\n  /**\n   * Method to dispose of the resources used by the FragmentsGroup.\n   *\n   * @param disposeResources - If true, also dispose of the resources used by the fragments (geometries and materials). Default is true.\n   */\n  dispose(disposeResources = true) {\n    for (const fragment of this.items) {\n      fragment.dispose(disposeResources);\n    }\n    this.coordinationMatrix = new THREE.Matrix4();\n    this.keyFragments.clear();\n    this.data.clear();\n    this._properties = {};\n    this.removeFromParent();\n    this.items = [];\n    if (this.civilData) {\n      const { alignments } = this.civilData;\n      for (const [_id, alignment] of alignments) {\n        this.disposeAlignment(alignment.vertical);\n        this.disposeAlignment(alignment.horizontal);\n        this.disposeAlignment(alignment.absolute);\n      }\n    }\n    this.civilData = void 0;\n  }\n  /**\n   * Method to set local properties of the fragments in this group.\n   *\n   * @param properties - An object containing properties of type IfcProperties.\n   * The keys of the object are express IDs as strings, and the values are objects representing the properties of the corresponding express ID.\n   *\n   * @example\n   * ```typescript\n   * const properties: IfcProperties = {\n   *   \"12345\": {\n   *     name: \"Chair\",\n   *     type: 1001,\n   *     color: [0.5, 0.5, 0.5],\n   *     //... other properties\n   *   },\n   *   \"67890\": {\n   *     name: \"Table\",\n   *     type: 1002,\n   *     color: [0.8, 0.8, 0.8],\n   *     //... other properties\n   *   },\n   *   //... more properties\n   * };\n   *\n   * fragmentsGroup.setLocalProperties(properties);\n   * ```\n   */\n  setLocalProperties(properties) {\n    this._properties = properties;\n  }\n  /**\n   * Method to retrieve the local properties of the fragments in this group.\n   *\n   * @returns {IfcProperties | undefined} - An object containing properties of type IfcProperties.\n   * The keys of the object are express IDs as strings, and the values are objects representing the properties of the corresponding express ID.\n   * If no local properties are set, it returns `undefined`.\n   *\n   * @example\n   * ```typescript\n   * const properties = fragmentsGroup.getLocalProperties();\n   * if (properties) {\n   *   for (const id in properties) {\n   *     const property = properties[id];\n   *     console.log(`ID: ${id}, Name: ${property.name}, Type: ${property.type}`);\n   *   }\n   * }\n   * ```\n   */\n  getLocalProperties() {\n    return this._properties;\n  }\n  /**\n   * Method to retrieve all property IDs from either local properties or streamed properties.\n   *\n   * @returns {number[]} - An array of property IDs.\n   *\n   * @example\n   * ```typescript\n   * const propertyIDs = fragmentsGroup.getAllPropertiesIDs();\n   * console.log(propertyIDs); // Output: [12345, 67890,...]\n   * ```\n   */\n  getAllPropertiesIDs() {\n    if (this._properties) {\n      return Object.keys(this._properties).map((id) => parseInt(id, 10));\n    }\n    return Array.from(this.streamSettings.ids.keys());\n  }\n  /**\n   * Method to retrieve all property types from either local properties or streamed properties.\n   *\n   * @returns {number[]} - An array of unique property types.\n   *\n   * @example\n   * ```typescript\n   * const propertyTypes = fragmentsGroup.getAllPropertiesTypes();\n   * console.log(propertyTypes); // Output: [1001, 1002,...]\n   * ```\n   */\n  getAllPropertiesTypes() {\n    if (this._properties) {\n      const types = /* @__PURE__ */ new Set();\n      for (const id in this._properties) {\n        const property = this._properties[id];\n        if (property.type !== void 0) {\n          types.add(property.type);\n        }\n      }\n      return Array.from(types);\n    }\n    return Array.from(this.streamSettings.types.keys());\n  }\n  async getProperties(id) {\n    if (this._properties) {\n      return this._properties[id] || null;\n    }\n    const url = this.getPropsURL(id);\n    const data = await this.getPropertiesData(url);\n    return data ? data[id] : null;\n  }\n  /**\n   * Method to set properties of a specific fragment in this group.\n   *\n   * @param id - The ID of the fragment for which to set properties.\n   * @param value - The new properties to set for the fragment. If null, it deletes the properties for the fragment.\n   * @throws Will throw an error if writing streamed properties, as it is not supported yet.\n   *\n   * @example\n   * ```typescript\n   * const properties: IfcProperties = {\n   *   \"12345\": {\n   *     name: \"Chair\",\n   *     type: 1001,\n   *     color: [0.5, 0.5, 0.5],\n   *     //... other properties\n   *   },\n   * };\n   *\n   * fragmentsGroup.setProperties(12345, properties[12345]);\n   * ```\n   */\n  async setProperties(id, value) {\n    if (this._properties) {\n      if (value !== null) {\n        this._properties[id] = value;\n      } else {\n        delete this._properties[id];\n      }\n      return;\n    }\n    throw new Error(\"Writing streamed properties not supported yet!\");\n  }\n  /**\n   * Method to retrieve all properties of a specific type from either local properties or streamed properties.\n   *\n   * @param type - The type of properties to retrieve.\n   * @returns A Promise that resolves to an object containing properties of type IfcProperties, or null if no properties of the specified type are found.\n   *\n   * @example\n   * ```typescript\n   * const type = 1001; // Example type\n   * fragmentsGroup.getAllPropertiesOfType(type).then((properties) => {\n   *   if (properties) {\n   *     for (const id in properties) {\n   *       const property = properties[id];\n   *       console.log(`ID: ${id}, Name: ${property.name}, Type: ${property.type}`);\n   *     }\n   *   } else {\n   *     console.log(`No properties of type ${type} found.`);\n   *   }\n   * });\n   * ```\n   */\n  async getAllPropertiesOfType(type) {\n    if (this._properties) {\n      const result2 = {};\n      let found = false;\n      for (const id in this._properties) {\n        const item = this._properties[id];\n        if (item.type === type) {\n          result2[item.expressID] = item;\n          found = true;\n        }\n      }\n      return found ? result2 : null;\n    }\n    const { types } = this.streamSettings;\n    const fileIDs = types.get(type);\n    if (fileIDs === void 0) {\n      return null;\n    }\n    const result = {};\n    for (const fileID of fileIDs) {\n      const name = this.constructFileName(fileID);\n      const data = await this.getPropertiesData(name);\n      for (const key in data) {\n        result[parseInt(key, 10)] = data[key];\n      }\n    }\n    return result;\n  }\n  clone(_recursive) {\n    throw new Error(\"Use FragmentsGroup.cloneGroup instead!\");\n  }\n  /**\n   * Creates a copy of the whole group or a part of it. Each fragment clone shares the geometry of with its respective original fragment, but has its own InstancedMesh data, so it also needs to be disposed.\n   *\n   * @param items - Optional - The part of the group to be cloned. If not given, the whole group is cloned.\n   *\n   */\n  cloneGroup(items) {\n    const newGroup = new _FragmentsGroup();\n    newGroup.coordinationMatrix = this.coordinationMatrix;\n    newGroup.position.copy(this.position);\n    newGroup.rotation.copy(this.rotation);\n    newGroup.scale.copy(this.scale);\n    newGroup.updateMatrix();\n    newGroup.ifcMetadata = { ...this.ifcMetadata };\n    if (!items) {\n      items = this.getFragmentMap(this.data.keys());\n    }\n    const allIDs = /* @__PURE__ */ new Set();\n    const fragmentIDConversion = /* @__PURE__ */ new Map();\n    for (const fragment of this.items) {\n      if (!items[fragment.id]) {\n        continue;\n      }\n      const ids = items[fragment.id];\n      const newFragment = fragment.clone(ids);\n      fragmentIDConversion.set(fragment.id, newFragment.id);\n      newGroup.items.push(newFragment);\n      newGroup.add(newFragment.mesh);\n      for (const expressID of ids) {\n        allIDs.add(expressID);\n      }\n    }\n    for (const id of allIDs) {\n      const data = this.data.get(id);\n      if (data) {\n        newGroup.data.set(id, data);\n      }\n    }\n    for (const [fragKey, fragID] of this.keyFragments) {\n      if (fragmentIDConversion.has(fragID)) {\n        const newID = fragmentIDConversion.get(fragID);\n        if (newID === void 0) {\n          throw new Error(\"Malformed fragment ID map during clone!\");\n        }\n        newGroup.keyFragments.set(fragKey, newID);\n      }\n    }\n    for (const [globalID, expressID] of this.globalToExpressIDs) {\n      if (allIDs.has(expressID)) {\n        newGroup.globalToExpressIDs.set(globalID, expressID);\n      }\n    }\n    if (this.civilData) {\n      newGroup.civilData = {\n        coordinationMatrix: this.coordinationMatrix,\n        alignments: /* @__PURE__ */ new Map()\n      };\n    }\n    return newGroup;\n  }\n  getPropsURL(id) {\n    const { ids } = this.streamSettings;\n    const fileID = ids.get(id);\n    if (fileID === void 0) {\n      throw new Error(\"ID not found\");\n    }\n    return this.constructFileName(fileID);\n  }\n  async getPropertiesData(name) {\n    var _a;\n    if ((_a = this.streamSettings.baseUrl) == null ? void 0 : _a.length) {\n      console.warn(\n        \"streamSettings.baseUrl is deprecated. Use FragmentsGroup.url instead.\"\n      );\n      _FragmentsGroup.url = this.streamSettings.baseUrl;\n    }\n    let fetched;\n    if (_FragmentsGroup.useCache) {\n      let found = null;\n      if (_FragmentsGroup.propertiesDB) {\n        found = await _FragmentsGroup.propertiesDB.get(name);\n      }\n      if (found) {\n        fetched = await found.text();\n      } else {\n        const dataFromBackend = await _FragmentsGroup.fetch(name);\n        fetched = await dataFromBackend.text();\n        if (_FragmentsGroup.propertiesDB) {\n          const encoder = new TextEncoder();\n          const buffer = encoder.encode(fetched);\n          await _FragmentsGroup.propertiesDB.add(name, buffer);\n        }\n      }\n    } else {\n      const dataFromBackend = await _FragmentsGroup.fetch(name);\n      fetched = await dataFromBackend.text();\n    }\n    return JSON.parse(fetched);\n  }\n  constructFileName(fileID) {\n    if (_FragmentsGroup.constructFileName) {\n      return _FragmentsGroup.constructFileName(fileID);\n    }\n    const { baseFileName } = this.streamSettings;\n    return `${baseFileName}-${fileID}`;\n  }\n  disposeAlignment(alignment) {\n    for (const curve of alignment) {\n      curve.mesh.geometry.dispose();\n      if (Array.isArray(curve.mesh.material)) {\n        for (const mat of curve.mesh.material) {\n          mat.dispose();\n        }\n      } else {\n        curve.mesh.material.dispose();\n      }\n    }\n    alignment.length = 0;\n  }\n};\n__publicField(_FragmentsGroup, \"fetch\", async (url) => {\n  return fetch(`${_FragmentsGroup.url}${url}`);\n});\n__publicField(_FragmentsGroup, \"constructFileName\", null);\n/**\n * Default URL for requesting property tiles. Feel free to change this, or override the FragmentsGroup.fetch method for more granular control.\n */\n__publicField(_FragmentsGroup, \"url\", \"\");\n/**\n * Whether to use local cache when streaming properties.\n */\n__publicField(_FragmentsGroup, \"useCache\", true);\n/**\n * The object in charge of caching property files locally to save requests over the network.\n */\n__publicField(_FragmentsGroup, \"propertiesDB\", null);\nlet FragmentsGroup3 = _FragmentsGroup;\nclass Alignment3 {\n  constructor() {\n    /**\n     * Vertical civil curves in the alignment.\n     */\n    __publicField(this, \"vertical\", []);\n    /**\n     * Horizontal civil curves in the alignment.\n     */\n    __publicField(this, \"horizontal\", []);\n    /**\n     * Absolute civil curves in the alignment.\n     */\n    __publicField(this, \"absolute\", []);\n    /**\n     * Initial KP (Kilometer Point) of the alignment.\n     */\n    __publicField(this, \"initialKP\", 0);\n  }\n  /**\n   * Returns the total length of the specified alignment type.\n   * @param type - The type of alignment (vertical, horizontal, or absolute).\n   * @returns The total length of the specified alignment type.\n   */\n  getLength(type) {\n    let length = 0;\n    for (const curve of this[type]) {\n      length += curve.getLength();\n    }\n    return length;\n  }\n  /**\n   * Returns the point at the specified percentage along the specified alignment type.\n   * @param percentage - The percentage along the alignment type (between zero and one).\n   * @param type - The type of alignment (vertical, horizontal, or absolute).\n   * @returns The point at the specified percentage along the specified alignment type.\n   * @throws Will throw an error if the percentage is out of range or if the point cannot be computed.\n   */\n  getPointAt(percentage, type) {\n    const found = this.getCurveAt(percentage, type);\n    return found.curve.getPointAt(found.percentage);\n  }\n  // Returns the percentage or null if the point is not contained in this alignment\n  getPercentageAt(point, type, tolerance = 0.01) {\n    const alignment = this[type];\n    let currentLength = 0;\n    for (const curve of alignment) {\n      const factor = curve.getPercentageAt(point, tolerance);\n      const curveLength = curve.getLength();\n      if (factor !== null) {\n        const foundLength = currentLength + factor * curveLength;\n        const totalLength = this.getLength(type);\n        return foundLength / totalLength;\n      }\n      currentLength += curveLength;\n    }\n    return null;\n  }\n  /**\n   * Returns the curve and the percentage at the specified percentage along the specified alignment type.\n   * If the percentage is out of range, it will be clamped to the nearest valid value (0 or 1).\n   * If the point cannot be computed, an error will be thrown.\n   *\n   * @param percentage - The percentage along the alignment type (between zero and one).\n   * @param type - The type of alignment (vertical, horizontal, or absolute).\n   * @returns An object containing the curve and the percentage along the curve.\n   * @throws Will throw an error if the percentage is out of range or if the point cannot be computed.\n   */\n  getCurveAt(percentage, type) {\n    if (percentage < 0) {\n      percentage = 0;\n    } else if (percentage > 1) {\n      percentage = 1;\n    }\n    const alignment = this[type];\n    const alignmentLength = this.getLength(type);\n    const targetLength = alignmentLength * percentage;\n    let accumulatedLength = 0;\n    for (const curve of alignment) {\n      const curveLength = curve.getLength();\n      if (accumulatedLength + curveLength >= targetLength) {\n        const targetCurveLength = targetLength - accumulatedLength;\n        const percentage2 = targetCurveLength / curveLength;\n        return { curve, percentage: percentage2 };\n      }\n      accumulatedLength += curveLength;\n    }\n    throw new Error(\"Could not compute point!\");\n  }\n}\nclass CivilCurve3 {\n  /**\n   * Constructs a new instance of CivilCurve.\n   * @param index - The index of the curve.\n   * @param mesh - The mesh associated with the curve.\n   * @param data - Additional data associated with the curve.\n   * @param alignment - The alignment of the curve.\n   */\n  constructor(index, mesh, data, alignment) {\n    /**\n     * The index of the curve. An alignment is a sequence of ordered curves, and this is the index of this curve in that sequence.\n     */\n    __publicField(this, \"index\");\n    /**\n     * The THREE.js mesh containing the vertices of the curve.\n     */\n    __publicField(this, \"mesh\");\n    /**\n     * Additional data associated with the curve.\n     */\n    __publicField(this, \"data\");\n    /**\n     * The alignment to which this curve belongs.\n     */\n    __publicField(this, \"alignment\");\n    this.index = index;\n    this.mesh = mesh;\n    this.data = data;\n    this.alignment = alignment;\n  }\n  get _index() {\n    return this.mesh.geometry.index;\n  }\n  get _pos() {\n    return this.mesh.geometry.attributes.position.array;\n  }\n  /**\n   * Calculates the total length of the curve by summing up the lengths of all segments.\n   * @returns The total length of the curve.\n   */\n  getLength() {\n    let length = 0;\n    for (let i = 0; i < this._index.array.length - 1; i += 2) {\n      const { startPoint, endPoint } = this.getSegment(i);\n      length += startPoint.distanceTo(endPoint);\n    }\n    return length;\n  }\n  /**\n   * Calculates a point on the curve based on the given percentage.\n   *\n   * @param percentage - The percentage along the curve (between zero and one).\n   * @returns A new THREE.Vector3 representing the point on the curve.\n   *\n   * @remarks\n   * The method works by first finding the segment that corresponds to the given percentage.\n   * It then normalizes the direction of the segment, multiplies it by the distance to the start of the segment,\n   * and adds it to the start point of the segment.\n   *\n   * @throws Will throw an error if the percentage is outside the range [0, 1].\n   */\n  getPointAt(percentage) {\n    const { startPoint, endPoint, distanceToStart } = this.getSegmentAt(percentage);\n    const targetPoint = endPoint.clone();\n    targetPoint.sub(startPoint);\n    targetPoint.normalize();\n    targetPoint.multiplyScalar(distanceToStart);\n    targetPoint.add(startPoint);\n    return targetPoint;\n  }\n  /**\n   * Calculates a segment of the curve based on the given percentage.\n   *\n   * @param percentage - The percentage along the curve (between zero and one).\n   * @returns An object containing the distance to the start of the segment, the index of the segment, and the start and end points of the segment.\n   *\n   * @remarks\n   * The method works by first finding the segment that corresponds to the given percentage.\n   * It then returns an object containing the distance to the start of the segment, the index of the segment, and the start and end points of the segment.\n   *\n   * @throws Will throw an error if the percentage is outside the range [0, 1].\n   */\n  getSegmentAt(percentage) {\n    if (percentage < 0) {\n      percentage = 0;\n    } else if (percentage > 1) {\n      percentage = 1;\n    }\n    const totalLength = this.getLength();\n    const targetLength = totalLength * percentage;\n    let accumulatedLength = 0;\n    for (let index = 0; index < this._index.array.length - 1; index += 2) {\n      const { startPoint, endPoint } = this.getSegment(index);\n      const segmentLength = startPoint.distanceTo(endPoint);\n      if (accumulatedLength + segmentLength >= targetLength) {\n        const distanceToStart = targetLength - accumulatedLength;\n        return { distanceToStart, index, startPoint, endPoint };\n      }\n      accumulatedLength += segmentLength;\n    }\n    throw new Error(\"Could not compute point\");\n  }\n  /**\n   * Calculates the percentage of the curve that corresponds to the given point.\n   *\n   * @param point - The point for which to calculate the percentage.\n   * @param tolerance - The tolerance for determining if a point is on the curve. Default is 0.01.\n   * @returns The percentage of the curve that corresponds to the given point, or null if the point is not contained in this curve.\n   *\n   * @remarks\n   * The method works by iterating over each segment of the curve and checking if the given point is within the tolerance of the segment.\n   * If a point is found, it calculates the percentage of the curve that corresponds to the point.\n   * If no point is found, it returns null.\n   */\n  getPercentageAt(point, tolerance = 0.01) {\n    let currentLength = 0;\n    for (let i = 0; i < this._index.array.length - 1; i += 2) {\n      const { startPoint, endPoint } = this.getSegment(i);\n      const segmentLength = startPoint.distanceTo(endPoint);\n      const startLength = point.distanceTo(startPoint);\n      const endLength = point.distanceTo(endPoint);\n      const combinedLength = startLength + endLength;\n      const hasPoint = combinedLength - segmentLength <= tolerance;\n      if (hasPoint) {\n        const foundLength = currentLength + startLength;\n        const totalLength = this.getLength();\n        return foundLength / totalLength;\n      }\n      currentLength += segmentLength;\n    }\n    return null;\n  }\n  /**\n   * Retrieves a segment of the curve based on the given index.\n   *\n   * @param index - The index of the segment.\n   * @returns An object containing the start and end points of the segment.\n   *\n   * @remarks\n   * The method calculates the start and end points of the segment based on the given index.\n   * It uses the index array and position attribute of the curve's geometry to determine the start and end points.\n   *\n   * @throws Will throw an error if the index is out of range.\n   */\n  getSegment(index) {\n    const start = this._index.array[index] * 3;\n    const end = this._index.array[index + 1] * 3;\n    const startPoint = new THREE.Vector3(\n      this._pos[start],\n      this._pos[start + 1],\n      this._pos[start + 2]\n    );\n    const endPoint = new THREE.Vector3(\n      this._pos[end],\n      this._pos[end + 1],\n      this._pos[end + 2]\n    );\n    return { startPoint, endPoint };\n  }\n}\nclass CurveMesh extends THREE.LineSegments {\n  /**\n   * Constructs a new instance of CurveMesh.\n   *\n   * @param index - The index of the curve mesh.\n   * @param data - The data associated with the curve mesh.\n   * @param alignment - The alignment of the curve mesh.\n   * @param geometry - The geometry for the curve mesh. Optional.\n   * @param material - The material(s) for the curve mesh. Optional.\n   */\n  constructor(index, data, alignment, geometry, material) {\n    super(geometry, material);\n    /**\n     * The civil curve associated with this curve mesh.\n     */\n    __publicField(this, \"curve\");\n    this.curve = new CivilCurve3(index, this, data, alignment);\n  }\n}\nclass StreamedGeometry {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsStreamedGeometry(bb, obj) {\n    return (obj || new StreamedGeometry()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsStreamedGeometry(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new StreamedGeometry()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  geometryId() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;\n  }\n  position(index) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  positionLength() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  positionArray() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  normal(index) {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.readFloat32(\n      this.bb.__vector(this.bb_pos + offset) + index * 4\n    ) : 0;\n  }\n  normalLength() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  normalArray() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? new Float32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  index(index) {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n  }\n  indexLength() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  indexArray() {\n    const offset = this.bb.__offset(this.bb_pos, 10);\n    return offset ? new Uint32Array(\n      this.bb.bytes().buffer,\n      this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),\n      this.bb.__vector_len(this.bb_pos + offset)\n    ) : null;\n  }\n  static startStreamedGeometry(builder) {\n    builder.startObject(4);\n  }\n  static addGeometryId(builder, geometryId) {\n    builder.addFieldInt32(0, geometryId, 0);\n  }\n  static addPosition(builder, positionOffset) {\n    builder.addFieldOffset(1, positionOffset, 0);\n  }\n  static createPositionVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startPositionVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addNormal(builder, normalOffset) {\n    builder.addFieldOffset(2, normalOffset, 0);\n  }\n  static createNormalVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addFloat32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startNormalVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static addIndex(builder, indexOffset) {\n    builder.addFieldOffset(3, indexOffset, 0);\n  }\n  static createIndexVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addInt32(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startIndexVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static endStreamedGeometry(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createStreamedGeometry(builder, geometryId, positionOffset, normalOffset, indexOffset) {\n    StreamedGeometry.startStreamedGeometry(builder);\n    StreamedGeometry.addGeometryId(builder, geometryId);\n    StreamedGeometry.addPosition(builder, positionOffset);\n    StreamedGeometry.addNormal(builder, normalOffset);\n    StreamedGeometry.addIndex(builder, indexOffset);\n    return StreamedGeometry.endStreamedGeometry(builder);\n  }\n}\nclass StreamedGeometries {\n  constructor() {\n    __publicField(this, \"bb\", null);\n    __publicField(this, \"bb_pos\", 0);\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsStreamedGeometries(bb, obj) {\n    return (obj || new StreamedGeometries()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  static getSizePrefixedRootAsStreamedGeometries(bb, obj) {\n    bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);\n    return (obj || new StreamedGeometries()).__init(\n      bb.readInt32(bb.position()) + bb.position(),\n      bb\n    );\n  }\n  geometries(index, obj) {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? (obj || new StreamedGeometry()).__init(\n      this.bb.__indirect(\n        this.bb.__vector(this.bb_pos + offset) + index * 4\n      ),\n      this.bb\n    ) : null;\n  }\n  geometriesLength() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n  }\n  static startStreamedGeometries(builder) {\n    builder.startObject(1);\n  }\n  static addGeometries(builder, geometriesOffset) {\n    builder.addFieldOffset(0, geometriesOffset, 0);\n  }\n  static createGeometriesVector(builder, data) {\n    builder.startVector(4, data.length, 4);\n    for (let i = data.length - 1; i >= 0; i--) {\n      builder.addOffset(data[i]);\n    }\n    return builder.endVector();\n  }\n  static startGeometriesVector(builder, numElems) {\n    builder.startVector(4, numElems, 4);\n  }\n  static endStreamedGeometries(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static finishStreamedGeometriesBuffer(builder, offset) {\n    builder.finish(offset);\n  }\n  static finishSizePrefixedStreamedGeometriesBuffer(builder, offset) {\n    builder.finish(offset, void 0, true);\n  }\n  static createStreamedGeometries(builder, geometriesOffset) {\n    StreamedGeometries.startStreamedGeometries(builder);\n    StreamedGeometries.addGeometries(builder, geometriesOffset);\n    return StreamedGeometries.endStreamedGeometries(builder);\n  }\n}\nclass StreamSerializer {\n  /**\n   * Imports geometry data from a byte array in a streamed format.\n   *\n   * @param bytes - The byte array containing the serialized geometry data.\n   * @returns A Map of geometry IDs to their respective position, normal, and index arrays.\n   * @throws Will throw an error if the geometry ID is not found.\n   */\n  import(bytes) {\n    const buffer = new ByteBuffer(bytes);\n    const fbGeoms = StreamedGeometries.getRootAsStreamedGeometries(buffer);\n    const geometries = /* @__PURE__ */ new Map();\n    const length = fbGeoms.geometriesLength();\n    for (let i = 0; i < length; i++) {\n      const fbGeom = fbGeoms.geometries(i);\n      if (!fbGeom)\n        continue;\n      const id = fbGeom.geometryId();\n      if (id === null) {\n        throw new Error(\"Error finding ID!\");\n      }\n      const position = fbGeom.positionArray();\n      const normal = fbGeom.normalArray();\n      const index = fbGeom.indexArray();\n      if (!position || !normal || !index) {\n        continue;\n      }\n      geometries.set(id, { position, normal, index });\n    }\n    return geometries;\n  }\n  /**\n   * Exports geometry data to a byte array in a streamed format.\n   *\n   * @param geometries - A Map of geometry IDs to their respective position, normal, and index arrays.\n   * @returns A Uint8Array containing the serialized geometry data.\n   */\n  export(geometries) {\n    const builder = new Builder(1024);\n    const createdGeoms = [];\n    const Gs = StreamedGeometries;\n    const G = StreamedGeometry;\n    for (const [id, { index, position, normal }] of geometries) {\n      const indexVector = G.createIndexVector(builder, index);\n      const posVector = G.createPositionVector(builder, position);\n      const norVector = G.createNormalVector(builder, normal);\n      G.startStreamedGeometry(builder);\n      G.addGeometryId(builder, id);\n      G.addIndex(builder, indexVector);\n      G.addPosition(builder, posVector);\n      G.addNormal(builder, norVector);\n      const created = G.endStreamedGeometry(builder);\n      createdGeoms.push(created);\n    }\n    const allGeoms = Gs.createGeometriesVector(builder, createdGeoms);\n    Gs.startStreamedGeometries(builder);\n    Gs.addGeometries(builder, allGeoms);\n    const result = Gs.endStreamedGeometries(builder);\n    builder.finish(result);\n    return builder.asUint8Array();\n  }\n}\nclass FragmentUtils {\n  static combine(maps) {\n    if (maps.length === 0) {\n      return {};\n    }\n    if (maps.length === 1) {\n      return maps[0];\n    }\n    const result = {};\n    for (const map of maps) {\n      for (const fragID in map) {\n        if (!result[fragID]) {\n          result[fragID] = /* @__PURE__ */ new Set();\n        }\n        for (const expressID of map[fragID]) {\n          result[fragID].add(expressID);\n        }\n      }\n    }\n    return result;\n  }\n  static intersect(maps) {\n    if (maps.length === 0) {\n      return {};\n    }\n    if (maps.length === 1) {\n      return maps[0];\n    }\n    const visitedIDs = /* @__PURE__ */ new Map();\n    let mapsCount = 0;\n    for (const map of maps) {\n      mapsCount++;\n      for (const fragID in map) {\n        if (!visitedIDs.has(fragID)) {\n          visitedIDs.set(fragID, {\n            count: 0,\n            ids: /* @__PURE__ */ new Map()\n          });\n        }\n        const current = visitedIDs.get(fragID);\n        current.count++;\n        for (const id of map[fragID]) {\n          const idCount = current.ids.get(id) || 0;\n          current.ids.set(id, idCount + 1);\n        }\n      }\n    }\n    const result = {};\n    for (const [fragID, { count, ids }] of visitedIDs) {\n      if (count !== mapsCount) {\n        continue;\n      }\n      for (const [id, idCount] of ids) {\n        if (idCount !== mapsCount) {\n          continue;\n        }\n        if (!result[fragID]) {\n          result[fragID] = /* @__PURE__ */ new Set();\n        }\n        result[fragID].add(id);\n      }\n    }\n    return result;\n  }\n  static copy(map) {\n    const copied = {};\n    for (const id in map) {\n      copied[id] = new Set(map[id]);\n    }\n    return copied;\n  }\n  static export(map) {\n    const serialized = {};\n    for (const fragID in map) {\n      serialized[fragID] = Array.from(map[fragID]);\n    }\n    return serialized;\n  }\n  static import(serialized) {\n    const map = {};\n    for (const fragID in serialized) {\n      map[fragID] = new Set(serialized[fragID]);\n    }\n    return map;\n  }\n}\nexport {\n  Alignment3 as Alignment,\n  CivilCurve3 as CivilCurve,\n  CurveMesh,\n  Fragment$2 as Fragment,\n  FragmentMesh,\n  FragmentUtils,\n  FragmentsGroup3 as FragmentsGroup,\n  Serializer,\n  StreamSerializer,\n  StreamerFileDb\n};\n"],
  "mappings": "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",
  "names": ["_BVH", "_FragmentsGroup"]
}
